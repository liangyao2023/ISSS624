---
title: "In Class Exercise 4"
author: "LIANG YAO"
date: '9 Dec 2023'
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
  echo: true
  eval: true
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
---

## **1 Overview**

**Geographically weighted poisson regression**.

## **2 Get ready**

```{r}
pacman::p_load(sf, tmap, tidyverse, httr, ggpubr)
```

## **3 Geocoding using SLA API**

### 3.1 Geospatial data.

Import mpsz data.

```{r}
mpsz = st_read(dsn = "./data/geospatial",
                   layer = "MP14_SUBZONE_WEB_PL")  %>% st_transform(crs = 3414) 
```

```{r}
url <- "https://www.onemap.gov.sg/api/common/elastic/search"
```

```{r}
csv <- read_csv("./data/aspatial/Generalinformationofschools.csv")
postcodes <- csv$'postal_code'
```

```{r}
found <- data.frame()
not_found <- data.frame()

for(postcode in postcodes){
  query<- list('searchVal'=postcode, 'returnGeom'='Y', 'getAddrDetails'='Y', 'pageNum'='1')
  res <- GET(url, query = query)
  
  if((content(res)$found)!=0){
    found <- rbind(found, data.frame(content(res))[4:13])
  } else{
    not_found = data.frame(postcode)
  }
}
```

Combine found and not_found data.

```{r}
merged <- merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE) %>%
  drop_na()
```

Save the results.

```{r}
#| eval: false
write.csv(merged, file = './data/aspatial/schools.csv')
write.csv(not_found, file = './data/aspatial/not_found.csv')
```

### **3.2 Aspatial Data**

Importing schools data.

```{r}
schools <- read_csv('./data/aspatial/schools.csv')
```

Wrangling data.

```{r}
schools <- schools %>%
  rename(latitude = results.LATITUDE,
         longitude = results.LONGITUDE) %>%
  select(postal_code, school_name, latitude, longitude)
```

Converting an aspatial data into sf tibble data.frame

```{r}
schools_sf <- st_as_sf(schools, 
                       coords = c("longitude","latitude"),
                       crs = 4326) %>%
  st_transform(crs = 3414)
```

::: callout-tip
for 'coords', always pass longitude firstly and then latitude.
:::

## 4 Plotting

```{r}
tm_shape(mpsz) +
  tmap_options(check.and.fix = TRUE) +
  tm_polygons() +
tm_shape(schools_sf) +
  tm_dots()
```

::: callout-tip
Always remember to set tm_view(set.zoom.limits = c(11,14)) to restrict zoom if you use tmap_mode('view').
:::

Count schools in mpsz and check the summary.

```{r}
mpsz$'SCHOOL_COUNT' <- lengths(
  st_intersects(mpsz, schools_sf)
)

summary(mpsz$SCHOOL_COUNT)
```

Plot out.

```{r}
tm_shape(mpsz) +
  tmap_options(check.and.fix = TRUE) +
  tm_polygons() +
  tm_dots(size = 'SCHOOL_COUNT',
          col = "navy",
          alpha = 0.6)
```

## 5 Flow line analysis

Read flow line rds file.

```{r}
flow_data <- read_rds('./data/rds/flow_data_tidy.rds')

glimpse(flow_data)
```

Extract inter-zonal flow data.

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0, flow_data$MORNING_PEAK)
flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0.000001,1)

inter_zonal_flow <- flow_data %>% filter(FlowNoIntra > 0)

inter_zonal_flow <- inter_zonal_flow %>%
  rename(TRIPS = MORNING_PEAK,
         DIST = dist)
```

### 5.1 Origin constrained SIM

```{r}
orcSIM_Poisson <- glm(formula = TRIPS ~
                        ORIGIN_SZ +
                        log(SCHOOL_COUNT) +
                        log(RETAIL_COUNT) +
                        log(DIST) - 1,
                      family = poisson(link = 'log'),
                      data = inter_zonal_flow,
                      na.action = na.exclude)  # this line is just in case
summary(orcSIM_Poisson)
```

::: callout-tip
Read 'Estimate' of log(factor) to check the relationship between those attractiveness and propulsive factors and number of trips. Also check the p-value to ensure the factors' significance (\<0.05).
:::

### 5.2 Goodness of Fit

Check the R-Squared of our poisson analysis.

```{r}
cor(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values) ^2
```

Or you can create a function to find R-squared for further use.

```{r}
#| eval: false
RSquared <- function(observed, estimated){
  r <- cor(observed, estimated)
  R2 <- r^2
  R2
}
```

### 5.3 Doubly constrained

```{r}
dbcSIM_Poisson <- glm(formula = TRIPS ~
                        ORIGIN_SZ +
                        DESTIN_SZ +
                        log(DIST),
                      family = poisson(link = 'log'),
                      data = inter_zonal_flow,
                      na.action = na.exclude)  # this line is just in case
summary(dbcSIM_Poisson)
```
