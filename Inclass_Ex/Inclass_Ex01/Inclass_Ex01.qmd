---
title: "In Class Exercise 1"
author: "LIANG YAO"
date: '20 Nov 2023'
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
  echo: true
  eval: true
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
---

## 1 Data Acquisition

SSS624 Applied Geospatial Analytics will be conducted using case study approach. This run the use case is Urban Mobility analysis by using passenger volume by origin-destination bus stops. To get ready for the excercise, you are required to do the following as soon as possible:

-   Apply an API access from LTA by visiting [LTA DataMall](https://datamall.lta.gov.sg/content/datamall/en.html),

-   Complete the API Access form  and submit.  Please note that it will take at least one working day to reply you.

-   Next, return to Dynamic Datasets page and click on API Documentation. The pdf document appears.  Click on 2.6 and read the content carefully.

-   Once you received the API access code, read Section 1 of API Document and follow the instruction provided to download the data sets. You are required to download last three months data (August, September and October).

## 2 Data Preparation

### 2.1 Get ready

In this exercise, 3 R packages will be used. They are:

-   **tmap** for thematic mapping,

-   **sf** for importing, managing, and processing geospatial data, and

-   **tidyverse** for performing data science tasks such as importing, wrangling and visualizing data.

```{r}
pacman::p_load(tmap, sf, tidyverse)
```

### 2.2 Importing the OD Data

Import the passenger volume by origin destination bus stops data.

```{r}
#| eval: false
odbus = read_csv("/Users/SMU/liangyao2023/ISSS624/data/aspatial/origin_destination_bus_202308.csv")
```

Change data format for further wrangling.

```{r}
#| eval: false
odbus$ORIGIN_PT_CODE = as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE = as.factor(odbus$DESTINATION_PT_CODE)
```

### 2.3 Extracting Data

Extract passenger volume data between 7-9 o'clock during weekdays.

```{r}
#| eval: false
origtrip_7_9 = odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

-   Save the output in rds format

    ```{r}
    # write_rds(origtrip_7_9, "data/origin7_9.rds")
    ```

```{r}
# incase above code cannot render, read from saved file directly
# origtrip_7_9 = read_rds("data/origin7_9.rds")
```

## 3 Working with GeoSpatial Data

### 3.1 Importing Data

Use sf package to read master plan subzone data and bus stop location data.

```{r}
#| eval: false
mpsz = st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>% st_transform(crs = 3414)
```

```{r}
#| eval: false
busstop = st_read(dsn = "data/geospatial",
                   layer = "BusStop")  %>% st_transform(crs = 3414)
```

::: callout-notice
Here we use "st_transform(crs = 3414)" to change the coordinate from decimal degree to meters.
:::

### 3.2 Wrangling Data

Combine the bus stop location with the Singapore subzone map.

```{r}
#busstop_mpsz = st_intersection(busstop, mpsz) %>%
#  select(BUS_STOP_N, SUBZONE_C) %>%
#  st_drop_geometry()
```

::: callout-notice
-   `st_intersection()` is used to perform point and polygon overly and the output will be in point sf object.

-   `select()` of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.

-   five bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.
:::

```{r}
# write_rds(busstop_mpsz, "data/busstop_mpsz.csv")
# incase above code cannot render, directly read from saved file.
# busstop_mpsz = read_rds("data/busstop_mpsz.csv")  
```

Next, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame.

```{r}
#origin_data = left_join(origtrip_7_9, busstop_mpsz,
#            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
#  rename(ORIGIN_BS = ORIGIN_PT_CODE,
#         ORIGIN_SZ = SUBZONE_C)
```

Before continue, it is a good practice for us to check for duplicating records.

```{r}
#duplicate = origin_data %>%
#  group_by_all() %>%
#  filter(n()>1) %>%
#  ungroup()
```

It will be a good practice to confirm if the duplicating records issue has been addressed fully.

```{r}
#mpsz_origtrip = left_join(mpsz, 
#                           origin_data,
#                           by = c("SUBZONE_C" = "ORIGIN_SZ"))
```

### 3.3 Choropleth Visualization

Using the steps you had learned, prepare a choropleth map showing the distribution of passenger trips at planning sub-zone level.

```{r}
#tm_shape(mpsz_origtrip)+
#  tm_fill("TRIPS", 
#          style = "quantile", 
#          palette = "Blues",
#          title = "Passenger trips") +
#  tm_layout(main.title = "Passenger trips generated at planning sub-zone level",
#            main.title.position = "center",
#            main.title.size = 1.2,
#            legend.height = 0.45, 
#            legend.width = 0.35,
#            frame = TRUE) +
#  tm_borders(alpha = 0.5) +
#  tm_compass(type="8star", size = 2) +
#  tm_scale_bar() +
#  tm_grid(alpha =0.2) +
#  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n #and Population data from Department of Statistics DOS", 
#             position = c("left", "bottom"))
```
