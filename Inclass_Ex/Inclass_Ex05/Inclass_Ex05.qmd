---
title: "In Class Exercise 5"
author: "LIANG YAO"
date: '16 Dec 2023'
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
  echo: true
  eval: true
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
---

## **1 Overview**

Spatial Econometric Interaction Models.

## **2 Get ready**

Install development version of spflow package from github.

```{r}
devtools::install_github("LukeCe/spflow")
```

Load needed packages.

```{r}
pacman::p_load(sf, sp, tmap, spdep, tidyverse, spflow, Matrix, knitr)
```

## **3 Data Preparation**

-   a spatial weight.

-   a tibble data.frame of orig, dest, flows and distance

-   a tibble data.frame of explanatory variables.

### 3.1 Building the geographical area.

Import subzone layer.

```{r}
mpsz = st_read(dsn = "./data/geospatial",
                   layer = "MPSZ-2019")  %>% st_transform(crs = 3414) 
```

```{r}
busstop = st_read(dsn = "./data/geospatial",
                   layer = "BusStop")  %>% st_transform(crs = 3414) 
```

Preparing spatial weights.

```{r}
#| eval: false
centroids <- suppressWarnings({st_point_on_surface(st_geometry(mpsz_busstop))})

mpsz_nb <- list(
 "by_contiguity" = poly2nb(mpsz_busstop),
 "by_distance" = dnearneigh(centroids, d1=0, d2=5000),
 "by_knn" = knn2nb(knearneigh(centroids, 3)))

 mpsz_nb
```

```{r}
mpsz_nb <- read_rds("./data/rds/mpsz_nb.rds") 
mpsz_flow <- read_rds("./data/rds/mpsz_flow.rds") 
```

### **3.2 Explanatory Variables**

Importing passenger trips data.

```{r}
#| eval: false
od_data <- read_rds('./data/rds/od_data.rds')
odbus6_9 <- read_rds('./data/rds/odbus6_9.rds')
```

Importing explanatory variables data. Use length of st_intersects with sub_zone as count.

```{r}
mpsz_var <- read_rds('./data/rds/mpsz_var.rds')
```

### **3.3 Spflow Network**

Creating 'spflow_network-class' objects

```{r}
mpsz_net <- spflow_network(
  id_net = "sg",
  node_neighborhood = nb2mat(mpsz_nb$by_contiguity),
  node_data = mpsz_var,
  node_key_column = "SZ_CODE")

mpsz_net
```

::: callout-tip
Before we can choose to use contiguity or fix distance or knn as node_neighborhood, compare those three.
:::

Convert to pairwise data.

```{r}
mpsz_net_pair <- spflow_network_pair(
  id_orig_net = "sg",
  id_dest_net = "sg",
  pair_data = mpsz_flow,
  orig_key_column = "ORIGIN_SZ",
  dest_key_column = "DESTIN_SZ")

mpsz_net_pair
```

Combine net and pairwise data.

```{r}
mpsz_multi_net <- spflow_network_multi(mpsz_net, mpsz_net_pair)
mpsz_multi_net
```

## 4 Correlation Analysis

Check multi-collinearity between explanatory variables using:

-   pair_cor() to build correlation matrix.

-   cor_image() to plot the correlation matrix as a correlogram.

```{r}
#| fig-width: 10
#| fig-height: 10
cor_formula <- log(1+TRIPS) ~
  BUSSTOP_COUNT +
  AGE7_12 +
  AGE13_24 +
  AGE25_64 +
  SCHOOL_COUNT +
  BUSINESS_COUNT +
  RETAILS_COUNT +
  FINSERV_COUNT +
  P_(log(DISTANCE + 1))

cor_mat <- pair_cor(mpsz_multi_net,
                    spflow_formula = cor_formula,
                    add_lags_x = FALSE)

colnames(cor_mat) <- paste0(substr(colnames(cor_mat),1,3),"...")

cor_image(cor_mat)
```

## 5 Model Calibration

There are 3 estimate methods:

-   **Maximum likelihood estimation (MLE)**

    Maximum likelihood estimation is the default estimation procedure. The matrix form estimation in the framework of this model was first developed by LeSage and Pace (2008) and then improved by Dargel (2021) .

-   **Spatial two-stage least squares (S2SLS)**

    The S2SLS estimator is an adaptation of the one proposed by Kelejian and Prucha (1998) , to the case of origin-destination flows, with up to three neighborhood matrices Dargel (2021) . A similar estimation is done by Tamesue and Tsutsumi (2016) . The user can activate the S2SLS estimation via the `estimation_control` argument using the input `spflow_control(estimation_method = "s2sls")`.

-   **Bayesian Markov Chain Monte Carlo (MCMC)**

    The MCMC estimator is based on the ideas of LeSage and Pace (2009) and incorporates the improvements proposed in Dargel (2021) . The estimation is based on a tuned Metropolis-Hastings sampler for the auto-regressive parameters, and for the remaining parameters it uses Gibbs sampling. The routine uses 5500 iterations of the sampling procedure and considers the first 2500 as burn-in period. The user can activate the S2SLS estimation via the `estimation_control` argument using the input `spflow_control(estimation_method = "mcmc")`.

### 5.1 Basic Model

```{r}
base_model <- spflow(spflow_formula = log(1+TRIPS)~
                       O_(BUSSTOP_COUNT +
                            AGE25_64) +
                       D_(SCHOOL_COUNT +
                            BUSINESS_COUNT +
                            RETAILS_COUNT +
                            FINSERV_COUNT) + 
                       P_(log(DISTANCE + 1)),
                     spflow_networks = mpsz_multi_net)

base_model
```

::: callout-tip
estimation_control is by default using MLE following spflow_control(`estimation_method = "mle"`), can explicitly set using 'estimation_control = spflow_control(`estimation_method = "s2sls"`)'.
:::

### 5.2 Residual diagnostics

Using Moran scatter-plot of residuals.

```{r}
old_par <- par(mfrow = c(1,3),
               mar = c(2,2,2,2))
spflow_moran_plots(base_model)
```

inspect the relationship of the residual and the explanatory variables.

```{r}
#| fig-width: 10
#| fig-height: 10
corr_residual <- pair_cor(base_model)
colnames(corr_residual) <- substr(colnames(corr_residual),1,3)
cor_image(corr_residual)
```

### 5.3 Model control

```{r}
spflow_formula <- log(1+TRIPS)~
                       O_(BUSSTOP_COUNT +
                            AGE25_64) +
                       D_(SCHOOL_COUNT +
                            BUSINESS_COUNT +
                            RETAILS_COUNT +
                            FINSERV_COUNT) + 
                       P_(log(DISTANCE + 1))

model_control <- spflow_control(estimation_method = "mle",
                                model = "model_1")

mle_model1 <- spflow(spflow_formula,
                     spflow_networks = mpsz_multi_net,
                     estimation_control = model_control)

mle_model1
```

::: callout-tip
"model_1" is the unconstrained model, r-squared is quite low indicating pool estimate.
:::

use "model_8" to check the impact of intra-zonal trips.

```{r}
spflow_formula <- log(1+TRIPS)~
                       O_(BUSSTOP_COUNT +
                            AGE25_64) +
                       D_(SCHOOL_COUNT +
                            BUSINESS_COUNT +
                            RETAILS_COUNT +
                            FINSERV_COUNT) + 
                       P_(log(DISTANCE + 1))

model_control <- spflow_control(estimation_method = "mle",
                                model = "model_8")

mle_model8 <- spflow(spflow_formula,
                     spflow_networks = mpsz_multi_net,
                     estimation_control = model_control)

mle_model8
```
