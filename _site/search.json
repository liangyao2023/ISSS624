[
  {
    "objectID": "Takehome_Ex/Takehome_Ex01/data/geospatial/MPSZ-2019.html",
    "href": "Takehome_Ex/Takehome_Ex01/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html",
    "href": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "As city-wide urban infrastructures such as buses, taxis, mass rapid transit, public utilities and roads become digital, the datasets obtained can be used as a framework for tracking movement patterns through space and time. This is particularly true with the recent trend of massive deployment of pervasive computing technologies such as GPS and RFID on the vehicles. For example, routes and ridership data were collected with the use of smart cards and Global Positioning System (GPS) devices available on the public buses. These massive movement data collected are likely to contain structure and patterns that provide useful information about characteristics of the measured phenomena. The identification, analysis and comparison of such patterns will provide greater insights on human movement and behaviours within a city. These understandings will potentially contribute to a better urban management and useful information for urban transport services providers both from the private and public sector to formulate informed decision to gain competitive advantage.\nIn real-world practices, the use of these massive locational aware data, however, tend to be confined to simple tracking and mapping with GIS applications. This is mainly due to a general lack of functions in conventional GIS which is capable of analysing and model spatial and spatio-temporal data effectively.\n\n\n\nExploratory Spatial Data Analysis (ESDA) hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore.\n\n\n\nFirst of all, load needing packages.\n\n\nCode\npacman::p_load(sf, spdep, tmap, tidyverse, sfdep, Kendall)\n\n\n\n\nFor the purpose of this take-home exercise, Passenger Volume by Origin Destination Bus Stops downloaded from LTA DataMall will be used.\nImport the passenger volume by origin destination bus stops data.\n\n\nCode\nodbus = read_csv(\"./data/aspatial/origin_destination_bus_202308.csv\")  %&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n         DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE))\n\n\n\n\n\nTwo geospatial data will be used in this study, they are:\n\nBus Stop Location from LTA DataMall. It provides information about all the bus stops currently being serviced by buses, including the bus stop code (identifier) and location coordinates.\n\n\n\nCode\nbusstop = st_read(dsn = \"./data/geospatial/BusStopLocation_Jul2023\",\n                   layer = \"BusStop\")  %&gt;% st_transform(crs = 3414) %&gt;% \n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\n\nReading layer `BusStop' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex01/data/geospatial/BusStopLocation_Jul2023' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n\n\n\n\n\nImportant\n\n\n\nHere I found that there are several rows in ‘busstop’ data have duplicate BUS_STOP_N but slightly different geometry, so I used distinct to keep only one of those for doing intersection with hexagon.\n\n\n\nAlso import subzone geometry data as our background layer.\n\n\n\nCode\nsz = st_read(dsn = \"./data/geospatial\",\n                   layer = \"MPSZ-2019\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `MPSZ-2019' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nhexagon, a hexagon layer of 250m (this distance is the perpendicular distance between the centre of the hexagon and its edges.) should be used to replace the relative coarse and irregular Master Plan 2019 Planning Sub-zone GIS data set of URA.\n\n\n\nCode\nhexagon &lt;- st_sf(geometry = st_make_grid(busstop, cellsize = c(250,250), what = \"polygons\",square = FALSE)) %&gt;%\n  mutate(id = row_number()) %&gt;% \n  st_transform(crs = 3414) \n\n\nThen we need to join bus stop with hexagon, and join with subzone to exclude hexagons out of range.\n\n\nCode\nbus_hex &lt;- st_join(\n  st_join(hexagon,busstop%&gt;%select(BUS_STOP_N,geometry), join = st_nearest_feature),\n  sz) %&gt;%\n  drop_na() %&gt;%\n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\n\n\n\n\n\n\n\nImportant\n\n\n\nTo avoid same geometry for multiple bus stop, here I choose to use st_nearest_feature as join method instead of intersection.\n\n\nCheck for duplicate geometry.\n\n\nCode\nbus_hex %&gt;%\n  group_by(geometry)%&gt;%\n  filter(row_number()&gt;1)\n\n\nSimple feature collection with 0 features and 8 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 0 × 9\n# Groups:   geometry [0]\n# ℹ 9 variables: id &lt;int&gt;, BUS_STOP_N &lt;chr&gt;, SUBZONE_N &lt;chr&gt;, SUBZONE_C &lt;chr&gt;,\n#   PLN_AREA_N &lt;chr&gt;, PLN_AREA_C &lt;chr&gt;, REGION_N &lt;chr&gt;, REGION_C &lt;chr&gt;,\n#   geometry &lt;GEOMETRY [m]&gt;\n\n\n\n\n\n\nThe specific tasks of this take-home exercise are as follows:\n\n\n\nWith reference to the time intervals provided in the table below, compute the passenger trips generated by origin at the hexagon level,\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nDisplay the geographical distribution of the passenger trips by using appropriate geovisualisation methods,\nDescribe the spatial patterns revealed by the geovisualisation (not more than 200 words per visual).\n\n\n\nExtract peak data, and combine 4 time intervals data for further use.\n\n\nCode\npeak_trips &lt;- bind_rows(\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(interval = \"weekday_6_9\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 &\n           TIME_PER_HOUR &lt;= 20) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(interval = \"weekday_17_20\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 &\n           TIME_PER_HOUR &lt;= 14) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(interval = \"weekend_11_14\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n           TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(interval = \"weekend_16_19\"))\n\nglimpse(peak_trips)\n\n\nRows: 20,044\nColumns: 3\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 1973, 952, 1789, 2561, 2938, 1651, 161, 8492, 9015, 424…\n$ interval       &lt;chr&gt; \"weekday_6_9\", \"weekday_6_9\", \"weekday_6_9\", \"weekday_6…\n\n\n\n\n\nFirst combine passenger trip data with geospatial data.\n\n\nCode\norigin_trips &lt;- left_join(peak_trips, busstop,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(BUS_STOP_N = ORIGIN_PT_CODE) %&gt;%\n  group_by(BUS_STOP_N) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\n\nDuplication check before continue:\n\n\nCode\norigin_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: BUS_STOP_N &lt;chr&gt;, TRIPS &lt;dbl&gt;\n\n\n\n\n\n4.1.3.1 Firstly, let’s check out the distribution of peak time trips of 4 time intervals in total.\nBelow code chunk aims at wrangling the peak time trips data for visualization.\n\n\nCode\npeaktrip_hex &lt;- left_join(bus_hex %&gt;% select(id, BUS_STOP_N, geometry), \n                          origin_trips, by = join_by(BUS_STOP_N)) \n\n\nNow we can visualize the distribution of total bus trips.\n\n\nCode\ntmap_mode(\"plot\")\ntm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\ntm_shape(peaktrip_hex) +\n  tm_fill(\"TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\",\n          colorNA = NULL,\n          showNA = FALSE) +\n  tm_layout(main.title = \"Peak Time Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"4star\", size = 1.5) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\n4.1.3.2 Then, to display the geographical distribution of 4 time intervals separately for comparison:\nRegenerate trip data with the “interval” column to indicate different time intervals.\n\n\nCode\npeak_trips_interval &lt;- left_join(peak_trips, busstop,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(BUS_STOP_N = ORIGIN_PT_CODE) %&gt;%\n  group_by(BUS_STOP_N, interval) %&gt;%\n  summarise(TRIPS = sum(TRIPS)) %&gt;% \n  mutate(daily_trips = \n           ifelse(grepl(\"weekday\",interval), ceiling(TRIPS/22), ceiling(TRIPS/9)))\n\nglimpse(peak_trips_interval)\n\n\nRows: 20,044\nColumns: 4\nGroups: BUS_STOP_N [5,067]\n$ BUS_STOP_N  &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01013\", \"01013\", \"010…\n$ interval    &lt;chr&gt; \"weekday_17_20\", \"weekday_6_9\", \"weekend_11_14\", \"weekend_…\n$ TRIPS       &lt;dbl&gt; 8448, 1973, 2273, 3208, 7328, 952, 1697, 2796, 3608, 1789,…\n$ daily_trips &lt;dbl&gt; 384, 90, 253, 357, 334, 44, 189, 311, 164, 82, 168, 181, 4…\n\n\n\n\n\n\n\n\nImportant\n\n\n\nHere I create a column “daily_trips” to find number of trips per day, since it’s hard to compare the absolute number when we are differentiating weekday and weekend peak times intervals. For Aug 2023, there are 31 days in which 8 days are weekends and 1 day is National holiday.\n\n\nTo draw polygons, I will use pivot_wider to pivot interval into columns.\n\n\nCode\npeak_dailytrips_interval &lt;- peak_trips_interval %&gt;%\n  select(BUS_STOP_N,interval,daily_trips) %&gt;%\n  pivot_wider(names_from = interval, \n              values_from = daily_trips, \n              values_fill = NA)\n\nhead(peak_dailytrips_interval, 5)\n\n\n# A tibble: 5 × 5\n# Groups:   BUS_STOP_N [5]\n  BUS_STOP_N weekday_17_20 weekday_6_9 weekend_11_14 weekend_16_19\n  &lt;chr&gt;              &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n1 01012                384          90           253           357\n2 01013                334          44           189           311\n3 01019                164          82           168           181\n4 01029                424         117           364           472\n5 01039                589         134           603           823\n\n\nJoin back with hexagon before visualization.\n\n\nCode\ninterval_dailytrip_hex &lt;- left_join(bus_hex, peak_dailytrips_interval,\n                           by = join_by(BUS_STOP_N)) \n\n\nThen we can visualize daily trip distribution for each time intervals.\n\n\nCode\ntmap_mode(\"plot\")\ntm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\ntm_shape(interval_dailytrip_hex)+ \n  tm_polygons(c(\"weekday_6_9\",\"weekday_17_20\",\"weekend_11_14\",\"weekend_16_19\"),\n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"\",\n          colorNA = NULL,\n          showNA = FALSE) + \n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n    panel.show = TRUE,\n    panel.labels = c(\"Weekday 6-9am\", \"Weekday 5-8pm\", \"Weekend 11am-2pm\", \"Weekend 4-7pm\"))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nObservation:\n\nFrom the scale bar we can find that on daily bases, the number of bus trips at evening peak time intervals is larger than morning peak time intervals.\nThe locations with heavy number of trips are very similar during all peak time intervals.\n\n\n\n\n\n\n\n\nCompute LISA of the passengers trips generate by origin at hexagon level.\nDisplay the LISA maps of the passengers trips generate by origin at hexagon level. The maps should only display the significant (i.e. p-value &lt; 0.05)\nWith reference to the analysis results, draw statistical conclusions (not more than 200 words per visual).\n\n\n\nFirst we need to derive contiguity weights use knn method.\n\n\nCode\nweight_q &lt;-  peaktrip_hex%&gt;%\n  mutate(nb = st_knn(geometry,k=3),\n         wt = st_inverse_distance(nb, geometry),\n         .before = 1) %&gt;%\n  mutate(TRIPS = replace_na(TRIPS,0))\n\nweight_q\n\n\nSimple feature collection with 4044 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3720.122 ymin: 26337.76 xmax: 48220.12 ymax: 50225.63\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n           nb                                 wt  id BUS_STOP_N TRIPS\n1   2, 11, 20 0.04618802, 0.06099943, 0.06575959   1      25059   549\n2  11, 12, 14 0.11094004, 0.11094004, 0.08728716   6      25751   210\n3    5, 7, 18    0.2000000, 0.1333333, 0.1109400  73      26379   374\n4   7, 12, 14    0.4000000, 0.2000000, 0.2309401 195      25719  4555\n5    3, 8, 18    0.2000000, 0.1511858, 0.1511858 198      26369   403\n6   9, 10, 15    0.4000000, 0.1511858, 0.1333333 202      26279   722\n7   4, 14, 17    0.4000000, 0.2000000, 0.1511858 257      26389   780\n8   5, 15, 23    0.1511858, 0.2000000, 0.1109400 261      26299   499\n9   6, 10, 13    0.4000000, 0.2309401, 0.1511858 264      26261 15682\n10   6, 9, 13    0.1511858, 0.2309401, 0.4000000 265      26251  2419\n                         geometry\n1  POLYGON ((3845.122 26554.27...\n2  POLYGON ((3845.122 28719.33...\n3  POLYGON ((3970.122 30667.89...\n4  POLYGON ((4220.122 29801.86...\n5  POLYGON ((4220.122 31100.9,...\n6  POLYGON ((4220.122 32832.95...\n7  POLYGON ((4345.122 30018.37...\n8  POLYGON ((4345.122 31750.42...\n9  POLYGON ((4345.122 33049.46...\n10 POLYGON ((4345.122 33482.47...\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nTo treat those area with sparse location of bus stops (0 neighbor case), I used st_knn instead of st_contiguity, since our bus stops’ geometry are not necessarily adjacent to each other.\nHence since there are lagged value to zone without neighbors, I set allow_zero to True.\n\n\n\nBefore continue, we can perform a Global Moran’I permutation test.\n\n\nCode\nset.seed(1234)\nglobal_moran_perm(weight_q$TRIPS,\n                  weight_q$nb,\n                  weight_q$wt,\n                  adjust.n = TRUE,\n                  nsim = 99)\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.10933, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\n\n\n\n\n\nNote\n\n\n\nObservation:\nThe Moran’I statistic (0.10933) indicates a slightly positive spatial autocorrelation, suggesting that similar values tend to be clustered together in our map, so we can continue with LISA.\n\n\nThen we can compute LISA of passenger trips during peak time hours.\n\n\nCode\nlisa &lt;- weight_q %&gt;% \n  mutate(local_moran = local_moran(\n    TRIPS, nb, wt, nsim = 199),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nglimpse(lisa)\n\n\nRows: 4,044\nColumns: 18\n$ ii           &lt;dbl&gt; 0.01683533, 0.03658211, 0.05060816, 0.06595975, 0.0565997…\n$ eii          &lt;dbl&gt; 0.0023890846, 0.0011069140, -0.0020652686, -0.0074375318,…\n$ var_ii       &lt;dbl&gt; 0.0004110818, 0.0018452585, 0.0075471964, 0.0087109926, 0…\n$ z_ii         &lt;dbl&gt; 0.7125097, 0.8258406, 0.6063156, 0.7864048, 0.7386234, 0.…\n$ p_ii         &lt;dbl&gt; 0.4761492, 0.4088945, 0.5443052, 0.4316304, 0.4601357, 0.…\n$ p_ii_sim     &lt;dbl&gt; 0.21, 0.07, 0.13, 0.04, 0.09, 0.82, 0.28, 0.03, 0.11, 0.5…\n$ p_folded_sim &lt;dbl&gt; 0.105, 0.035, 0.065, 0.020, 0.045, 0.410, 0.140, 0.015, 0…\n$ skewness     &lt;dbl&gt; -3.920333, -4.000057, -6.940666, -4.857223, -4.134682, -5…\n$ kurtosis     &lt;dbl&gt; 22.623553, 22.981888, 63.967522, 32.243401, 22.447469, 49…\n$ mean         &lt;fct&gt; Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low…\n$ median       &lt;fct&gt; Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low…\n$ pysal        &lt;fct&gt; Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low…\n$ nb           &lt;nb&gt; &lt;2, 11, 20&gt;, &lt;11, 12, 14&gt;, &lt;5, 7, 18&gt;, &lt;7, 12, 14&gt;, &lt;3, 8,…\n$ wt           &lt;list&gt; &lt;0.04618802, 0.06099943, 0.06575959&gt;, &lt;0.11094004, 0.110…\n$ id           &lt;int&gt; 1, 6, 73, 195, 198, 202, 257, 261, 264, 265, 315, 318, 32…\n$ BUS_STOP_N   &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25719\", \"26369\", \"26279\", \"26…\n$ TRIPS        &lt;dbl&gt; 549, 210, 374, 4555, 403, 722, 780, 499, 15682, 2419, 241…\n$ geometry     &lt;POLYGON [m]&gt; POLYGON ((3845.122 26554.27..., POLYGON ((3845.12…\n\n\n\n\n\nFirst of all, let’s check out local Moran’s I and p-value.\n\n\nCode\ntmap_mode(\"plot\")\n\nmap1 &lt;- \n  tm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\n  tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Peak Time Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- \n  tm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\n  tm_shape(lisa) +\n  tm_fill(\"p_ii_sim\",\n          palette = \"-Reds\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nHere I reverse the color palette of p-value, to put more emphasize on significant spots (which with lower p-value).\n\n\nThen we can display only the significant (p-value &lt; 0.05) part on map.\n\n\nCode\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\ntm_shape(lisa) +\n  tm_polygons(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.8)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nObservation:\n\nHot spots mostly concentrate in those busy bus stops and cold spots mostly in border area.\nThe location of those hot/cold spots go along with the density of passenger trip numbers.\nThere’s seldom High-Low or Low-High spots which would be spatial outliers."
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html#setting-the-scene",
    "href": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html#setting-the-scene",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "As city-wide urban infrastructures such as buses, taxis, mass rapid transit, public utilities and roads become digital, the datasets obtained can be used as a framework for tracking movement patterns through space and time. This is particularly true with the recent trend of massive deployment of pervasive computing technologies such as GPS and RFID on the vehicles. For example, routes and ridership data were collected with the use of smart cards and Global Positioning System (GPS) devices available on the public buses. These massive movement data collected are likely to contain structure and patterns that provide useful information about characteristics of the measured phenomena. The identification, analysis and comparison of such patterns will provide greater insights on human movement and behaviours within a city. These understandings will potentially contribute to a better urban management and useful information for urban transport services providers both from the private and public sector to formulate informed decision to gain competitive advantage.\nIn real-world practices, the use of these massive locational aware data, however, tend to be confined to simple tracking and mapping with GIS applications. This is mainly due to a general lack of functions in conventional GIS which is capable of analysing and model spatial and spatio-temporal data effectively."
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html#objectives",
    "href": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html#objectives",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Exploratory Spatial Data Analysis (ESDA) hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA) to undercover the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore."
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html#the-data",
    "href": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html#the-data",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "First of all, load needing packages.\n\n\nCode\npacman::p_load(sf, spdep, tmap, tidyverse, sfdep, Kendall)\n\n\n\n\nFor the purpose of this take-home exercise, Passenger Volume by Origin Destination Bus Stops downloaded from LTA DataMall will be used.\nImport the passenger volume by origin destination bus stops data.\n\n\nCode\nodbus = read_csv(\"./data/aspatial/origin_destination_bus_202308.csv\")  %&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n         DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE))\n\n\n\n\n\nTwo geospatial data will be used in this study, they are:\n\nBus Stop Location from LTA DataMall. It provides information about all the bus stops currently being serviced by buses, including the bus stop code (identifier) and location coordinates.\n\n\n\nCode\nbusstop = st_read(dsn = \"./data/geospatial/BusStopLocation_Jul2023\",\n                   layer = \"BusStop\")  %&gt;% st_transform(crs = 3414) %&gt;% \n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\n\nReading layer `BusStop' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex01/data/geospatial/BusStopLocation_Jul2023' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n\n\n\n\n\nImportant\n\n\n\nHere I found that there are several rows in ‘busstop’ data have duplicate BUS_STOP_N but slightly different geometry, so I used distinct to keep only one of those for doing intersection with hexagon.\n\n\n\nAlso import subzone geometry data as our background layer.\n\n\n\nCode\nsz = st_read(dsn = \"./data/geospatial\",\n                   layer = \"MPSZ-2019\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `MPSZ-2019' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nhexagon, a hexagon layer of 250m (this distance is the perpendicular distance between the centre of the hexagon and its edges.) should be used to replace the relative coarse and irregular Master Plan 2019 Planning Sub-zone GIS data set of URA.\n\n\n\nCode\nhexagon &lt;- st_sf(geometry = st_make_grid(busstop, cellsize = c(250,250), what = \"polygons\",square = FALSE)) %&gt;%\n  mutate(id = row_number()) %&gt;% \n  st_transform(crs = 3414) \n\n\nThen we need to join bus stop with hexagon, and join with subzone to exclude hexagons out of range.\n\n\nCode\nbus_hex &lt;- st_join(\n  st_join(hexagon,busstop%&gt;%select(BUS_STOP_N,geometry), join = st_nearest_feature),\n  sz) %&gt;%\n  drop_na() %&gt;%\n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\n\n\n\n\n\n\n\nImportant\n\n\n\nTo avoid same geometry for multiple bus stop, here I choose to use st_nearest_feature as join method instead of intersection.\n\n\nCheck for duplicate geometry.\n\n\nCode\nbus_hex %&gt;%\n  group_by(geometry)%&gt;%\n  filter(row_number()&gt;1)\n\n\nSimple feature collection with 0 features and 8 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 0 × 9\n# Groups:   geometry [0]\n# ℹ 9 variables: id &lt;int&gt;, BUS_STOP_N &lt;chr&gt;, SUBZONE_N &lt;chr&gt;, SUBZONE_C &lt;chr&gt;,\n#   PLN_AREA_N &lt;chr&gt;, PLN_AREA_C &lt;chr&gt;, REGION_N &lt;chr&gt;, REGION_C &lt;chr&gt;,\n#   geometry &lt;GEOMETRY [m]&gt;"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html#the-task",
    "href": "Takehome_Ex/Takehome_Ex01/Takehome_Ex01.html#the-task",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\n\n\n\nWith reference to the time intervals provided in the table below, compute the passenger trips generated by origin at the hexagon level,\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nDisplay the geographical distribution of the passenger trips by using appropriate geovisualisation methods,\nDescribe the spatial patterns revealed by the geovisualisation (not more than 200 words per visual).\n\n\n\nExtract peak data, and combine 4 time intervals data for further use.\n\n\nCode\npeak_trips &lt;- bind_rows(\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(interval = \"weekday_6_9\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 &\n           TIME_PER_HOUR &lt;= 20) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(interval = \"weekday_17_20\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 &\n           TIME_PER_HOUR &lt;= 14) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(interval = \"weekend_11_14\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n           TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  mutate(interval = \"weekend_16_19\"))\n\nglimpse(peak_trips)\n\n\nRows: 20,044\nColumns: 3\n$ ORIGIN_PT_CODE &lt;fct&gt; 01012, 01013, 01019, 01029, 01039, 01059, 01109, 01112,…\n$ TRIPS          &lt;dbl&gt; 1973, 952, 1789, 2561, 2938, 1651, 161, 8492, 9015, 424…\n$ interval       &lt;chr&gt; \"weekday_6_9\", \"weekday_6_9\", \"weekday_6_9\", \"weekday_6…\n\n\n\n\n\nFirst combine passenger trip data with geospatial data.\n\n\nCode\norigin_trips &lt;- left_join(peak_trips, busstop,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(BUS_STOP_N = ORIGIN_PT_CODE) %&gt;%\n  group_by(BUS_STOP_N) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\n\nDuplication check before continue:\n\n\nCode\norigin_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\n# A tibble: 0 × 2\n# ℹ 2 variables: BUS_STOP_N &lt;chr&gt;, TRIPS &lt;dbl&gt;\n\n\n\n\n\n4.1.3.1 Firstly, let’s check out the distribution of peak time trips of 4 time intervals in total.\nBelow code chunk aims at wrangling the peak time trips data for visualization.\n\n\nCode\npeaktrip_hex &lt;- left_join(bus_hex %&gt;% select(id, BUS_STOP_N, geometry), \n                          origin_trips, by = join_by(BUS_STOP_N)) \n\n\nNow we can visualize the distribution of total bus trips.\n\n\nCode\ntmap_mode(\"plot\")\ntm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\ntm_shape(peaktrip_hex) +\n  tm_fill(\"TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\",\n          colorNA = NULL,\n          showNA = FALSE) +\n  tm_layout(main.title = \"Peak Time Passenger Trips\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"4star\", size = 1.5) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\n4.1.3.2 Then, to display the geographical distribution of 4 time intervals separately for comparison:\nRegenerate trip data with the “interval” column to indicate different time intervals.\n\n\nCode\npeak_trips_interval &lt;- left_join(peak_trips, busstop,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(BUS_STOP_N = ORIGIN_PT_CODE) %&gt;%\n  group_by(BUS_STOP_N, interval) %&gt;%\n  summarise(TRIPS = sum(TRIPS)) %&gt;% \n  mutate(daily_trips = \n           ifelse(grepl(\"weekday\",interval), ceiling(TRIPS/22), ceiling(TRIPS/9)))\n\nglimpse(peak_trips_interval)\n\n\nRows: 20,044\nColumns: 4\nGroups: BUS_STOP_N [5,067]\n$ BUS_STOP_N  &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01013\", \"01013\", \"010…\n$ interval    &lt;chr&gt; \"weekday_17_20\", \"weekday_6_9\", \"weekend_11_14\", \"weekend_…\n$ TRIPS       &lt;dbl&gt; 8448, 1973, 2273, 3208, 7328, 952, 1697, 2796, 3608, 1789,…\n$ daily_trips &lt;dbl&gt; 384, 90, 253, 357, 334, 44, 189, 311, 164, 82, 168, 181, 4…\n\n\n\n\n\n\n\n\nImportant\n\n\n\nHere I create a column “daily_trips” to find number of trips per day, since it’s hard to compare the absolute number when we are differentiating weekday and weekend peak times intervals. For Aug 2023, there are 31 days in which 8 days are weekends and 1 day is National holiday.\n\n\nTo draw polygons, I will use pivot_wider to pivot interval into columns.\n\n\nCode\npeak_dailytrips_interval &lt;- peak_trips_interval %&gt;%\n  select(BUS_STOP_N,interval,daily_trips) %&gt;%\n  pivot_wider(names_from = interval, \n              values_from = daily_trips, \n              values_fill = NA)\n\nhead(peak_dailytrips_interval, 5)\n\n\n# A tibble: 5 × 5\n# Groups:   BUS_STOP_N [5]\n  BUS_STOP_N weekday_17_20 weekday_6_9 weekend_11_14 weekend_16_19\n  &lt;chr&gt;              &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n1 01012                384          90           253           357\n2 01013                334          44           189           311\n3 01019                164          82           168           181\n4 01029                424         117           364           472\n5 01039                589         134           603           823\n\n\nJoin back with hexagon before visualization.\n\n\nCode\ninterval_dailytrip_hex &lt;- left_join(bus_hex, peak_dailytrips_interval,\n                           by = join_by(BUS_STOP_N)) \n\n\nThen we can visualize daily trip distribution for each time intervals.\n\n\nCode\ntmap_mode(\"plot\")\ntm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\ntm_shape(interval_dailytrip_hex)+ \n  tm_polygons(c(\"weekday_6_9\",\"weekday_17_20\",\"weekend_11_14\",\"weekend_16_19\"),\n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"\",\n          colorNA = NULL,\n          showNA = FALSE) + \n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n    panel.show = TRUE,\n    panel.labels = c(\"Weekday 6-9am\", \"Weekday 5-8pm\", \"Weekend 11am-2pm\", \"Weekend 4-7pm\"))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nObservation:\n\nFrom the scale bar we can find that on daily bases, the number of bus trips at evening peak time intervals is larger than morning peak time intervals.\nThe locations with heavy number of trips are very similar during all peak time intervals.\n\n\n\n\n\n\n\n\nCompute LISA of the passengers trips generate by origin at hexagon level.\nDisplay the LISA maps of the passengers trips generate by origin at hexagon level. The maps should only display the significant (i.e. p-value &lt; 0.05)\nWith reference to the analysis results, draw statistical conclusions (not more than 200 words per visual).\n\n\n\nFirst we need to derive contiguity weights use knn method.\n\n\nCode\nweight_q &lt;-  peaktrip_hex%&gt;%\n  mutate(nb = st_knn(geometry,k=3),\n         wt = st_inverse_distance(nb, geometry),\n         .before = 1) %&gt;%\n  mutate(TRIPS = replace_na(TRIPS,0))\n\nweight_q\n\n\nSimple feature collection with 4044 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3720.122 ymin: 26337.76 xmax: 48220.12 ymax: 50225.63\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n           nb                                 wt  id BUS_STOP_N TRIPS\n1   2, 11, 20 0.04618802, 0.06099943, 0.06575959   1      25059   549\n2  11, 12, 14 0.11094004, 0.11094004, 0.08728716   6      25751   210\n3    5, 7, 18    0.2000000, 0.1333333, 0.1109400  73      26379   374\n4   7, 12, 14    0.4000000, 0.2000000, 0.2309401 195      25719  4555\n5    3, 8, 18    0.2000000, 0.1511858, 0.1511858 198      26369   403\n6   9, 10, 15    0.4000000, 0.1511858, 0.1333333 202      26279   722\n7   4, 14, 17    0.4000000, 0.2000000, 0.1511858 257      26389   780\n8   5, 15, 23    0.1511858, 0.2000000, 0.1109400 261      26299   499\n9   6, 10, 13    0.4000000, 0.2309401, 0.1511858 264      26261 15682\n10   6, 9, 13    0.1511858, 0.2309401, 0.4000000 265      26251  2419\n                         geometry\n1  POLYGON ((3845.122 26554.27...\n2  POLYGON ((3845.122 28719.33...\n3  POLYGON ((3970.122 30667.89...\n4  POLYGON ((4220.122 29801.86...\n5  POLYGON ((4220.122 31100.9,...\n6  POLYGON ((4220.122 32832.95...\n7  POLYGON ((4345.122 30018.37...\n8  POLYGON ((4345.122 31750.42...\n9  POLYGON ((4345.122 33049.46...\n10 POLYGON ((4345.122 33482.47...\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nTo treat those area with sparse location of bus stops (0 neighbor case), I used st_knn instead of st_contiguity, since our bus stops’ geometry are not necessarily adjacent to each other.\nHence since there are lagged value to zone without neighbors, I set allow_zero to True.\n\n\n\nBefore continue, we can perform a Global Moran’I permutation test.\n\n\nCode\nset.seed(1234)\nglobal_moran_perm(weight_q$TRIPS,\n                  weight_q$nb,\n                  weight_q$wt,\n                  adjust.n = TRUE,\n                  nsim = 99)\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.10933, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\n\n\n\n\n\nNote\n\n\n\nObservation:\nThe Moran’I statistic (0.10933) indicates a slightly positive spatial autocorrelation, suggesting that similar values tend to be clustered together in our map, so we can continue with LISA.\n\n\nThen we can compute LISA of passenger trips during peak time hours.\n\n\nCode\nlisa &lt;- weight_q %&gt;% \n  mutate(local_moran = local_moran(\n    TRIPS, nb, wt, nsim = 199),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nglimpse(lisa)\n\n\nRows: 4,044\nColumns: 18\n$ ii           &lt;dbl&gt; 0.01683533, 0.03658211, 0.05060816, 0.06595975, 0.0565997…\n$ eii          &lt;dbl&gt; 0.0023890846, 0.0011069140, -0.0020652686, -0.0074375318,…\n$ var_ii       &lt;dbl&gt; 0.0004110818, 0.0018452585, 0.0075471964, 0.0087109926, 0…\n$ z_ii         &lt;dbl&gt; 0.7125097, 0.8258406, 0.6063156, 0.7864048, 0.7386234, 0.…\n$ p_ii         &lt;dbl&gt; 0.4761492, 0.4088945, 0.5443052, 0.4316304, 0.4601357, 0.…\n$ p_ii_sim     &lt;dbl&gt; 0.21, 0.07, 0.13, 0.04, 0.09, 0.82, 0.28, 0.03, 0.11, 0.5…\n$ p_folded_sim &lt;dbl&gt; 0.105, 0.035, 0.065, 0.020, 0.045, 0.410, 0.140, 0.015, 0…\n$ skewness     &lt;dbl&gt; -3.920333, -4.000057, -6.940666, -4.857223, -4.134682, -5…\n$ kurtosis     &lt;dbl&gt; 22.623553, 22.981888, 63.967522, 32.243401, 22.447469, 49…\n$ mean         &lt;fct&gt; Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low…\n$ median       &lt;fct&gt; Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low…\n$ pysal        &lt;fct&gt; Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low-Low, Low…\n$ nb           &lt;nb&gt; &lt;2, 11, 20&gt;, &lt;11, 12, 14&gt;, &lt;5, 7, 18&gt;, &lt;7, 12, 14&gt;, &lt;3, 8,…\n$ wt           &lt;list&gt; &lt;0.04618802, 0.06099943, 0.06575959&gt;, &lt;0.11094004, 0.110…\n$ id           &lt;int&gt; 1, 6, 73, 195, 198, 202, 257, 261, 264, 265, 315, 318, 32…\n$ BUS_STOP_N   &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25719\", \"26369\", \"26279\", \"26…\n$ TRIPS        &lt;dbl&gt; 549, 210, 374, 4555, 403, 722, 780, 499, 15682, 2419, 241…\n$ geometry     &lt;POLYGON [m]&gt; POLYGON ((3845.122 26554.27..., POLYGON ((3845.12…\n\n\n\n\n\nFirst of all, let’s check out local Moran’s I and p-value.\n\n\nCode\ntmap_mode(\"plot\")\n\nmap1 &lt;- \n  tm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\n  tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of Peak Time Trips\",\n            main.title.size = 0.8)\n\nmap2 &lt;- \n  tm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\n  tm_shape(lisa) +\n  tm_fill(\"p_ii_sim\",\n          palette = \"-Reds\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nHere I reverse the color palette of p-value, to put more emphasize on significant spots (which with lower p-value).\n\n\nThen we can display only the significant (p-value &lt; 0.05) part on map.\n\n\nCode\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\ntm_shape(lisa) +\n  tm_polygons(alpha = 0.1) +\n  tm_borders(alpha = 0.1) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.8)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nObservation:\n\nHot spots mostly concentrate in those busy bus stops and cold spots mostly in border area.\nThe location of those hot/cold spots go along with the density of passenger trip numbers.\nThere’s seldom High-Low or Low-High spots which would be spatial outliers."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "Data are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. In this hands-on exercise, you are required to extract the necessary data sets from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe purpose of this section is not merely extracting the necessary data sets. It also aims to introduce you to public available data sets. Students are encouraged to explore the rest of the available data sets in these three data sources.\n\n\n\n\n\nNext, at the Hands-on_Ex01 folder, create a sub-folder called data. Then, inside the data sub-folder, create two sub-folders and name them geospatial and aspatial respectively.\nPlace Master Plan 2014 Subzone Boundary (Web), Pre-Schools Location and Cycling Path zipped files into geospatial sub-folder and unzipped them. Copy the unzipped files from their respective sub-folders and place them inside geospatial sub-folder.\n\n\n\nNow, you will extract the downloaded listing data file. At Downloads folder, cut and paste listing.csv into aspatial sub-folder.\n\n\n\n\nIn this hands-on exercise, two R packages will be used. They are:\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nTidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\nType the following code chunk.\n\n\nCode\npacman::p_load(sf, tidyverse)\n\n\nThen, import the following geospatial data into R by using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe code chunk below uses st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: dsn to define the data path and layer to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.\n\n\nCode\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinates systems. The bounding box provides the x extend and y extend of the data.\n\n\n\nThe code chunk below uses st_read() function of sf package to import CyclingPath shapefile into R as line feature data frame.\n\n\nCode\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPath_Jul2023\", \n                         layer = \"CyclingPathGazette\")\n\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex01/data/geospatial/CyclingPath_Jul2023' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe message above reveals that there are a total of 2558 features and 2 fields in cyclingpath linestring feature data frame and it is in svy21 projected coordinates system too.\n\n\n\nThe pre-schools-location-kml is in kml format. The code chunk below will be used to import the kml into R. Notice that in the code chunk below, the complete path and the kml file extension were provided.\n\n\nCode\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe message above reveals that preschool is a point feature data frame. There are a total of 1359 features and 2 fields. Different from the previous two simple feature data frame, preschool is in wgs84 coordinates system.\n\n\n\n\n\n\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\n\nCode\nst_geometry(mpsz)\n\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\n\n\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find glimpse() of dplyr. very handy as shown in the code chunk below.\n\n\nCode\nglimpse(mpsz)\n\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n\nSometimes we would like to reveal complete information of a feature object, this is the job of head() of Base R\n\n\nCode\nhead(mpsz, n=5)\n\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\n\n\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.\n\n\nCode\nplot(mpsz)\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\n\nCode\nplot(st_geometry(mpsz))\n\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\n\nCode\nplot(mpsz[\"PLN_AREA_N\"])           \n\n\n\n\n\n\n\n\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\n\n\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\n\nCode\nst_crs(mpsz)       \n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\n\nCode\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\n\nNow, let us check the CSR again by using the code chunk below.\n\n\nCode\nst_crs(mpsz3414)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\nThis is a scenario that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.\nLet us perform the projection transformation by using the code chunk below.\n\n\nCode\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\n\nNext, let us display the content of preschool3414 sf data frame as shown below.\nNotice that it is in svy21 projected coordinate system now. Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.\n\n\n\n\nIn practice, it is not unusual that we will come across data such as listing of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\nIn this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.\nFor the purpose of this exercise, the listings.csv data downloaded from AirBnb will be used.\n\n\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\n\nCode\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() of Base R instead of glimpse() is used to do the job.\n\n\nCode\nlist(listings) \n\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output reveals that listing tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\n\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages\n\n\nCode\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%&gt;% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nLet us examine the content of this newly created simple feature data frame.\n\n\nCode\nglimpse(listings_sf)\n\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame.\n\n\n\n\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, you will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\n\nCode\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\n\nCode\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nLastly, sum() of Base R will be used to derive the total land involved\n\n\nCode\nsum(buffer_cycling$AREA)\n\n\n1774367 [m^2]\n\n\n\n\n\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\n\nCode\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\n\n\n\n\n\n\nWarning\n\n\n\nYou should not confuse with st_intersection().\n\n\nYou can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\n\nCode\nsummary(mpsz3414$`PreSch Count`)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\n\n\nCode\ntop_n(mpsz3414, 1, `PreSch Count`)\n\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nThe solution:\nFirstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\n\nCode\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below.\n\n\nCode\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n\n\n\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.\nFirstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.\n\n\nCode\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate ggplot2 functions will be used.\n\n\nCode\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\nUsing ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\n\nCode\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#data-acquisition",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#data-acquisition",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "Data are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. In this hands-on exercise, you are required to extract the necessary data sets from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe purpose of this section is not merely extracting the necessary data sets. It also aims to introduce you to public available data sets. Students are encouraged to explore the rest of the available data sets in these three data sources.\n\n\n\n\n\nNext, at the Hands-on_Ex01 folder, create a sub-folder called data. Then, inside the data sub-folder, create two sub-folders and name them geospatial and aspatial respectively.\nPlace Master Plan 2014 Subzone Boundary (Web), Pre-Schools Location and Cycling Path zipped files into geospatial sub-folder and unzipped them. Copy the unzipped files from their respective sub-folders and place them inside geospatial sub-folder.\n\n\n\nNow, you will extract the downloaded listing data file. At Downloads folder, cut and paste listing.csv into aspatial sub-folder."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#importing-the-data",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#importing-the-data",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nTidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\nType the following code chunk.\n\n\nCode\npacman::p_load(sf, tidyverse)\n\n\nThen, import the following geospatial data into R by using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe code chunk below uses st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: dsn to define the data path and layer to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.\n\n\nCode\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinates systems. The bounding box provides the x extend and y extend of the data.\n\n\n\nThe code chunk below uses st_read() function of sf package to import CyclingPath shapefile into R as line feature data frame.\n\n\nCode\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPath_Jul2023\", \n                         layer = \"CyclingPathGazette\")\n\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex01/data/geospatial/CyclingPath_Jul2023' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe message above reveals that there are a total of 2558 features and 2 fields in cyclingpath linestring feature data frame and it is in svy21 projected coordinates system too.\n\n\n\nThe pre-schools-location-kml is in kml format. The code chunk below will be used to import the kml into R. Notice that in the code chunk below, the complete path and the kml file extension were provided.\n\n\nCode\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe message above reveals that preschool is a point feature data frame. There are a total of 1359 features and 2 fields. Different from the previous two simple feature data frame, preschool is in wgs84 coordinates system."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "The column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\n\nCode\nst_geometry(mpsz)\n\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\n\n\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find glimpse() of dplyr. very handy as shown in the code chunk below.\n\n\nCode\nglimpse(mpsz)\n\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n\nSometimes we would like to reveal complete information of a feature object, this is the job of head() of Base R\n\n\nCode\nhead(mpsz, n=5)\n\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#plotting-the-geospatial-data",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#plotting-the-geospatial-data",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.\n\n\nCode\nplot(mpsz)\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\n\nCode\nplot(st_geometry(mpsz))\n\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\n\nCode\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#working-with-projection",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#working-with-projection",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\n\n\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\n\nCode\nst_crs(mpsz)       \n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\n\nCode\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\n\nNow, let us check the CSR again by using the code chunk below.\n\n\nCode\nst_crs(mpsz3414)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\nThis is a scenario that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.\nLet us perform the projection transformation by using the code chunk below.\n\n\nCode\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\n\nNext, let us display the content of preschool3414 sf data frame as shown below.\nNotice that it is in svy21 projected coordinate system now. Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#importing-and-converting-an-aspatial-data",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#importing-and-converting-an-aspatial-data",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "In practice, it is not unusual that we will come across data such as listing of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\nIn this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.\nFor the purpose of this exercise, the listings.csv data downloaded from AirBnb will be used.\n\n\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\n\nCode\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() of Base R instead of glimpse() is used to do the job.\n\n\nCode\nlist(listings) \n\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output reveals that listing tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\n\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages\n\n\nCode\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%&gt;% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nLet us examine the content of this newly created simple feature data frame.\n\n\nCode\nglimpse(listings_sf)\n\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#geoprocessing-with-sf-package",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#geoprocessing-with-sf-package",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, you will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\n\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\n\nCode\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\n\nCode\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nLastly, sum() of Base R will be used to derive the total land involved\n\n\nCode\nsum(buffer_cycling$AREA)\n\n\n1774367 [m^2]\n\n\n\n\n\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\n\nCode\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\n\n\n\n\n\n\nWarning\n\n\n\nYou should not confuse with st_intersection().\n\n\nYou can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\n\nCode\nsummary(mpsz3414$`PreSch Count`)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\n\n\nCode\ntop_n(mpsz3414, 1, `PreSch Count`)\n\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nThe solution:\nFirstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\n\nCode\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below.\n\n\nCode\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#exploratory-data-analysis-eda",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#exploratory-data-analysis-eda",
    "title": "Hands on Exercise 1",
    "section": "",
    "text": "In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.\nFirstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.\n\n\nCode\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate ggplot2 functions will be used.\n\n\nCode\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\nUsing ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\n\nCode\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#importing-data-into-r",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#importing-data-into-r",
    "title": "Hands on Exercise 1",
    "section": "1 Importing Data into R",
    "text": "1 Importing Data into R\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\n\nCode\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n1.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n1.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\n\nCode\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\n\nCode\nmpsz\n\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n1.3 Importing Attribute Data into R\nNext, we will import respopagsextod2011to2022.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\n\nCode\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\n1.4 Data Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n1.4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\n\nCode\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\n1.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\nCode\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\n\nCode\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\nCode\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands on Exercise 1",
    "section": "2 Choropleth Mapping Geospatial Data Using tmap",
    "text": "2 Choropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n2.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\n\nCode\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n2.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n2.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\n\nCode\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n2.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n2.2.3 Drawing a choropleth map using tm_fill() and *tm_border()**\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n2.3 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n2.3.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"DEPENDENCY\",\"DEPENDENCY\"),\n          style = c(\"kmeans\",\"sd\"), \n          n = 5) +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"DEPENDENCY\",\"DEPENDENCY\"),\n          style = \"kmeans\", \n          n = c(2,10),\n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n2.3.2 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\n\nCode\nsummary(mpsz_pop2020$DEPENDENCY)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n2.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n2.4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nTo reverse the colour shading, add a “-” prefix.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n2.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n1.2.5.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n2.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n2.5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\n\nCode\ntmap_style(\"white\")\n\n\n\n\n\n2.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n2.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill().\n\n\nCode\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\n\nCode\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n2.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\n\nCode\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n2.6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\n\nCode\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n2.7 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\n\nCode\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#reference",
    "href": "Handson_Ex/Handson_Ex01/Handson_Ex01.html#reference",
    "title": "Hands on Exercise 1",
    "section": "3 Reference",
    "text": "3 Reference\n\n3.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n3.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n3.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex04/data/geospatial/MPSZ-2019.html",
    "href": "Handson_Ex/Handson_Ex04/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex03/Handson_Ex03.html",
    "href": "Handson_Ex/Handson_Ex03/Handson_Ex03.html",
    "title": "Hands on Excercise 3",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, you will learn how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex03/Handson_Ex03.html#overview",
    "href": "Handson_Ex/Handson_Ex03/Handson_Ex03.html#overview",
    "title": "Hands on Excercise 3",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.\nIn this hands-on exercise, you will learn how to build an OD matrix by using Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall. By the end of this hands-on exercise, you will be able:\n\nto import and extract OD data for a selected time interval,\nto import and save geospatial data (i.e. bus stops and mpsz) into sf tibble data frame objects,\nto populate planning subzone code into bus stops sf tibble data frame,\nto construct desire lines geospatial data from the OD data, and\nto visualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex03/Handson_Ex03.html#preparing-flow-data",
    "href": "Handson_Ex/Handson_Ex03/Handson_Ex03.html#preparing-flow-data",
    "title": "Hands on Excercise 3",
    "section": "2 Preparing Flow Data",
    "text": "2 Preparing Flow Data\n\n2.1 Get ready\n\n\nCode\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)\n\n\n\n\n2.2 Importing the OD Data\nImport the passenger volume by origin destination bus stops data.\n\n\nCode\nodbus &lt;- read_csv(\"./data/aspatial/origin_destination_bus_202310.csv\") %&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n         DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE))\n\n\nCheck the data.\n\n\nCode\nglimpse(odbus)\n\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\n\n\n2.3 Extracting Data\nFor the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o’clock.\n\n\nCode\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\nSave the output in rds format\n\n\nCode\nwrite_rds(odbus6_9, \"./data/rds/odbus6_9.rds\")\n\n\nCan extract data from saved file again.\n\n\nCode\n# read from saved file.\n# odbus6_9 &lt;- read_rds(\"chap15/data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex03/Handson_Ex03.html#working-with-geospatial-data",
    "href": "Handson_Ex/Handson_Ex03/Handson_Ex03.html#working-with-geospatial-data",
    "title": "Hands on Excercise 3",
    "section": "3 Working with GeoSpatial Data",
    "text": "3 Working with GeoSpatial Data\n\n3.1 Importing Data\nUse sf package to read master plan subzone data and bus stop location data.\n\n\nCode\nmpsz &lt;- st_read(dsn = \"./data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;% st_transform(crs = 3414)\n\n\nReading layer `MPSZ-2019' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\nCode\nbusstop &lt;- st_read(dsn = \"./data/geospatial\",\n                   layer = \"BusStop\")  %&gt;% st_transform(crs = 3414)\n\n\nReading layer `BusStop' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n\n\n\n\n\nTip\n\n\n\nHere we use “st_transform(crs = 3414)” to change the coordinate from decimal degree to meters.\n\n\n\n\n3.2 Wrangling Data\nCombine the bus stop location with the Singapore subzone map.\n\n\nCode\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nfive bus stops are excluded in the resultant data frame because they are outside of Singapore boundary.\n\n\n\nCode\nglimpse(busstop_mpsz)\n\n\nRows: 5,156\nColumns: 2\n$ BUS_STOP_N &lt;chr&gt; \"13099\", \"13089\", \"06151\", \"13211\", \"13139\", \"13109\", \"1311…\n$ SUBZONE_C  &lt;chr&gt; \"RVSZ05\", \"RVSZ05\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\",…\n\n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame.\n\n\nCode\nod_data &lt;- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\n\nCode\nod_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\n# A tibble: 1,186 × 4\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ\n   &lt;chr&gt;     &lt;fct&gt;     &lt;dbl&gt; &lt;chr&gt;    \n 1 11009     01341         1 QTSZ01   \n 2 11009     01341         1 QTSZ01   \n 3 11009     01411         4 QTSZ01   \n 4 11009     01411         4 QTSZ01   \n 5 11009     01421        17 QTSZ01   \n 6 11009     01421        17 QTSZ01   \n 7 11009     01511        19 QTSZ01   \n 8 11009     01511        19 QTSZ01   \n 9 11009     01521         2 QTSZ01   \n10 11009     01521         2 QTSZ01   \n# ℹ 1,176 more rows\n\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\n\nCode\nod_data &lt;- unique(od_data)\n\n\nNext, we will update od_data data frame cwith the planning subzone codes.\n\n\nCode\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\n\n\n\nCode\nod_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\n# A tibble: 1,350 × 5\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ SUBZONE_C\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;    \n 1 01013     51071         2 RCSZ10    CCSZ01   \n 2 01013     51071         2 RCSZ10    CCSZ01   \n 3 01112     51071        66 RCSZ10    CCSZ01   \n 4 01112     51071        66 RCSZ10    CCSZ01   \n 5 01112     53041         4 RCSZ10    BSSZ01   \n 6 01112     53041         4 RCSZ10    BSSZ01   \n 7 01121     51071         8 RCSZ04    CCSZ01   \n 8 01121     51071         8 RCSZ04    CCSZ01   \n 9 01121     82221         1 RCSZ04    GLSZ05   \n10 01121     82221         1 RCSZ04    GLSZ05   \n# ℹ 1,340 more rows\n\n\n\n\nCode\nod_data &lt;- unique(od_data)\n\n\n\n\nCode\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\n\nIt is time to save the output into an rds file format.\n\n\nCode\nwrite_rds(od_data, \"./data/rds/od_data.rds\")\n\n\n\n\nCode\nod_data &lt;- read_rds(\"./data/rds/od_data.rds\")\n\n\n\n\n3.3 Visualising Spatial Interaction\nIn this section, you will learn how to prepare a desire line by using stplanr package.\n\n3.3.1 Removing intra-zonal flows\nWe will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows.\n\n\nCode\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\n\n\n\n\n3.3.2 Creating desire lines\nIn this code chunk below, od2line() of stplanr package is used to create the desire lines.\n\n\nCode\nflowLine &lt;- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\n\n\n\n3.3.3 Visualising the desire lines\nTo visualise the resulting desire lines, the code chunk below is used.\n\n\nCode\ntm_shape(mpsz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.5)\n\n\n\n\n\nWhen the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.\n\n\nCode\ntm_shape(mpsz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.5)"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex02/Inclass_Ex02.html",
    "href": "Inclass_Ex/Inclass_Ex02/Inclass_Ex02.html",
    "title": "In Class Exercise 2",
    "section": "",
    "text": "In this exercise, a new sfdep package will be sused.\n\nThe Basics of sfdep\nSpacetime and Spacetime cubes\nEmerging Hot Spot Analysis\nConditional Permutations with sfdep\n\n\n\nCode\npacman::p_load(tmap, sf, sfdep, tidyverse, knitr, plotly)\n\n\n\n\n\nImport the Hunan GDPPC data.\n\n\nCode\nhunan_2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\nUse sf package to read geospatial data.\n\n\nCode\nhunan = st_read(dsn = \"data/geospatial\",\n                   layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Inclass_Ex/Inclass_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\nCode\nhunan_data = left_join(hunan, hunan_2012, by = join_by(County)) %&gt;%\n  select(1:4, 7, 15)\n\n\n\nSince both tables got 88 observations, in order to ensure retaining all geospatial properties, left join to geo file.\nHere the ‘County’ column is the common column in both table, actually no need to explicitly identify the join_by, but here I would like to leave it there for clarification.\n\n\n\n\n\nCode\nwm_q &lt;- hunan_data %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = 'W'),  \n         .before = 1)  # to put the weight column at the most left."
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex02/Inclass_Ex02.html#data-preparation",
    "href": "Inclass_Ex/Inclass_Ex02/Inclass_Ex02.html#data-preparation",
    "title": "In Class Exercise 2",
    "section": "",
    "text": "In this exercise, a new sfdep package will be sused.\n\nThe Basics of sfdep\nSpacetime and Spacetime cubes\nEmerging Hot Spot Analysis\nConditional Permutations with sfdep\n\n\n\nCode\npacman::p_load(tmap, sf, sfdep, tidyverse, knitr, plotly)\n\n\n\n\n\nImport the Hunan GDPPC data.\n\n\nCode\nhunan_2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\nUse sf package to read geospatial data.\n\n\nCode\nhunan = st_read(dsn = \"data/geospatial\",\n                   layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Inclass_Ex/Inclass_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\nCode\nhunan_data = left_join(hunan, hunan_2012, by = join_by(County)) %&gt;%\n  select(1:4, 7, 15)\n\n\n\nSince both tables got 88 observations, in order to ensure retaining all geospatial properties, left join to geo file.\nHere the ‘County’ column is the common column in both table, actually no need to explicitly identify the join_by, but here I would like to leave it there for clarification.\n\n\n\n\n\nCode\nwm_q &lt;- hunan_data %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = 'W'),  \n         .before = 1)  # to put the weight column at the most left."
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex02/Inclass_Ex02.html#computing-local-morons-i",
    "href": "Inclass_Ex/Inclass_Ex02/Inclass_Ex02.html#computing-local-morons-i",
    "title": "In Class Exercise 2",
    "section": "2 Computing local Moron’s I",
    "text": "2 Computing local Moron’s I\n\n\nCode\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex02/Inclass_Ex02.html#time-series-analysis",
    "href": "Inclass_Ex/Inclass_Ex02/Inclass_Ex02.html#time-series-analysis",
    "title": "In Class Exercise 2",
    "section": "3 Time series analysis",
    "text": "3 Time series analysis\n\n\nCode\nGDPPC = read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\n\n3.1 Data Wranggling\n\n3.1.1 Creating a time series cube\n\n\nCode\nGDPPC_st &lt;- spacetime(GDPPC, hunan, \n                      .loc_col = \"County\", .time_col = \"Year\")\n\n\nVerifying space-time cube object.\n\n\nCode\nis_spacetime_cube(GDPPC_st)\n\n\n[1] TRUE\n\n\n\n\nCode\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\n\n\n\n3.2 Computing Gi*\n\n\nCode\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(GDPPC, nb, wt)) %&gt;%\n  unnest(gi_star)"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html",
    "href": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "Code\npacman::p_load(tmap, sf, DT, sp, reshape2,\n               ggpubr, units, tidyverse)\n\n\n\n\n\nThis exercise is a continuation of Chapter 15: Processing and Visualising Flow Data and the following data will be used:\n\nod_data.rds, weekday morning peak passenger flows at planning subzone level.\nmpsz.rds, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBeside these two data sets, an additional attribute data file called pop.csv will be provided.\nImport the population data.\n\n\nCode\npop &lt;- read_csv(\"./data/aspatial/pop.csv\")\n\n\nCheck the population data per age range.\n\n\nCode\nglimpse(pop)\n\n\nRows: 332\nColumns: 5\n$ PA       &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG …\n$ SZ       &lt;chr&gt; \"ANG MO KIO TOWN CENTRE\", \"CHENG SAN\", \"CHONG BOON\", \"KEBUN B…\n$ AGE7_12  &lt;dbl&gt; 310, 1140, 1010, 1050, 420, 810, 390, 980, 0, 260, 0, 1190, 6…\n$ AGE13_24 &lt;dbl&gt; 710, 2770, 2650, 2390, 1120, 1920, 1150, 2000, 0, 650, 0, 326…\n$ AGE25_64 &lt;dbl&gt; 2780, 15700, 14240, 12460, 3620, 9650, 4350, 11320, 0, 2500, …"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#preparing-flow-data",
    "href": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#preparing-flow-data",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "Code\npacman::p_load(tmap, sf, DT, sp, reshape2,\n               ggpubr, units, tidyverse)\n\n\n\n\n\nThis exercise is a continuation of Chapter 15: Processing and Visualising Flow Data and the following data will be used:\n\nod_data.rds, weekday morning peak passenger flows at planning subzone level.\nmpsz.rds, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBeside these two data sets, an additional attribute data file called pop.csv will be provided.\nImport the population data.\n\n\nCode\npop &lt;- read_csv(\"./data/aspatial/pop.csv\")\n\n\nCheck the population data per age range.\n\n\nCode\nglimpse(pop)\n\n\nRows: 332\nColumns: 5\n$ PA       &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG …\n$ SZ       &lt;chr&gt; \"ANG MO KIO TOWN CENTRE\", \"CHENG SAN\", \"CHONG BOON\", \"KEBUN B…\n$ AGE7_12  &lt;dbl&gt; 310, 1140, 1010, 1050, 420, 810, 390, 980, 0, 260, 0, 1190, 6…\n$ AGE13_24 &lt;dbl&gt; 710, 2770, 2650, 2390, 1120, 1920, 1150, 2000, 0, 650, 0, 326…\n$ AGE25_64 &lt;dbl&gt; 2780, 15700, 14240, 12460, 3620, 9650, 4350, 11320, 0, 2500, …"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#computing-distance-matrix",
    "href": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#computing-distance-matrix",
    "title": "In Class Exercise 3",
    "section": "2 Computing Distance Matrix",
    "text": "2 Computing Distance Matrix\n\n2.1 Importing Data\nUse sf package to read master plan subzone data and bus stop location data.\n\n\nCode\nmpsz &lt;- st_read(dsn = \"./data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;% st_transform(crs = 3414)\n\n\nReading layer `MPSZ-2019' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Inclass_Ex/Inclass_Ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\n2.2 Converting from sf data.table to SpatialPolygonsDataFrame\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\nFirst as.Spatial() will be used to convert mpsz from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\n\nCode\nmpsz_sp &lt;- as(mpsz, \"Spatial\")\nmpsz_sp\n\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\n\n\n2.3 Computing the distance matrix\nNext, spDists() of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\n\nCode\ndist &lt;- spDists(mpsz_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\n\n\n2.4 Labelling column and row heanders of a distance matrix\nFirst, we will create a list sorted according to the the distance matrix by planning sub-zone code.\n\n\nCode\nsz_names &lt;- mpsz$SUBZONE_C\n\n\nNext we will attach SUBZONE_C to row and column for distance matrix matching ahead\n\n\nCode\ncolnames(dist) &lt;- paste0(sz_names)\nrownames(dist) &lt;- paste0(sz_names)\n\n\n\n\n2.5 Pivoting distance value by SUBZONE_C\nNext, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\n\nCode\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\n\nNotice that the within zone distance is 0.\n\n\n\n2.6 Updating intra-zonal distances\nIn this section, we are going to append a constant value to replace the intra-zonal distance of 0.\nFirst, we will select and find out the minimum value of the distance by using summary().\n\n\nCode\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nNext, a constant distance value of 50m is added into intra-zones distance.\n\n\nCode\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\n\nThe code chunk below will be used to check the result data.frame.\n\n\nCode\nsummary(distPair)\n\n\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nThe code chunk below is used to rename the origin and destination fields.\n\n\nCode\ndistPair &lt;- distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\n\nThe code chunk below is used to rename the origin and destination fields.\n\n\nCode\nwrite_rds(distPair, \"./data/rds/distPair.rds\")"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#preparing-flow-data-1",
    "href": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#preparing-flow-data-1",
    "title": "In Class Exercise 3",
    "section": "3. Preparing flow data",
    "text": "3. Preparing flow data\nIimport od_data save in hands on exercise 3 into R environment.\n\n\nCode\nod_data &lt;- read_rds(\"./data/rds/od_data.rds\")\n\n\nNext, we will compute the total passenger trip between and within planning subzones by using the code chunk below. The output is all flow_data.\n\n\nCode\nflow_data &lt;- od_data %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;% \n  summarize(TRIPS = sum(MORNING_PEAK)) \n\nhead(flow_data, 10)\n\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_SZ [1]\n   ORIGIN_SZ DESTIN_SZ TRIPS\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 AMSZ01    AMSZ01     2694\n 2 AMSZ01    AMSZ02    10591\n 3 AMSZ01    AMSZ03    14980\n 4 AMSZ01    AMSZ04     3106\n 5 AMSZ01    AMSZ05     7734\n 6 AMSZ01    AMSZ06     2306\n 7 AMSZ01    AMSZ07     1824\n 8 AMSZ01    AMSZ08     2734\n 9 AMSZ01    AMSZ09     2300\n10 AMSZ01    AMSZ10      164\n\n\n\n3.1 Separating intra-flow from passenger volume df\nCode chunk below is used to add three new fields in flow_data dataframe.\n\n\nCode\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\n\n\n\n3.2 Combining passenger volume data with distance value\nBefore we can join flow_data and distPair, we need to convert data value type of ORIGIN_SZ and DESTIN_SZ fields of flow_data dataframe into factor data type.\n\n\nCode\nflow_data$ORIGIN_SZ &lt;- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ &lt;- as.factor(flow_data$DESTIN_SZ)\n\n\nNow, left_join() of dplyr will be used to flow_data dataframe and distPair dataframe. The output is called flow_data1.\n\n\nCode\nflow_data1 &lt;- flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#preparing-origin-and-destination-attributes",
    "href": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#preparing-origin-and-destination-attributes",
    "title": "In Class Exercise 3",
    "section": "4. Preparing Origin and Destination Attributes",
    "text": "4. Preparing Origin and Destination Attributes\n\n4.1 Geospatial data wrangling\n\n\nCode\npop &lt;- pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\n\n\n\n4.2 Preparing origin attribute\n\n\nCode\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\n\n\n4.3 Preparing destination attribute\n\n\nCode\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\nWe will called the output data file SIM_data. it is in rds data file format.\n\n\nCode\nwrite_rds(flow_data1, \"./data/rds/SIM_data.rds\")"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#calibrating-spatial-interaction-models",
    "href": "Inclass_Ex/Inclass_Ex03/Inclass_Ex03.html#calibrating-spatial-interaction-models",
    "title": "In Class Exercise 3",
    "section": "5. Calibrating Spatial Interaction Models",
    "text": "5. Calibrating Spatial Interaction Models\nIn this section, you will learn how to calibrate Spatial Interaction Models by using Poisson Regression method.\n\n5.1 Visualising the dependent variable\n\n\nCode\nSIM_data &lt;- read_rds(\"./data/rds/SIM_data.rds\")\n\n\nFirstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.\n\n\nCode\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram() +\n  theme_light()\n\n\n\n\n\n\nNotice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.\n\nNext, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\n\nCode\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  theme_light()\n\n\n\n\n\n\nNotice that their relationship hardly resemble linear relationship.\n\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.\n\n\nCode\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  theme_light()"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex01/data/geospatial/MPSZ-2019.html",
    "href": "Inclass_Ex/Inclass_Ex01/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex01/Inclass_Ex01.html",
    "href": "Inclass_Ex/Inclass_Ex01/Inclass_Ex01.html",
    "title": "In Class Exercise 1",
    "section": "",
    "text": "SSS624 Applied Geospatial Analytics will be conducted using case study approach. This run the use case is Urban Mobility analysis by using passenger volume by origin-destination bus stops. To get ready for the excercise, you are required to do the following as soon as possible:\n\nApply an API access from LTA by visiting LTA DataMall,\nComplete the API Access formand submit.  Please note that it will take at least one working day to reply you.\nNext, return to Dynamic Datasets page and click on API Documentation. The pdf document appears.  Click on 2.6 and read the content carefully.\nOnce you received the API access code, read Section 1 of API Document and follow the instruction provided to download the data sets. You are required to download last three months data (August, September and October)."
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex01/Inclass_Ex01.html#data-acquisition",
    "href": "Inclass_Ex/Inclass_Ex01/Inclass_Ex01.html#data-acquisition",
    "title": "In Class Exercise 1",
    "section": "",
    "text": "SSS624 Applied Geospatial Analytics will be conducted using case study approach. This run the use case is Urban Mobility analysis by using passenger volume by origin-destination bus stops. To get ready for the excercise, you are required to do the following as soon as possible:\n\nApply an API access from LTA by visiting LTA DataMall,\nComplete the API Access formand submit.  Please note that it will take at least one working day to reply you.\nNext, return to Dynamic Datasets page and click on API Documentation. The pdf document appears.  Click on 2.6 and read the content carefully.\nOnce you received the API access code, read Section 1 of API Document and follow the instruction provided to download the data sets. You are required to download last three months data (August, September and October)."
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex01/Inclass_Ex01.html#data-preparation",
    "href": "Inclass_Ex/Inclass_Ex01/Inclass_Ex01.html#data-preparation",
    "title": "In Class Exercise 1",
    "section": "2 Data Preparation",
    "text": "2 Data Preparation\n\n2.1 Get ready\n\n\nCode\npacman::p_load(tmap, sf, tidyverse, knitr, h3jsr)\n\n\n\n\n2.2 Importing the OD Data\nImport the passenger volume by origin destination bus stops data.\n\n\nCode\nodbus &lt;- read_csv(\"./data/aspatial/origin_destination_bus_202308.csv\") %&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n         DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE))\n\n\nCheck the data.\n\n\nCode\nglimpse(odbus)\n\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\n\n\n2.3 Extracting Data\nExtract passenger volume data between 7-9 o’clock during weekdays.\n\n\nCode\norigin7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\nSave the output in rds format\n\n\nCode\nwrite_rds(origin7_9, \"./data/rds/origin7_9.rds\")\n\n\nCan extract data from saved file again.\n\n\nCode\n# read from saved file.\n# origin7_9 &lt;- read_rds(\"./data/rds/origin7_9.rds\")"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex01/Inclass_Ex01.html#working-with-geospatial-data",
    "href": "Inclass_Ex/Inclass_Ex01/Inclass_Ex01.html#working-with-geospatial-data",
    "title": "In Class Exercise 1",
    "section": "3 Working with GeoSpatial Data",
    "text": "3 Working with GeoSpatial Data\n\n3.1 Importing Data\nUse sf package to read master plan subzone data and bus stop location data.\n\n\nCode\nmpsz &lt;- st_read(dsn = \"./data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;% st_transform(crs = 3414)\n\n\nReading layer `MPSZ-2019' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Inclass_Ex/Inclass_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\nCode\nbusstop &lt;- st_read(dsn = \"./data/geospatial\",\n                   layer = \"BusStop\")  %&gt;% st_transform(crs = 3414)\n\n\nReading layer `BusStop' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Inclass_Ex/Inclass_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n\n\n\n\n\nTip\n\n\n\nHere we use “st_transform(crs = 3414)” to change the coordinate from decimal degree to meters.\n\n\n\n\n3.2 Wrangling Data\nCombine the bus stop location with the Singapore subzone map.\n\n\nCode\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nfive bus stops are excluded in the resultant data frame because they are outside of Singapore boundary.\n\n\n\nCode\nglimpse(busstop_mpsz)\n\n\nRows: 5,156\nColumns: 2\n$ BUS_STOP_N &lt;chr&gt; \"13099\", \"13089\", \"06151\", \"13211\", \"13139\", \"13109\", \"1311…\n$ SUBZONE_C  &lt;chr&gt; \"RVSZ05\", \"RVSZ05\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\", \"SRSZ01\",…\n\n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame.\n\n\nCode\norigin_data &lt;- left_join(origin7_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C)\n\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\n\nCode\nduplicate &lt;- origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\n\n\nCode\nmpsz_origtrip &lt;- left_join(mpsz, \n                           origin_data,\n                           by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))\n\n\n\n\n3.3 Choropleth Visualization\nUsing the steps you had learned, prepare a choropleth map showing the distribution of passenger trips at planning sub-zone level.\n\n\nCode\ntm_shape(mpsz_origtrip)+\n  tm_fill(\"TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning sub-zone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Passenger trips data from LTA\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html",
    "href": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html",
    "title": "In Class Exercise 4",
    "section": "",
    "text": "Geographically weighted poisson regression."
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#overview",
    "href": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#overview",
    "title": "In Class Exercise 4",
    "section": "",
    "text": "Geographically weighted poisson regression."
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#preparing-data",
    "href": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#preparing-data",
    "title": "In Class Exercise 4",
    "section": "2 Preparing Data",
    "text": "2 Preparing Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)\n\n\n2.1 Get ready\n\n\nCode\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\n\n\n\n2.2 Geospatial Data\nImport the subzone data.\nCheck the data.\n\n\n2.3 Aspatial Data\nImporting condo resale data.\nWrangling data."
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex03/data/geospatial/MPSZ-2019.html",
    "href": "Inclass_Ex/Inclass_Ex03/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex03/data/geospatial/MPSZ-2019.html",
    "href": "Handson_Ex/Handson_Ex03/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex04/Handson_Ex04.html",
    "href": "Handson_Ex/Handson_Ex04/Handson_Ex04.html",
    "title": "Hands on Excercise 4",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#overview",
    "href": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#overview",
    "title": "Hands on Excercise 4",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#preparing-data",
    "href": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#preparing-data",
    "title": "Hands on Excercise 4",
    "section": "2 Preparing Data",
    "text": "2 Preparing Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)\n\n\n2.1 Get ready\n\n\nCode\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\n\n\n\n2.2 Geospatial Data\nImport the subzone data.\n\n\nCode\nmpsz &lt;- st_read(dsn = \"./data/geospatial\",\n                   layer = \"MP14_SUBZONE_WEB_PL\") %&gt;% st_transform(crs = 3414)\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nCheck the data.\n\n\nCode\nst_crs(mpsz)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nReveal the extent of mpsz.\n\n\nCode\nst_bbox(mpsz) #view extent\n\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\n2.3 Aspatial Data\nImporting condo resale data.\n\n\nCode\ncondo_resale = read_csv(\"./data/aspatial/Condo_resale_2015.csv\")\nglimpse(condo_resale)\n\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nCheck some detail of the data.\n\n\nCode\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\n\nCode\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\n\nCode\nsummary(condo_resale)\n\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n2.3.1 Converting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\n\nCode\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\n\nCode\nhead(condo_resale.sf)\n\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "Two data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\nCode\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\n\nCode\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\n\nCode\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nCode\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\n\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nCode\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nIn this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\n\nCode\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\n\nCode\nwm_q[[1]]\n\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\n\nCode\nhunan$County[1]\n\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\n\nCode\nhunan$NAME_3[c(2,3,4,57,85)]\n\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\n\nCode\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\n\nCode\nstr(wm_q) %&gt;% head(10)\n\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\nNULL\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output might cut across several pages. Save the trees if you are going to print out the report.\n\n\n\n\n\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\n\nCode\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nCode\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\n\nCode\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\nCode\ncoords &lt;- cbind(longitude, latitude)\n\n\nWe check the first few observations to see if things are formatted correctly.\n\n\nCode\nhead(coords)\n\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"blue\")\n\n\n\n\n\n\n\n\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nCode\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"blue\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nCode\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)         \n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\n\nCode\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\n\n\n\n\n\nTip\n\n\n\nQuiz: What is the meaning of “Average number of links: 3.681818” shown above?\nAs I understand, this should be number of nonzero links over number of regions.\n\n\nNext, we will use str() to display the structure of the weight matrix is to combine table() and card() of spdep.\n\n\nCode\ntable(hunan$County, card(wm_d62))\n\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nTo extract number of regions from the table:\n\n\nCode\nn_comp &lt;- n.comp.nb(wm_d62)\ntable(n_comp$comp.id)\n\n\n\n 1 \n88 \n\n\n\n\nNext, we will plot the distance weight matrix by using the code chunk below.\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"blue\", length=0.08)\n\n\n\n\n\nThe blue lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\n\nCode\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"blue\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\nCode\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nNotice that each county has six neighbours, no less no more!\n\n\n\nWe can plot the weight matrix using the code chunk below.\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\n\nCode\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\n\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n\nCode\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q    \n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\n\nCode\nrswm_q$weights[10]\n\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\n\nCode\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\n\nCode\nrswm_ids$weights[1]\n\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\n\nCode\nsummary(unlist(rswm_ids$weights))\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\n\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\n\nCode\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\n\nCode\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n\n\n\n\n\nTip\n\n\n\nQuestion: Can you see the meaning of Spatial lag with row-standardized weights now?\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\n\nCode\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\n\nCode\nhead(hunan)\n\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\n\nCode\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\n\nCode\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\n\nCode\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nQuestion: Can you understand the meaning of Spatial lag as a sum of neighboring values now?\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\n\nCode\nhunan &lt;- left_join(hunan, lag.res)\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\n\nCode\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\n\nCode\nwm_qs &lt;- include.self(wm_q)\n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\n\nCode\nwm_qs[[1]]\n\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five. Now we obtain weights with nb2listw()\n\n\nCode\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\n\nCode\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\nCode\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nCode\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below. Let’s check the first 10 rows.\n\n\nCode\nhunan %&gt;%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %&gt;%\n  head(10) %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\n\nCode\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nFor more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\n\nCode\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\n\nCode\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five. Again, we use nb2listw() and glist() to explicitly assign weight values.\n\n\nCode\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\n\nCode\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\nCode\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nCode\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\n\nCode\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  head(10) %&gt;%\n  kable()\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\n\nCode\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#data-preparation",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#data-preparation",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "Two data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\nCode\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\n\nCode\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\n\nCode\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nCode\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#visualising-regional-development-indicator",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#visualising-regional-development-indicator",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nCode\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#computing-contiguity-spatial-weights",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#computing-contiguity-spatial-weights",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "In this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\n\nCode\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\n\nCode\nwm_q[[1]]\n\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\n\nCode\nhunan$County[1]\n\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\n\nCode\nhunan$NAME_3[c(2,3,4,57,85)]\n\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\n\nCode\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\n\nCode\nstr(wm_q) %&gt;% head(10)\n\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\nNULL\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output might cut across several pages. Save the trees if you are going to print out the report.\n\n\n\n\n\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\n\nCode\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nCode\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\n\nCode\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\nCode\ncoords &lt;- cbind(longitude, latitude)\n\n\nWe check the first few observations to see if things are formatted correctly.\n\n\nCode\nhead(coords)\n\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"blue\")\n\n\n\n\n\n\n\n\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nCode\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"blue\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#computing-distance-based-neighbours",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#computing-distance-based-neighbours",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "In this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nCode\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)         \n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\n\nCode\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\n\n\n\n\n\nTip\n\n\n\nQuiz: What is the meaning of “Average number of links: 3.681818” shown above?\nAs I understand, this should be number of nonzero links over number of regions.\n\n\nNext, we will use str() to display the structure of the weight matrix is to combine table() and card() of spdep.\n\n\nCode\ntable(hunan$County, card(wm_d62))\n\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nTo extract number of regions from the table:\n\n\nCode\nn_comp &lt;- n.comp.nb(wm_d62)\ntable(n_comp$comp.id)\n\n\n\n 1 \n88 \n\n\n\n\nNext, we will plot the distance weight matrix by using the code chunk below.\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"blue\", length=0.08)\n\n\n\n\n\nThe blue lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\n\nCode\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"blue\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\nCode\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nNotice that each county has six neighbours, no less no more!\n\n\n\nWe can plot the weight matrix using the code chunk below.\n\n\nCode\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\")"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#weights-based-on-idw",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#weights-based-on-idw",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "In this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\n\nCode\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\n\n\n\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n\nCode\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q    \n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\n\nCode\nrswm_q$weights[10]\n\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\n\nCode\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\n\nCode\nrswm_ids$weights[1]\n\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\n\nCode\nsummary(unlist(rswm_ids$weights))\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#application-of-spatial-weight-matrix",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#application-of-spatial-weight-matrix",
    "title": "Hands on Exercise 2",
    "section": "",
    "text": "In this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\n\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\n\nCode\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\n\nCode\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n\n\n\n\n\nTip\n\n\n\nQuestion: Can you see the meaning of Spatial lag with row-standardized weights now?\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\n\nCode\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\n\nCode\nhead(hunan)\n\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\n\nCode\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\n\nCode\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\n\nCode\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\n\n\n\n\n\n\nTip\n\n\n\nQuestion: Can you understand the meaning of Spatial lag as a sum of neighboring values now?\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\n\nCode\nhunan &lt;- left_join(hunan, lag.res)\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\n\nCode\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\n\nCode\nwm_qs &lt;- include.self(wm_q)\n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\n\nCode\nwm_qs[[1]]\n\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five. Now we obtain weights with nb2listw()\n\n\nCode\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\n\nCode\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\nCode\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nCode\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below. Let’s check the first 10 rows.\n\n\nCode\nhunan %&gt;%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %&gt;%\n  head(10) %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\n\nCode\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nFor more effective comparison, it is advicible to use the core tmap mapping functions.\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\n\nCode\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\n\nCode\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five. Again, we use nb2listw() and glist() to explicitly assign weight values.\n\n\nCode\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\n\nCode\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\nCode\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nCode\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\n\nCode\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  head(10) %&gt;%\n  kable()\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\n\nCode\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#importing-data-into-r",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#importing-data-into-r",
    "title": "Hands on Exercise 2",
    "section": "1 Importing Data into R",
    "text": "1 Importing Data into R\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n1.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\n\nCode\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Handson_Ex/Handson_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n1.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\n\nCode\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nCode\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n\n1.3 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nCode\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#global-spatial-autocorrelation",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#global-spatial-autocorrelation",
    "title": "Hands on Exercise 2",
    "section": "2 Global Spatial Autocorrelation",
    "text": "2 Global Spatial Autocorrelation\nIn this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n2.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\n\nCode\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n2.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n\nCode\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n2.3 Moran’s I\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n2.3.1 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\n\nCode\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\n\n\n\nTip\n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\nFrom ChatGPT:\nMoran’s I is a statistical measure used in spatial analysis to assess the spatial autocorrelation of data. Spatial autocorrelation refers to the relationship between the values of a variable in geographic space. In simpler terms, it explores whether nearby locations are similar or dissimilar in terms of a particular attribute or variable.\nMoran’s I statistic quantifies the degree of spatial clustering or dispersion in a dataset. It measures the correlation between the values of a variable at different locations. The values can range from -1 to 1, where:\n\nMoran’s I close to +1 indicates positive spatial autocorrelation, suggesting that similar values tend to cluster together in space. High values are indicative of a clustering pattern.\nMoran’s I close to -1 indicates negative spatial autocorrelation, suggesting dissimilar values tend to be close together in space. Low values are indicative of a dispersion or scattering pattern.\nMoran’s I close to 0 suggests no spatial autocorrelation, implying a random spatial pattern or no relationship between neighboring values.\n\nAs I understand, since the Moron I statistics standard deviate of 4.7351 indicates that the observed Moran’s I value (0.300749970) is almost 4.7 standard deviations away from what would be expected under the null hypothesis. And p-value is very close to 0 suggesting to reject null hypothesis, indicating a significant positive spatial autocorrelation in our graph.\n\n\n\n\n2.3.2 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\n\nCode\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\n\n\nTip\n\n\n\nQuestion: What statistical conclustion can you draw from the output above?\nFrom ChaptGPT:\nThe Monte Carlo simulation of Moran’s I is a method used to assess the statistical significance of Moran’s I statistic by generating random spatial patterns through repeated simulations. This technique helps determine whether the observed spatial pattern in a dataset is significantly different from what would be expected under a null hypothesis of spatial randomness.\nAs I understand, this output shows a p-value close to 0, we should reject the null hypothesis again, and be confident in our conclusion that there is a statistically significant positive spatial autocorrelation in our graph.\n\n\n\n\n2.3.3 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\n\nCode\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\nDIY: Using ggplot2 to plot.\n\n\nCode\nres = as.data.frame(bperm$res)\nggplot(res, \n       aes(x= bperm$res))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept = 0, color = \"red\"), show.legend = FALSE) +\n  labs(title = \"Distribution of Moran’s I Simulation\",\n      x = \"Simulated Moran's I\",\n      y = \"Frequency\") +\n  theme(panel.background = element_blank(), panel.grid = element_blank())\n\n\n\n\n\n\n\n\n2.4 Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\n2.4.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\n\nCode\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\n\n\n\nTip\n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\nFrom ChatGPT:\nGeary’s C statistic measures spatial autocorrelation by comparing the differences between values at neighboring locations to the overall mean difference in the entire dataset. It can be used to detect both positive and negative spatial autocorrelation, indicating clustering or dispersion of attribute values across space.\nGeary’s C values range from 0 to infinity:\n\nC&lt;1 suggests positive spatial autocorrelation (similar values are close together).\nC&gt;1 suggests negative spatial autocorrelation (dissimilar values are close together).\nC=1 implies no spatial autocorrelation (values are randomly distributed across space).\n\nAs I understand, since this test output 0.69 Geary’s C statistic which is &lt;1, and very small p-value suggesting reject of null hypothesis, indicating there is autocorrelation in our graph and it’s positive.\n\n\n\n\n2.4.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\n\nCode\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\n\n\nTip\n\n\n\nAccording to the very small p-value, we can safely reject the null hypothesis and trust our result from Geary C test.\n\n\n\n\n2.4.3 Visualising the Monte Carlo Geary’s C\n\n\nCode\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#spatial-correlogram",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#spatial-correlogram",
    "title": "Hands on Exercise 2",
    "section": "3 Spatial Correlogram",
    "text": "3 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n3.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\n\nCode\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\n\nCode\nprint(MI_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nTip\n\n\n\nQuestion:What statistical observation can you draw from the plot above?\nNot all autocorrelation values are statistically significant.\n\n\n\n\n3.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\n\nCode\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\n\nCode\nprint(GC_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#cluster-and-outlier-analysis",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#cluster-and-outlier-analysis",
    "title": "Hands on Exercise 2",
    "section": "1 Cluster and Outlier Analysis",
    "text": "1 Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. For instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#computing-local-morans-i",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#computing-local-morans-i",
    "title": "Hands on Exercise 2",
    "section": "2 Computing local Moran’s I",
    "text": "2 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\n\nCode\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\n\nCode\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n2.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\n\nCode\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\n2.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\n\nCode\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n2.3 Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\n\nCode\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n2.4 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\n\nCode\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#creating-a-lisa-cluster-map",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#creating-a-lisa-cluster-map",
    "title": "Hands on Exercise 2",
    "section": "3 Creating a LISA Cluster Map",
    "text": "3 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n3.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\n\nCode\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n3.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\n\nCode\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\n\nCode\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n3.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\n\nCode\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\n\nCode\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\n\nThis is follow by centering the local Moran’s around the mean.\n\n\nCode\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\n\nNext, we will set a statistical significance level for the local Moran.\n\n\nCode\nsignif &lt;- 0.05       \n\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\n\nCode\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\n\nLastly, places non-significant Moran in the category 0.\n\n\nCode\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n\n3.4 Plotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\n\nCode\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\n\nCode\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands on Exercise 2",
    "section": "4 Hot Spot and Cold Spot Area Analysis",
    "text": "4 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n4.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n4.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n4.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nCode\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\n\nCode\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\nCode\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n\n4.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nCode\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n4.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\n\nCode\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\n\nCode\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n4.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\nCode\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\n\nCode\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#computing-gi-statistics",
    "href": "Handson_Ex/Handson_Ex02/Handson_Ex02.html#computing-gi-statistics",
    "title": "Hands on Exercise 2",
    "section": "5 Computing Gi statistics",
    "text": "5 Computing Gi statistics\n\n5.1 Gi statistics using fixed distance\n\n\nCode\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\n\nCode\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n\n5.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n\nCode\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\n2.3 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\n\nCode\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\n2.4 Mapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using adaptive distance weight matrix.\n\n\nCode\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624 Applied Geospatial Analytics",
    "section": "",
    "text": "This is a Quarto website to introduce you about ISSS624 Applied Geospatial Analytics."
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html",
    "href": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "What are the driving forces behind urban dwellers to weak up early in morning to commute from their home locations to their work places? What are the impact of removing a public bus service on the commuters reside along the corridor of the bus route? These and many other questions related to urban mobility are challenges faced by transport operators and urban managers.\nTo provide answer to this question, traditionally, commuters survey will be used. However, commuters survey is a very costly, time-consuming and laborous, not to mention that the survey data tend to take a long time to clean and analyse. As a result, it is not unusual, by the time the survey report was ready, most of the information already out-of-date!\nAs city-wide urban infrastructures such as public buses, mass rapid transits, public utilities and roads become digital, the data sets obtained can be used as a framework for tracking movement patterns through space and time. This is particularly true with the recent trend of massive deployment of pervasive computing technologies such as GPS on the vehicles and SMART cards used by public transport commuters.\nUnfortunately, this explosive growth of geospatially-referenced data has far outpaced the planner’s ability to utilize and transform the data into insightful information thus creating an adverse impact on the return on the investment made to collect and manage this data.\n\n\n\nThis take-home exercise is motivated by two main reasons. Firstly, despite increasing amounts of open data available for public consumption, there has not been significant practice research carried out to show how these disparate data sources can be integrated, analysed, and modelled to support policy making decisions.\nSecondly, there is a general lack of practical research to show how geospatial data science and analysis (GDSA) can be used to support decision-making.\nHence, your task for this take-home exercise is to conduct a case study to demonstrate the potential value of GDSA to integrate publicly available data from multiple sources for building a spatial interaction models to determine factors affecting urban mobility patterns of public bus transit.\n\n\n\n\n\nFor the purpose of this assignment, data from several open government sources will be used:\n\nPassenger Volume by Origin Destination Bus Stops, Bus Stop Location, Train Station and Train Station Exit Point, just to name a few of them, from LTA DataMall.\nMaster Plan 2019 Subzone Boundary, HDB Property Information, School Directory and Information and other relevant data from Data.gov.sg.\n\n\n\n\n\nBusiness, entertn, F&B, FinServ, Leisure&Recreation and Retails are geospatial data sets of the locations of business establishments, entertainments, food and beverage outlets, financial centres, leisure and recreation centres, retail and services stores/outlets I compiled for urban mobility study. They are available on in the geospatial folder to Take-home Exercise 2 data folder.\nHDB: This data set is the geocoded version of HDB Property Information data from data.gov. The data set is prepared using September 2021 data. If you want to prepare you own data by using the latest HDB Property Information provided on data.gov.sg, this link provides a useful step-by-step guide.\n\n\n\n\n\n\n\nImportant\n\n\n\nThose specially collected data aim to use within this excercise content only, if intend to put in other usage, approach course instructor Dr. Kam Tin Seong and ask for permission first.\n\n\nFor starting, load needing packages.\n\n\nCode\npacman::p_load(sf, sp, spdep, tmap, tidyverse, sfdep, stplanr, reshape2)\n\n\n\n\n\n\n\n\n\n\nDerive an analytical hexagon data of 375m (this distance is the perpendicular distance between the centre of the hexagon and its edges) to represent the traffic analysis zone (TAZ).\nFirst of all, we need to import Bus Stop Location from LTA DataMall.\n\n\nCode\nbusstop = st_read(dsn = \"./data/geospatial/BusStopLocation_Jul2023\",\n                   layer = \"BusStop\")  %&gt;% st_transform(crs = 3414) %&gt;% \n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\n\nReading layer `BusStop' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial/BusStopLocation_Jul2023' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nAlso import subzone geometry data as our background layer.\n\n\nCode\nsz = st_read(dsn = \"./data/geospatial\",\n                   layer = \"MPSZ-2019\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `MPSZ-2019' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nThen we can Derive an analytical hexagon data of 375m.\n\n\nCode\nhexagon &lt;- st_sf(geometry = st_make_grid(busstop, cellsize = 750, what = \"polygons\",square = FALSE)) %&gt;%\n  mutate(id = row_number()) %&gt;%\n  st_transform(crs = 3414) \n\nhexagon &lt;- hexagon %&gt;%\n  mutate(N = lengths(st_intersects(hexagon, busstop))) %&gt;% \n  filter(N&gt;0)\n\n\nPlot out our bus_hex to check.\n\n\nCode\ntm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\ntm_shape(hexagon) +\n  tm_fill(\"N\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Bus stop counts\",\n          colorNA = NULL,\n          showNA = FALSE) +\n  tm_layout(main.title = \"Count of Bus Stops at Hexagon Level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"4star\", size = 1.5) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\nThen we can join bus stop with hexagon, and join with subzone to exclude hexagons out of range.\n\n\nCode\nbus_hex &lt;- st_join(\n  st_join(hexagon, busstop%&gt;%select(BUS_STOP_N,geometry), join = st_intersects),\n  sz) %&gt;%\n  drop_na() %&gt;%\n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\nbus_hex\n\n\nSimple feature collection with 5140 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3595.122 ymin: 26049.09 xmax: 48595.12 ymax: 50297.8\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    id N BUS_STOP_N           SUBZONE_N SUBZONE_C PLN_AREA_N PLN_AREA_C\n1   23 1      25059 TUAS VIEW EXTENSION    TSSZ06       TUAS         TS\n2   44 1      25751 TUAS VIEW EXTENSION    TSSZ06       TUAS         TS\n3   46 2      26379           TUAS VIEW    TSSZ05       TUAS         TS\n3.1 46 2      26369           TUAS VIEW    TSSZ05       TUAS         TS\n4   66 1      25741 TUAS VIEW EXTENSION    TSSZ06       TUAS         TS\n5   67 4      26399           TUAS VIEW    TSSZ05       TUAS         TS\n5.1 67 4      25719           TUAS VIEW    TSSZ05       TUAS         TS\n5.2 67 4      25711           TUAS VIEW    TSSZ05       TUAS         TS\n5.3 67 4      26389           TUAS VIEW    TSSZ05       TUAS         TS\n6   68 1      26299           TUAS VIEW    TSSZ05       TUAS         TS\n       REGION_N REGION_C                       geometry\n1   WEST REGION       WR POLYGON ((3970.122 27348.13...\n2   WEST REGION       WR POLYGON ((4345.122 27997.65...\n3   WEST REGION       WR POLYGON ((4345.122 30595.72...\n3.1 WEST REGION       WR POLYGON ((4345.122 30595.72...\n4   WEST REGION       WR POLYGON ((4720.122 28647.16...\n5   WEST REGION       WR POLYGON ((4720.122 29946.2,...\n5.1 WEST REGION       WR POLYGON ((4720.122 29946.2,...\n5.2 WEST REGION       WR POLYGON ((4720.122 29946.2,...\n5.3 WEST REGION       WR POLYGON ((4720.122 29946.2,...\n6   WEST REGION       WR POLYGON ((4720.122 31245.24...\n\n\nNotice there would be duplicate geometry, meaning multiple ’BUS_STOP_N’s at same hexagon.\n\n\nCode\nbus_hex %&gt;%\n  group_by(geometry)%&gt;%\n  filter(row_number()&gt;1)\n\n\nSimple feature collection with 4309 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 27348.13 xmax: 48595.12 ymax: 50297.8\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 4,309 × 10\n# Groups:   geometry [776]\n      id     N BUS_STOP_N SUBZONE_N     SUBZONE_C PLN_AREA_N PLN_AREA_C REGION_N\n * &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;   \n 1    46     2 26369      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 2    67     4 25719      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 3    67     4 25711      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 4    67     4 26389      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 5    88     4 25701      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 6    88     4 25709      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 7    88     4 26461      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 8    89     2 26289      TUAS PROMENA… TSSZ02    TUAS       TS         WEST RE…\n 9   109     3 25631      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n10   109     3 26419      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n# ℹ 4,299 more rows\n# ℹ 2 more variables: REGION_C &lt;chr&gt;, geometry &lt;POLYGON [m]&gt;\n\n\n\n\n\nWith reference to the time intervals provided in the table below, construct an O-D matrix of commuter flows for a time interval of your choice by integrating Passenger Volume by Origin Destination Bus Stops and Bus Stop Location from LTA DataMall. The O-D matrix must be aggregated at the analytics hexagon level\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nImport bus passenger trips data.\n\n\nCode\nodbus = read_csv(\"./data/aspatial/origin_destination_bus_202310.csv\")  %&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n         DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE))\n\n\nExtract passenger trips data during all peak time intervals.\n\n\nCode\npeak_trips &lt;- bind_rows(\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n    mutate(interval = \"weekdayam\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 &\n           TIME_PER_HOUR &lt;= 20) %&gt;%\n    mutate(interval = \"weekdaypm\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 &\n           TIME_PER_HOUR &lt;= 14) %&gt;%\n    mutate(interval = \"weekendam\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n           TIME_PER_HOUR &lt;= 19) %&gt;%\n    mutate(interval = \"weekendpm\")) %&gt;%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE, interval) %&gt;%\n  reframe(TRIPS = sum(TOTAL_TRIPS)) \n\nglimpse(peak_trips)\n\n\nRows: 951,259\nColumns: 4\n$ ORIGIN_PT_CODE      &lt;fct&gt; 01012, 01012, 01012, 01012, 01012, 01012, 01012, 0…\n$ DESTINATION_PT_CODE &lt;fct&gt; 01112, 01112, 01112, 01112, 01113, 01113, 01113, 0…\n$ interval            &lt;chr&gt; \"weekdayam\", \"weekdaypm\", \"weekendam\", \"weekendpm\"…\n$ TRIPS               &lt;dbl&gt; 290, 540, 265, 201, 118, 516, 189, 165, 77, 303, 1…\n\n\nCheck any bus stops not in our origin ‘bus_hex’ list.\n\n\nCode\npeak_trips %&gt;%\n  filter(! ORIGIN_PT_CODE %in% bus_hex$'BUS_STOP_N') %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  reframe(TRIPS = sum(TRIPS))\n\n\nExclude any bus stops not included in ‘bus_hex’ data before continue.\n\n\nCode\npeak_trips &lt;- peak_trips %&gt;%\n  filter(ORIGIN_PT_CODE %in% bus_hex$'BUS_STOP_N') %&gt;%\n  filter(DESTINATION_PT_CODE %in% bus_hex$'BUS_STOP_N')\n\n\nDuplication check before continue.\n\n\nCode\npeak_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nAfter that, we need to combine those passenger trip data with geospatial data by origin bus stops.\n\n\nCode\npeaktrip_hex &lt;- left_join(peak_trips %&gt;% \n                            group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %&gt;%\n                            reframe(TRIPS = sum(TRIPS)),\n                          bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\"))  %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         DESTIN_BS = DESTINATION_PT_CODE) \n\n\nDuplication check before continue:\n\n\nCode\npeaktrip_hex %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nThen we can continue to join again with geospatial data by destination bus stops.\n\n\nCode\npeaktrip_hex &lt;- left_join(peaktrip_hex, bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"),\n                          suffix = c(\".origin\", \".destin\")) \n\nglimpse(peaktrip_hex)\n\n\nRows: 306,940\nColumns: 5\n$ ORIGIN_BS       &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", …\n$ DESTIN_BS       &lt;chr&gt; \"01112\", \"01113\", \"01121\", \"01211\", \"01311\", \"01549\", …\n$ TRIPS           &lt;dbl&gt; 1296, 988, 629, 765, 1217, 16, 29, 1, 94, 102, 68, 436…\n$ geometry.origin &lt;POLYGON [m]&gt; POLYGON ((29845.12 30595.72..., POLYGON ((2984…\n$ geometry.destin &lt;POLYGON [m]&gt; POLYGON ((30220.12 31245.24..., POLYGON ((3022…\n\n\nDuplication check again.\n\n\nCode\npeaktrip_hex %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\n# A tibble: 0 × 5\n# ℹ 5 variables: ORIGIN_BS &lt;chr&gt;, DESTIN_BS &lt;chr&gt;, TRIPS &lt;dbl&gt;,\n#   geometry.origin &lt;GEOMETRY [m]&gt;, geometry.destin &lt;GEOMETRY [m]&gt;\n\n\nWe can save the output into a rds file.\n\n\nCode\nwrite_rds(peaktrip_hex, \"./data/rds/peaktrip_hex.rds\")\n\n\n\n\n\nDisplay the O-D flows of the passenger trips by using appropriate geovisualisation methods.\nFirst let’s ensure there aren’t any observations with same origin and destination.\n\n\nCode\npeaktrip_hex %&gt;%\n  filter(ORIGIN_BS==DESTIN_BS)\n\n\nThen we can create flow lines and check summary of data in case there are any zero.\n\n\nCode\npeaktrip_flow &lt;- od2line(flow = peaktrip_hex, \n                    zones = bus_hex,\n                    zone_code = \"BUS_STOP_N\")\n\nsummary(peaktrip_flow)\n\n\n  ORIGIN_BS          DESTIN_BS             TRIPS         \n Length:306940      Length:306940      Min.   :     1.0  \n Class :character   Class :character   1st Qu.:     6.0  \n Mode  :character   Mode  :character   Median :    27.0  \n                                       Mean   :   209.1  \n                                       3rd Qu.:   112.0  \n                                       Max.   :153711.0  \n      geometry.origin        geometry.destin            geometry     \n POLYGON      :306940   POLYGON      :306940   LINESTRING   :306940  \n epsg:3414    :     0   epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0   +proj=tmer...:     0  \n                                                                     \n                                                                     \n                                                                     \n\n\nTill now, we can plot out the bus trip flow during all 4 peak time intervals in total.\n\n\nCode\ntm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeaktrip_flow %&gt;% \n  filter(TRIPS &gt;= 2000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6)\n\n\n\n\n\nAnd we can visualize 4 peak time intervals in facets style to check any difference within.\nFirst need to wrangling the data to put trips data of different time intervals into different columns.\n\n\nCode\npeak_interval_trips &lt;- peak_trips %&gt;%\n  pivot_wider(names_from = interval, \n              values_from = TRIPS, \n              values_fill = 0)\n\npeak_interval_hex &lt;- left_join(peak_interval_trips,\n                          bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\"))  %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         DESTIN_BS = DESTINATION_PT_CODE) \n\n\npeak_interval_hex &lt;- left_join(peak_interval_hex, bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"),\n                          suffix = c(\".origin\", \".destin\")) \n\nglimpse(peak_interval_hex)\n\n\nRows: 306,940\nColumns: 8\n$ ORIGIN_BS       &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", …\n$ DESTIN_BS       &lt;chr&gt; \"01112\", \"01113\", \"01121\", \"01211\", \"01311\", \"01549\", …\n$ weekdayam       &lt;dbl&gt; 290, 118, 77, 118, 165, 0, 0, 0, 14, 30, 16, 35, 26, 0…\n$ weekdaypm       &lt;dbl&gt; 540, 516, 303, 363, 630, 6, 6, 1, 42, 48, 23, 260, 76,…\n$ weekendam       &lt;dbl&gt; 265, 189, 120, 141, 218, 1, 7, 0, 16, 8, 8, 58, 21, 7,…\n$ weekendpm       &lt;dbl&gt; 201, 165, 129, 143, 204, 9, 16, 0, 22, 16, 21, 83, 21,…\n$ geometry.origin &lt;POLYGON [m]&gt; POLYGON ((29845.12 30595.72..., POLYGON ((2984…\n$ geometry.destin &lt;POLYGON [m]&gt; POLYGON ((30220.12 31245.24..., POLYGON ((3022…\n\n\nBefore we continue, we can check duplication and save the result as a rds file.\n\n\nCode\npeak_interval_hex %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\n\n\nCode\nwrite_rds(peak_interval_hex, \"./data/rds/peak_interval_hex.rds\")\n\n\nThen we can create flow lines.\n\n\nCode\npeak_interval_flow &lt;- od2line(flow = peak_interval_hex, \n                    zones = bus_hex,\n                    zone_code = \"BUS_STOP_N\")\n\nsummary(peak_interval_flow)\n\n\n  ORIGIN_BS          DESTIN_BS           weekdayam          weekdaypm       \n Length:306940      Length:306940      Min.   :    0.00   Min.   :    0.00  \n Class :character   Class :character   1st Qu.:    1.00   1st Qu.:    1.00  \n Mode  :character   Mode  :character   Median :    6.00   Median :    8.00  \n                                       Mean   :   82.23   Mean   :   78.52  \n                                       3rd Qu.:   37.00   3rd Qu.:   38.00  \n                                       Max.   :74796.00   Max.   :42785.00  \n   weekendam          weekendpm             geometry.origin  \n Min.   :    0.00   Min.   :    0.00   POLYGON      :306940  \n 1st Qu.:    0.00   1st Qu.:    0.00   epsg:3414    :     0  \n Median :    3.00   Median :    3.00   +proj=tmer...:     0  \n Mean   :   24.16   Mean   :   24.23                         \n 3rd Qu.:   12.00   3rd Qu.:   12.00                         \n Max.   :15603.00   Max.   :23484.00                         \n      geometry.destin            geometry     \n POLYGON      :306940   LINESTRING   :306940  \n epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0  \n                                              \n                                              \n                                              \n\n\nThen we can plot out 4 peak intervals in facets.\n\n\nCode\nweekdayam_plot &lt;- tm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeak_interval_flow %&gt;% \n  filter(weekdayam &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"weekdayam\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6) +\n  tm_layout(main.title = \"Trips during Weekday 6am till 9am\",\n            main.title.size = 1.2)\n\nweekdaypm_plot &lt;- tm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeak_interval_flow %&gt;% \n  filter(weekdaypm &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"weekdaypm\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6) +\n  tm_layout(main.title = \"Trips during Weekday 5pm till 8pm\",\n            main.title.size = 1.2)\n\nweekendam_plot &lt;- tm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeak_interval_flow %&gt;% \n  filter(weekendam &gt;= 2000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"weekendam\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6) +\n  tm_layout(main.title = \"Trips during Weekend/Holiday 11am till 2pm\",\n            main.title.size = 1.2)\n\nweekendpm_plot &lt;- tm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeak_interval_flow %&gt;% \n  filter(weekendpm &gt;= 2000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"weekendpm\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6) +\n  tm_layout(main.title = \"Trips during Weekend/Holiday 4pm till 7pm\",\n            main.title.size = 1.2)\n\ntmap_arrange(weekdayam_plot, weekdaypm_plot, weekendam_plot, weekendpm_plot, asp=1, ncol=2,\n             outer.margins = 0)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nObservations:\nDescribe the spatial patterns revealed by the geo-visualization (not more than 100 words per visual)\n\n\n\n\n\nFirstly import all those propulsive and Attractiveness variables.\n\n\nCode\nbusiness = st_read(dsn = \"./data/geospatial\",\n                   layer = \"Business\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `Business' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nentertn = st_read(dsn = \"./data/geospatial\",\n                   layer = \"entertn\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `entertn' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 114 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10809.34 ymin: 26528.63 xmax: 41600.62 ymax: 46375.77\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nfood = st_read(dsn = \"./data/geospatial\",\n                   layer = \"F&B\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `F&B' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1919 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25343.27 xmax: 45462.43 ymax: 48796.21\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nfinance = st_read(dsn = \"./data/geospatial\",\n                   layer = \"FinServ\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `FinServ' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nleisure = st_read(dsn = \"./data/geospatial\",\n                   layer = \"Leisure&Recreation\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `Leisure&Recreation' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1217 features and 30 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25134.28 xmax: 48439.77 ymax: 50078.88\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nretail = st_read(dsn = \"./data/geospatial\",\n                   layer = \"Retails\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `Retails' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n\n\nThen we can assemble all those variables by using st_join.\n\n\nCode\nfactors &lt;- st_join(retail %&gt;% select(POI_NAME, geometry), \n                   business %&gt;% select(POI_NAME, geometry), \n                   join = st_nearest_feature,\n                   suffix = c(\"_retail\", \"_business\")) %&gt;% \n  st_join(finance %&gt;% select(POI_NAME, geometry) %&gt;% rename(finance = POI_NAME),\n          join = st_nearest_feature) %&gt;% \n  st_join(food %&gt;% select(POI_NAME, geometry) %&gt;% rename(food = POI_NAME),\n          join = st_nearest_feature) %&gt;% \n  st_join(leisure %&gt;% select(POI_NAME, geometry) %&gt;% rename(leisure = POI_NAME),\n          join = st_nearest_feature) %&gt;% \n  st_join(entertn %&gt;% select(POI_NAME, geometry) %&gt;% rename(entertn = POI_NAME),\n          join = st_nearest_feature) %&gt;%\n  st_join(bus_hex%&gt;%select(BUS_STOP_N, geometry), join = st_nearest_feature)\n\nglimpse(factors)\n\n\nRows: 37,635\nColumns: 8\n$ POI_NAME_retail   &lt;chr&gt; \"TIAN KEE & CO\", \"PEOPLE TRADITIONAL CHINESE MEDICAL…\n$ POI_NAME_business &lt;chr&gt; \"GOODMAN ARTS CENTRE\", \"GOODMAN ARTS CENTRE\", \"883 F…\n$ finance           &lt;chr&gt; \"POSB\", \"POSB\", \"POSB\", \"POSB\", \"UOB\", \"DBS\", \"DBS\",…\n$ food              &lt;chr&gt; \"LORNA 62\", \"LORNA 62\", \"RC & CYBER CAFE\", \"RC & CYB…\n$ leisure           &lt;chr&gt; \"GENESIS GYM\", \"GENESIS GYM\", \"RIVER SAFARI\", \"ZOO\",…\n$ entertn           &lt;chr&gt; \"GOODMAN ARTS CENTRE\", \"GOODMAN ARTS CENTRE\", \"CATHA…\n$ BUS_STOP_N        &lt;chr&gt; \"80271\", \"80271\", \"48131\", \"48131\", \"07249\", \"10299\"…\n$ geometry          &lt;POINT [m]&gt; POINT (33713.83 32023.15), POINT (33713.83 320…\n\n\nThen we need to count the point of each variable around each bus stop.\n\n\nCode\nfactor_count &lt;- \n  aggregate(POI_NAME_retail ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n  rename(retail_poi = POI_NAME_retail) %&gt;%\n  left_join(\n    aggregate(POI_NAME_business ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(business_poi = POI_NAME_business),\n    by = join_by(BUS_STOP_N)) %&gt;%\n  left_join(\n    aggregate(finance ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(finance_poi = finance),\n    by = join_by(BUS_STOP_N)) %&gt;%\n  left_join(\n    aggregate(food ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(food_poi = food),\n    by = join_by(BUS_STOP_N)) %&gt;% \n  left_join(\n    aggregate(leisure ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(leisure_poi = leisure),\n    by = join_by(BUS_STOP_N)) %&gt;% \n  left_join(\n    aggregate(entertn ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(entertn_poi = entertn),\n    by = join_by(BUS_STOP_N)) \n\nsummary(factor_count)\n\n\n  BUS_STOP_N          retail_poi       business_poi     finance_poi    \n Length:915         Min.   :   1.00   Min.   : 1.000   Min.   : 1.000  \n Class :character   1st Qu.:   3.00   1st Qu.: 1.000   1st Qu.: 1.000  \n Mode  :character   Median :   9.00   Median : 2.000   Median : 2.000  \n                    Mean   :  39.78   Mean   : 3.455   Mean   : 2.388  \n                    3rd Qu.:  34.00   3rd Qu.: 4.000   3rd Qu.: 3.000  \n                    Max.   :1411.00   Max.   :62.000   Max.   :30.000  \n    food_poi      leisure_poi      entertn_poi    \n Min.   : 1.00   Min.   : 1.000   Min.   : 1.000  \n 1st Qu.: 1.00   1st Qu.: 1.000   1st Qu.: 1.000  \n Median : 1.00   Median : 2.000   Median : 1.000  \n Mean   : 2.38   Mean   : 2.145   Mean   : 1.264  \n 3rd Qu.: 2.00   3rd Qu.: 3.000   3rd Qu.: 1.000  \n Max.   :64.00   Max.   :30.000   Max.   :10.000  \n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nSince left = TRUE is default in st_join, so here I will join those variables in the sequence of number of observations, which is, retail &lt;- business &lt;- finance &lt;- food &lt;- leisure &lt;- entertain.\nAnd to avoid NA count in some variable, I will set the “join = st_nearest_feature” instead of default “st_intersect”.\n\n\n\n\n\n\nFirst we need to convert the bus_hex we have generated into Spatial Polygons Data Frame.\n\n\nCode\nbus_sp &lt;- as(bus_hex, \"Spatial\")\nbus_sp\n\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 5140 \nextent      : 3595.122, 48595.12, 26049.09, 50297.8  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 9\nnames       :   id,  N, BUS_STOP_N,      SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  :   23,  1,      01012, ALEXANDRA HILL,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  : 2505, 19,      99189,         YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\nThen we can compute distance matrix of our bus stops hexagons and check the head 5.\n\n\nCode\ndist &lt;- spDists(bus_sp, \n                longlat = FALSE)\nhead(dist, n=c(5, 5))\n\n\n         [,1]     [,2]     [,3]     [,4]     [,5]\n[1,]    0.000  750.000 3269.174 3269.174 1500.000\n[2,]  750.000    0.000 2598.076 2598.076  750.000\n[3,] 3269.174 2598.076    0.000    0.000 1984.313\n[4,] 3269.174 2598.076    0.000    0.000 1984.313\n[5,] 1500.000  750.000 1984.313 1984.313    0.000\n\n\nAnd we need to give names to columns and rows of the matrix.\n\n\nCode\nbusstop_N &lt;- bus_sp$BUS_STOP_N\n\ncolnames(dist) &lt;- paste0(busstop_N)\nrownames(dist) &lt;- paste0(busstop_N)\n\nhead(dist, n=c(5, 5))\n\n\n         25059    25751    26379    26369    25741\n25059    0.000  750.000 3269.174 3269.174 1500.000\n25751  750.000    0.000 2598.076 2598.076  750.000\n26379 3269.174 2598.076    0.000    0.000 1984.313\n26369 3269.174 2598.076    0.000    0.000 1984.313\n25741 1500.000  750.000 1984.313 1984.313    0.000\n\n\nThen we can label the bus stops and convert it to pair-distance.\n\n\nCode\ndistPair &lt;- as.data.frame(as.table(dist)) \nnames(distPair) &lt;- c(\"orig\", \"dest\", \"dist\")\ndistPair &lt;- distPair %&gt;%\n  filter(orig != dest)\n\nglimpse(distPair)\n\n\nRows: 26,414,460\nColumns: 3\n$ orig &lt;fct&gt; 25751, 26379, 26369, 25741, 26399, 25719, 25711, 26389, 26299, 25…\n$ dest &lt;fct&gt; 25059, 25059, 25059, 25059, 25059, 25059, 25059, 25059, 25059, 25…\n$ dist &lt;dbl&gt; 750.000, 3269.174, 3269.174, 1500.000, 2704.163, 2704.163, 2704.1…\n\n\nLet’s give a constant distance of 50m to intra-hexagon bus stops pairs before continue.\n\n\nCode\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\nsummary(distPair)\n\n\n      orig               dest               dist      \n 25059  :    5139   25059  :    5139   Min.   :   50  \n 25751  :    5139   25751  :    5139   1st Qu.: 7830  \n 26379  :    5139   26379  :    5139   Median :12617  \n 26369  :    5139   26369  :    5139   Mean   :13296  \n 25741  :    5139   25741  :    5139   3rd Qu.:17859  \n 26399  :    5139   26399  :    5139   Max.   :44680  \n (Other):26383626   (Other):26383626                  \n\n\n\n\n\n\n\n\nFor this part, I will focus on weekend/holiday evening peak time interval for further analysis.\n\n\nCode\nweekendpm_trips &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n           TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %&gt;%\n  reframe(TRIPS = sum(TOTAL_TRIPS))\n \nweekendpm_trips &lt;- weekendpm_trips %&gt;%\n  filter(ORIGIN_PT_CODE %in% bus_hex$'BUS_STOP_N') %&gt;%\n  filter(DESTINATION_PT_CODE %in% bus_hex$'BUS_STOP_N')\n\nweekendpm_hex &lt;- left_join(weekendpm_trips,bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\"))  %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         DESTIN_BS = DESTINATION_PT_CODE) \n\nweekendpm_hex &lt;- left_join(weekendpm_hex, bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"),\n                          suffix = c(\".origin\", \".destin\")) \n\n\nCreate flow lines for those trips data.\n\n\nCode\nweekendpm_flow &lt;- od2line(flow = weekendpm_hex, \n                    zones = bus_hex,\n                    zone_code = \"BUS_STOP_N\") \n\nsummary(weekendpm_flow)\n\n\n  ORIGIN_BS          DESTIN_BS             TRIPS         \n Length:218487      Length:218487      Min.   :    1.00  \n Class :character   Class :character   1st Qu.:    2.00  \n Mode  :character   Mode  :character   Median :    6.00  \n                                       Mean   :   34.05  \n                                       3rd Qu.:   21.00  \n                                       Max.   :23484.00  \n      geometry.origin        geometry.destin            geometry     \n POLYGON      :218487   POLYGON      :218487   LINESTRING   :218487  \n epsg:3414    :     0   epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0   +proj=tmer...:     0  \n                                                                     \n                                                                     \n                                                                     \n\n\nTo ensure, let’s check any case of origin == destination before continue.\n\n\nCode\nweekendpm_flow %&gt;%\n  filter(ORIGIN_BS == DESTIN_BS)\n\n\nSimple feature collection with 0 features and 3 fields\nActive geometry column: geometry\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n[1] ORIGIN_BS       DESTIN_BS       TRIPS           geometry.origin\n[5] geometry.destin geometry       \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThen we can join the flow data with pairwise distance and use summary to check any case of 0.\n\n\nCode\nweekendpm_dist &lt;- weekendpm_flow %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_BS\" = \"orig\",\n                    \"DESTIN_BS\" = \"dest\"))\n\nsummary(weekendpm_dist)\n\n\n  ORIGIN_BS          DESTIN_BS             TRIPS               dist      \n Length:218487      Length:218487      Min.   :    1.00   Min.   :   50  \n Class :character   Class :character   1st Qu.:    2.00   1st Qu.: 1984  \n Mode  :character   Mode  :character   Median :    6.00   Median : 3750  \n                                       Mean   :   34.05   Mean   : 4830  \n                                       3rd Qu.:   21.00   3rd Qu.: 6750  \n                                       Max.   :23484.00   Max.   :24784  \n      geometry.origin        geometry.destin            geometry     \n POLYGON      :218487   POLYGON      :218487   LINESTRING   :218487  \n epsg:3414    :     0   epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0   +proj=tmer...:     0  \n                                                                     \n                                                                     \n                                                                     \n\n\nTill now we can join the flow data with all 6 propulsive and Attractiveness variables by both origin and destination bus stops.\n\n\nCode\nweekendpm_SIM &lt;- weekendpm_dist %&gt;%\n  left_join(factor_count, by = c(\"ORIGIN_BS\"=\"BUS_STOP_N\")) %&gt;%\n  left_join(factor_count, by = c(\"DESTIN_BS\"=\"BUS_STOP_N\"), \n            suffix = c(\"_orig\", \"_dest\"))\n#weekendpm_SIM[is.na(weekendpm_SIM)] &lt;- 0.1\n\nsummary(weekendpm_SIM)\n\n\n  ORIGIN_BS          DESTIN_BS             TRIPS               dist      \n Length:218487      Length:218487      Min.   :    1.00   Min.   :   50  \n Class :character   Class :character   1st Qu.:    2.00   1st Qu.: 1984  \n Mode  :character   Mode  :character   Median :    6.00   Median : 3750  \n                                       Mean   :   34.05   Mean   : 4830  \n                                       3rd Qu.:   21.00   3rd Qu.: 6750  \n                                       Max.   :23484.00   Max.   :24784  \n                                                                         \n retail_poi_orig   business_poi_orig finance_poi_orig food_poi_orig   \n Min.   :   1.00   Min.   : 1.00     Min.   : 1.00    Min.   : 1.00   \n 1st Qu.:   5.00   1st Qu.: 1.00     1st Qu.: 1.00    1st Qu.: 1.00   \n Median :  18.00   Median : 2.00     Median : 2.00    Median : 2.00   \n Mean   :  74.29   Mean   : 4.25     Mean   : 3.17    Mean   : 3.45   \n 3rd Qu.:  67.00   3rd Qu.: 4.00     3rd Qu.: 4.00    3rd Qu.: 3.00   \n Max.   :1411.00   Max.   :62.00     Max.   :30.00    Max.   :64.00   \n NA's   :177440    NA's   :177440    NA's   :177440   NA's   :177440  \n leisure_poi_orig entertn_poi_orig retail_poi_dest   business_poi_dest\n Min.   : 1.00    Min.   : 1.00    Min.   :   1.00   Min.   : 1.00    \n 1st Qu.: 1.00    1st Qu.: 1.00    1st Qu.:   5.00   1st Qu.: 1.00    \n Median : 2.00    Median : 1.00    Median :  22.00   Median : 2.00    \n Mean   : 2.77    Mean   : 1.44    Mean   :  73.17   Mean   : 4.13    \n 3rd Qu.: 3.00    3rd Qu.: 2.00    3rd Qu.:  72.00   3rd Qu.: 5.00    \n Max.   :30.00    Max.   :10.00    Max.   :1411.00   Max.   :62.00    \n NA's   :177440   NA's   :177440   NA's   :177837    NA's   :177837   \n finance_poi_dest food_poi_dest    leisure_poi_dest entertn_poi_dest\n Min.   : 1.00    Min.   : 1.00    Min.   : 1.00    Min.   : 1.00   \n 1st Qu.: 1.00    1st Qu.: 1.00    1st Qu.: 1.00    1st Qu.: 1.00   \n Median : 2.00    Median : 2.00    Median : 2.00    Median : 1.00   \n Mean   : 3.13    Mean   : 3.27    Mean   : 2.71    Mean   : 1.45   \n 3rd Qu.: 4.00    3rd Qu.: 3.00    3rd Qu.: 3.00    3rd Qu.: 2.00   \n Max.   :30.00    Max.   :64.00    Max.   :30.00    Max.   :10.00   \n NA's   :177837   NA's   :177837   NA's   :177837   NA's   :177837  \n      geometry.origin        geometry.destin            geometry     \n POLYGON      :218487   POLYGON      :218487   LINESTRING   :218487  \n epsg:3414    :     0   epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0   +proj=tmer...:     0  \n                                                                     \n                                                                     \n                                                                     \n                                                                     \n\n\nNow we can calibrate an unconstrained spatial interaction model by using glm().\n\n\nCode\nuncSIM &lt;- glm(formula = TRIPS ~ \n                log(retail_poi_orig) + \n                log(retail_poi_dest) +\n                log(finance_poi_orig) + \n                log(finance_poi_dest) +\n                log(business_poi_orig) + \n                log(business_poi_dest) +\n                log(food_poi_orig) + \n                log(food_poi_dest) +\n                log(leisure_poi_orig) + \n                log(leisure_poi_dest) +\n                log(entertn_poi_orig) + \n                log(entertn_poi_dest) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = weekendpm_SIM,\n              na.action = na.exclude)\nuncSIM\n\n\n\nCall:  glm(formula = TRIPS ~ log(retail_poi_orig) + log(retail_poi_dest) + \n    log(finance_poi_orig) + log(finance_poi_dest) + log(business_poi_orig) + \n    log(business_poi_dest) + log(food_poi_orig) + log(food_poi_dest) + \n    log(leisure_poi_orig) + log(leisure_poi_dest) + log(entertn_poi_orig) + \n    log(entertn_poi_dest) + log(dist), family = poisson(link = \"log\"), \n    data = weekendpm_SIM, na.action = na.exclude)\n\nCoefficients:\n           (Intercept)    log(retail_poi_orig)    log(retail_poi_dest)  \n               6.88976                 0.12268                 0.09547  \n log(finance_poi_orig)   log(finance_poi_dest)  log(business_poi_orig)  \n               0.15330                 0.34699                -0.20719  \nlog(business_poi_dest)      log(food_poi_orig)      log(food_poi_dest)  \n              -0.36212                 0.09849                -0.16741  \n log(leisure_poi_orig)   log(leisure_poi_dest)   log(entertn_poi_orig)  \n              -0.19138                -0.02565                -0.22954  \n log(entertn_poi_dest)               log(dist)  \n               0.29166                -0.50044  \n\nDegrees of Freedom: 7625 Total (i.e. Null);  7612 Residual\n  (210861 observations deleted due to missingness)\nNull Deviance:      645300 \nResidual Deviance: 550100   AIC: 579400\n\n\nThen let’s fit a doubly constrained SIM .\n\n\nCode\ndbcSIM &lt;- glm(formula = TRIPS ~ \n                ORIGIN_BS + \n                DESTIN_BS + \n                log(retail_poi_orig) + \n                log(retail_poi_dest) +\n                log(finance_poi_orig) + \n                log(finance_poi_dest) +\n                log(business_poi_orig) + \n                log(business_poi_dest) +\n                log(food_poi_orig) + \n                log(food_poi_dest) +\n                log(leisure_poi_orig) + \n                log(leisure_poi_dest) +\n                log(entertn_poi_orig) + \n                log(entertn_poi_dest) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = weekendpm_SIM,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_BS + DESTIN_BS + log(retail_poi_orig) + \n    log(retail_poi_dest) + log(finance_poi_orig) + log(finance_poi_dest) + \n    log(business_poi_orig) + log(business_poi_dest) + log(food_poi_orig) + \n    log(food_poi_dest) + log(leisure_poi_orig) + log(leisure_poi_dest) + \n    log(entertn_poi_orig) + log(entertn_poi_dest) + log(dist), \n    family = poisson(link = \"log\"), data = weekendpm_SIM, na.action = na.exclude)\n\nCoefficients: (25 not defined because of singularities)\n                         Estimate Std. Error  z value Pr(&gt;|z|)    \n(Intercept)             8.6940347  0.1096771   79.269  &lt; 2e-16 ***\nORIGIN_BS01119          1.4455614  0.1171765   12.337  &lt; 2e-16 ***\nORIGIN_BS01231          2.3788212  0.1275649   18.648  &lt; 2e-16 ***\nORIGIN_BS01239          0.4899699  0.1352795    3.622 0.000292 ***\nORIGIN_BS01549          1.0051654  0.1592477    6.312 2.76e-10 ***\nORIGIN_BS02089          0.6972652  0.1346040    5.180 2.22e-07 ***\nORIGIN_BS02119          0.2895997  0.1780270    1.627 0.103797    \nORIGIN_BS03011          1.0521767  0.1108133    9.495  &lt; 2e-16 ***\nORIGIN_BS03021          0.7312752  0.1232583    5.933 2.98e-09 ***\nORIGIN_BS03111          0.5844663  0.1147539    5.093 3.52e-07 ***\nORIGIN_BS03218         -0.6878658  0.2520220   -2.729 0.006345 ** \nORIGIN_BS03391         -1.7998571  0.1981955   -9.081  &lt; 2e-16 ***\nORIGIN_BS03511          1.7734691  0.1161177   15.273  &lt; 2e-16 ***\nORIGIN_BS04179          0.8165542  0.1130537    7.223 5.10e-13 ***\nORIGIN_BS04211          0.4845172  0.1704086    2.843 0.004465 ** \nORIGIN_BS04219          0.4440134  0.2718138    1.634 0.102360    \nORIGIN_BS04311          0.5267405  0.1257098    4.190 2.79e-05 ***\nORIGIN_BS05013          2.4068813  0.1053220   22.853  &lt; 2e-16 ***\nORIGIN_BS05023          0.6537482  0.1193632    5.477 4.33e-08 ***\nORIGIN_BS05259          0.5154983  0.1835072    2.809 0.004967 ** \nORIGIN_BS05431         -1.3841562  0.6031486   -2.295 0.021740 *  \nORIGIN_BS06049          0.5169735  0.1167067    4.430 9.44e-06 ***\nORIGIN_BS06141          0.0348134  0.1851212    0.188 0.850832    \nORIGIN_BS06159          1.3111307  0.1143757   11.463  &lt; 2e-16 ***\nORIGIN_BS07011          1.1735526  0.1115437   10.521  &lt; 2e-16 ***\nORIGIN_BS07021          0.6055897  0.1184375    5.113 3.17e-07 ***\nORIGIN_BS07249          0.7668679  0.1371385    5.592 2.25e-08 ***\nORIGIN_BS07331         -1.0670870  0.5872105   -1.817 0.069184 .  \nORIGIN_BS07369         -0.0409940  0.1224158   -0.335 0.737719    \nORIGIN_BS07379          0.9040930  0.1141055    7.923 2.31e-15 ***\nORIGIN_BS07419          1.9155117  0.1056179   18.136  &lt; 2e-16 ***\nORIGIN_BS07539          0.6485357  0.1106455    5.861 4.59e-09 ***\nORIGIN_BS07569          0.6671570  0.2477554    2.693 0.007085 ** \nORIGIN_BS08058          1.4875725  0.1122498   13.252  &lt; 2e-16 ***\nORIGIN_BS08069          1.0404112  0.1089817    9.547  &lt; 2e-16 ***\nORIGIN_BS08121          1.9401180  0.1043277   18.596  &lt; 2e-16 ***\nORIGIN_BS09047          2.1766451  0.1056438   20.604  &lt; 2e-16 ***\nORIGIN_BS09121         -0.5933650  0.1591564   -3.728 0.000193 ***\nORIGIN_BS09149          0.0807636  0.1353388    0.597 0.550674    \nORIGIN_BS09213          2.8314531  0.1091453   25.942  &lt; 2e-16 ***\nORIGIN_BS09219          1.7919199  0.1059958   16.906  &lt; 2e-16 ***\nORIGIN_BS10017          0.3031028  0.1115163    2.718 0.006568 ** \nORIGIN_BS10061          0.0099521  0.1404808    0.071 0.943523    \nORIGIN_BS10099          1.4657398  0.1099899   13.326  &lt; 2e-16 ***\nORIGIN_BS10129          0.2693664  0.1838592    1.465 0.142902    \nORIGIN_BS10139          1.4518777  0.1099289   13.207  &lt; 2e-16 ***\nORIGIN_BS10191          1.0613196  0.1100144    9.647  &lt; 2e-16 ***\nORIGIN_BS10199          0.9994983  0.1156161    8.645  &lt; 2e-16 ***\nORIGIN_BS10249         -0.4195939  0.1505452   -2.787 0.005317 ** \nORIGIN_BS10281          0.6534066  0.1127892    5.793 6.91e-09 ***\nORIGIN_BS10299          1.3455135  0.1093735   12.302  &lt; 2e-16 ***\nORIGIN_BS10321          1.0470575  0.1248810    8.384  &lt; 2e-16 ***\nORIGIN_BS10341          0.6304998  0.1222451    5.158 2.50e-07 ***\nORIGIN_BS10381          0.0567334  0.1436902    0.395 0.692967    \nORIGIN_BS10449          0.2907734  0.1550905    1.875 0.060812 .  \nORIGIN_BS10469          0.8687727  0.2034008    4.271 1.94e-05 ***\nORIGIN_BS11019          1.4104245  0.1103978   12.776  &lt; 2e-16 ***\nORIGIN_BS11031         -0.4493729  0.1420685   -3.163 0.001561 ** \nORIGIN_BS11041          0.4027865  0.1243042    3.240 0.001194 ** \nORIGIN_BS11049          0.7951127  0.1171784    6.785 1.16e-11 ***\nORIGIN_BS11081         -0.3499503  0.1872795   -1.869 0.061679 .  \nORIGIN_BS11099         -0.6825509  0.1563236   -4.366 1.26e-05 ***\nORIGIN_BS11131         -0.0717631  0.1512617   -0.474 0.635193    \nORIGIN_BS11171         -0.6126212  0.1373026   -4.462 8.13e-06 ***\nORIGIN_BS11201         -0.7604513  0.1501219   -5.066 4.07e-07 ***\nORIGIN_BS11211         -1.0951301  0.1775962   -6.166 6.99e-10 ***\nORIGIN_BS11221         -0.7032781  0.1741111   -4.039 5.36e-05 ***\nORIGIN_BS11271         -0.5538819  0.1883238   -2.941 0.003270 ** \nORIGIN_BS11309         -0.8477546  0.2431368   -3.487 0.000489 ***\nORIGIN_BS11339         -1.0344296  0.2521282   -4.103 4.08e-05 ***\nORIGIN_BS11369          1.7725713  0.1058039   16.753  &lt; 2e-16 ***\nORIGIN_BS11409         -0.0558473  0.1612209   -0.346 0.729040    \nORIGIN_BS11459          0.4187352  0.1489382    2.811 0.004932 ** \nORIGIN_BS11519          1.1803926  0.1095773   10.772  &lt; 2e-16 ***\nORIGIN_BS11529          0.9993984  0.1209657    8.262  &lt; 2e-16 ***\nORIGIN_BS11531         -0.6128923  0.1382321   -4.434 9.26e-06 ***\nORIGIN_BS11589          0.4438728  0.1418119    3.130 0.001748 ** \nORIGIN_BS12029          0.2650759  0.1389107    1.908 0.056359 .  \nORIGIN_BS12031          0.3764455  0.1321845    2.848 0.004401 ** \nORIGIN_BS12069         -0.8078448  0.1283225   -6.295 3.07e-10 ***\nORIGIN_BS12071          0.0712731  0.1409289    0.506 0.613041    \nORIGIN_BS12109         -0.4446419  0.1373601   -3.237 0.001208 ** \nORIGIN_BS12119         -0.7486878  0.2584211   -2.897 0.003766 ** \nORIGIN_BS12129          2.2381074  0.1310617   17.077  &lt; 2e-16 ***\nORIGIN_BS12149          0.2489475  0.1581804    1.574 0.115529    \nORIGIN_BS12169          0.7542043  0.1623327    4.646 3.38e-06 ***\nORIGIN_BS12199          0.4962580  0.1669062    2.973 0.002946 ** \nORIGIN_BS12201         -0.5559513  0.2117826   -2.625 0.008662 ** \nORIGIN_BS12209          0.9720760  0.1139350    8.532  &lt; 2e-16 ***\nORIGIN_BS13029          0.3442373  0.1288497    2.672 0.007549 ** \nORIGIN_BS13089          0.1368460  0.1674923    0.817 0.413912    \nORIGIN_BS13141          0.1695228  0.1323704    1.281 0.200310    \nORIGIN_BS13159          0.0219478  0.2243952    0.098 0.922084    \nORIGIN_BS14019          0.9794071  0.2056196    4.763 1.91e-06 ***\nORIGIN_BS14071          0.2221282  0.3956986    0.561 0.574554    \nORIGIN_BS14119          1.2212539  0.1088913   11.215  &lt; 2e-16 ***\nORIGIN_BS14159          0.4742173  0.1203809    3.939 8.17e-05 ***\nORIGIN_BS14171         -0.5689355  0.1634750   -3.480 0.000501 ***\nORIGIN_BS14189         -0.0708158  0.1376572   -0.514 0.606947    \nORIGIN_BS14199          0.0980867  0.2641325    0.371 0.710374    \nORIGIN_BS14219         -0.7957534  0.2679885   -2.969 0.002984 ** \nORIGIN_BS14221          0.3754679  0.1866519    2.012 0.044263 *  \nORIGIN_BS14241          0.9751664  0.1282633    7.603 2.90e-14 ***\nORIGIN_BS14259         -0.2905724  0.1609559   -1.805 0.071029 .  \nORIGIN_BS14291          0.6458858  0.1331286    4.852 1.22e-06 ***\nORIGIN_BS15071          1.1458168  0.2364666    4.846 1.26e-06 ***\nORIGIN_BS15091          0.4479804  0.2896216    1.547 0.121917    \nORIGIN_BS15121         -0.7919209  0.4610953   -1.717 0.085892 .  \nORIGIN_BS15159         -0.7627557  0.1754051   -4.349 1.37e-05 ***\nORIGIN_BS15209         -0.2848895  0.1435715   -1.984 0.047222 *  \nORIGIN_BS16029         -1.6897240  0.2902595   -5.821 5.83e-09 ***\nORIGIN_BS16049         -0.0060833  0.1446590   -0.042 0.966456    \nORIGIN_BS16089          0.4781671  0.1254639    3.811 0.000138 ***\nORIGIN_BS16099         -0.1902215  0.1578862   -1.205 0.228280    \nORIGIN_BS16109         -0.0153895  0.1994594   -0.077 0.938499    \nORIGIN_BS16159          0.4389329  0.1431403    3.066 0.002166 ** \nORIGIN_BS16179          0.6666887  0.1402725    4.753 2.01e-06 ***\nORIGIN_BS16239          0.5237703  0.2354177    2.225 0.026091 *  \nORIGIN_BS17011         -0.4136902  0.2080909   -1.988 0.046809 *  \nORIGIN_BS17039          0.5605315  0.1236791    4.532 5.84e-06 ***\nORIGIN_BS17049          1.3491177  0.1103045   12.231  &lt; 2e-16 ***\nORIGIN_BS17059          0.6304384  0.1099446    5.734 9.80e-09 ***\nORIGIN_BS17061          1.2961804  0.1264111   10.254  &lt; 2e-16 ***\nORIGIN_BS17091          0.9378681  0.1206349    7.774 7.58e-15 ***\nORIGIN_BS17101          0.3094947  0.1411009    2.193 0.028277 *  \nORIGIN_BS17179          3.1729987  0.1039508   30.524  &lt; 2e-16 ***\nORIGIN_BS17181          0.2302955  0.1248906    1.844 0.065186 .  \nORIGIN_BS17189          0.3890650  0.1106458    3.516 0.000438 ***\nORIGIN_BS17309         -0.3380075  0.2325246   -1.454 0.146046    \nORIGIN_BS17311          0.9201337  0.2568665    3.582 0.000341 ***\nORIGIN_BS17339          0.4332563  0.2276087    1.904 0.056973 .  \nORIGIN_BS17389         -0.3485935  0.1482209   -2.352 0.018680 *  \nORIGIN_BS18011          0.6719732  0.1338731    5.019 5.18e-07 ***\nORIGIN_BS18059         -0.6913325  0.3711235   -1.863 0.062489 .  \nORIGIN_BS18141          0.0665615  0.1593577    0.418 0.676177    \nORIGIN_BS18149         -0.5189364  0.1402435   -3.700 0.000215 ***\nORIGIN_BS18191         -1.3116099  1.0103099   -1.298 0.194210    \nORIGIN_BS18301          0.0741255  0.4018315    0.184 0.853645    \nORIGIN_BS19059          0.3177340  0.1805569    1.760 0.078451 .  \nORIGIN_BS19091          0.2098892  0.1612832    1.301 0.193132    \nORIGIN_BS20031         -0.5383264  0.1331414   -4.043 5.27e-05 ***\nORIGIN_BS20051          0.3271505  0.1516036    2.158 0.030933 *  \nORIGIN_BS20089          0.0617535  0.1306863    0.473 0.636547    \nORIGIN_BS20239          2.6947047  0.1051288   25.632  &lt; 2e-16 ***\nORIGIN_BS20281          1.0979377  0.1286399    8.535  &lt; 2e-16 ***\nORIGIN_BS20299          1.3931578  0.1109722   12.554  &lt; 2e-16 ***\nORIGIN_BS20319          2.6739612  0.2619978   10.206  &lt; 2e-16 ***\nORIGIN_BS21019          2.1726852  0.1068448   20.335  &lt; 2e-16 ***\nORIGIN_BS21049          0.7924707  0.2159638    3.669 0.000243 ***\nORIGIN_BS21051         -1.0153259  0.3350946   -3.030 0.002446 ** \nORIGIN_BS21079          0.0304589  0.1478083    0.206 0.836736    \nORIGIN_BS21109          1.4003450  0.1208663   11.586  &lt; 2e-16 ***\nORIGIN_BS21159         -0.7402338  0.2235109   -3.312 0.000927 ***\nORIGIN_BS21179          0.4985104  0.1135467    4.390 1.13e-05 ***\nORIGIN_BS21301          0.4184349  0.4605648    0.909 0.363601    \nORIGIN_BS21331         -1.6919929  0.6288723   -2.691 0.007134 ** \nORIGIN_BS21381         -1.6660199  0.2421971   -6.879 6.04e-12 ***\nORIGIN_BS21389         -0.7541691  0.4690928   -1.608 0.107897    \nORIGIN_BS21429          0.8855004  0.1272993    6.956 3.50e-12 ***\nORIGIN_BS21499         -1.6850533  0.5139568   -3.279 0.001043 ** \nORIGIN_BS21501         -1.6919929  0.6288723   -2.691 0.007134 ** \nORIGIN_BS21531         -0.3772634  0.2875028   -1.312 0.189450    \nORIGIN_BS21561          0.1793188  0.1256685    1.427 0.153603    \nORIGIN_BS21611          0.7631682  0.1218720    6.262 3.80e-10 ***\nORIGIN_BS21631         -0.3294799  0.1569506   -2.099 0.035794 *  \nORIGIN_BS21651         -1.8083647  0.2402626   -7.527 5.21e-14 ***\nORIGIN_BS21771         -1.3189172  0.2016172   -6.542 6.08e-11 ***\nORIGIN_BS22051          0.1248767  0.5200465    0.240 0.810233    \nORIGIN_BS22071         -0.9401082  0.6919412   -1.359 0.174256    \nORIGIN_BS22219         -5.9025657  1.7092676   -3.453 0.000554 ***\nORIGIN_BS22241          0.1700866  0.5037043    0.338 0.735611    \nORIGIN_BS22251          1.0976777  0.4660144    2.355 0.018500 *  \nORIGIN_BS22349          1.2790911  0.1483803    8.620  &lt; 2e-16 ***\nORIGIN_BS22479         -1.7504969  1.0057260   -1.741 0.081766 .  \nORIGIN_BS22509         -0.1307515  0.2087005   -0.627 0.530985    \nORIGIN_BS22539          1.6624266  0.3701393    4.491 7.08e-06 ***\nORIGIN_BS22559         -0.4771051  1.1389287   -0.419 0.675284    \nORIGIN_BS22569          2.0306662  0.6633085    3.061 0.002203 ** \nORIGIN_BS23019          0.2736960  0.7585016    0.361 0.718221    \nORIGIN_BS23069         -2.1246570  0.4698474   -4.522 6.13e-06 ***\nORIGIN_BS23081         -1.6557784  0.4179154   -3.962 7.43e-05 ***\nORIGIN_BS23151         -4.3360584  1.3704157   -3.164 0.001556 ** \nORIGIN_BS23251         -1.5283732  0.4814054   -3.175 0.001499 ** \nORIGIN_BS23321         -1.0831088  0.4814272   -2.250 0.024462 *  \nORIGIN_BS23371          0.3776960  0.2795112    1.351 0.176608    \nORIGIN_BS23441         -0.0135531  0.3773259   -0.036 0.971347    \nORIGIN_BS23481         -3.7565255  1.1640347   -3.227 0.001250 ** \nORIGIN_BS23491         -0.4289417  1.1740553   -0.365 0.714850    \nORIGIN_BS24089         -3.7255978  1.0586029   -3.519 0.000433 ***\nORIGIN_BS24129         -3.3005947  1.5599933   -2.116 0.034364 *  \nORIGIN_BS24289         -2.1124927  0.6088102   -3.470 0.000521 ***\nORIGIN_BS24389         -2.8825762  1.0057125   -2.866 0.004154 ** \nORIGIN_BS24451         -0.0726941  0.4075810   -0.178 0.858444    \nORIGIN_BS24461         -0.6556274  0.4599821   -1.425 0.154061    \nORIGIN_BS24499         -4.5839411  1.5420936   -2.973 0.002953 ** \nORIGIN_BS24559         -1.9549103  0.6738010   -2.901 0.003716 ** \nORIGIN_BS24571         -2.3964253  1.5576935   -1.538 0.123940    \nORIGIN_BS24621         -2.8825762  1.0057125   -2.866 0.004154 ** \nORIGIN_BS24631         -0.6498728  0.3833266   -1.695 0.090009 .  \nORIGIN_BS24641         -3.4987871  1.0586075   -3.305 0.000949 ***\nORIGIN_BS24651         -2.6269855  0.6737755   -3.899 9.66e-05 ***\nORIGIN_BS24691         -0.7153840  0.4445044   -1.609 0.107530    \nORIGIN_BS25069          0.4535130  0.3129055    1.449 0.147237    \nORIGIN_BS25091         -1.9549103  0.6738010   -2.901 0.003716 ** \nORIGIN_BS25109          0.0537526  0.2791701    0.193 0.847316    \nORIGIN_BS25121          0.2784683  0.3873947    0.719 0.472250    \nORIGIN_BS25161         -0.7578727  0.4382733   -1.729 0.083769 .  \nORIGIN_BS25191         -0.9338377  0.4444918   -2.101 0.035649 *  \nORIGIN_BS25249         -4.7560324  0.5952381   -7.990 1.35e-15 ***\nORIGIN_BS25349         -1.3126065  0.4247376   -3.090 0.001999 ** \nORIGIN_BS25429         -0.7474093  0.4220519   -1.771 0.076578 .  \nORIGIN_BS25469         -0.5291348  0.2836452   -1.865 0.062114 .  \nORIGIN_BS25519         -2.7757478  0.4400965   -6.307 2.84e-10 ***\nORIGIN_BS26121         -0.8968616  0.4814385   -1.863 0.062479 .  \nORIGIN_BS26241          0.8482629  0.2721139    3.117 0.001825 ** \nORIGIN_BS26269         -1.1430815  0.2934669   -3.895 9.82e-05 ***\nORIGIN_BS26289         -4.1502478  0.5697352   -7.285 3.23e-13 ***\nORIGIN_BS26311          1.6634747  0.2685292    6.195 5.84e-10 ***\nORIGIN_BS26349          2.4083241  0.2645448    9.104  &lt; 2e-16 ***\nORIGIN_BS26389         -0.2448423  0.2249794   -1.088 0.276468    \nORIGIN_BS26461          2.9372027  0.2640787   11.122  &lt; 2e-16 ***\nORIGIN_BS27021         -1.8798121  0.4325014   -4.346 1.38e-05 ***\nORIGIN_BS27109         -0.4154514  0.5196421   -0.799 0.424003    \nORIGIN_BS27141          0.1132914  0.2419589    0.468 0.639623    \nORIGIN_BS27149         -1.1277387  0.2364761   -4.769 1.85e-06 ***\nORIGIN_BS27209         -0.8830568  0.2755842   -3.204 0.001354 ** \nORIGIN_BS27219          1.3901212  0.1665651    8.346  &lt; 2e-16 ***\nORIGIN_BS27251          0.3158862  0.2704875    1.168 0.242871    \nORIGIN_BS27279          1.1562682  0.1595246    7.248 4.22e-13 ***\nORIGIN_BS27341          2.1155790  0.2309881    9.159  &lt; 2e-16 ***\nORIGIN_BS27419          2.9184951  0.5949996    4.905 9.34e-07 ***\nORIGIN_BS27421         -2.0169589  0.6394352   -3.154 0.001609 ** \nORIGIN_BS27459          0.5600814  0.1294452    4.327 1.51e-05 ***\nORIGIN_BS28031          0.7445577  0.1189383    6.260 3.85e-10 ***\nORIGIN_BS28059          1.6111652  0.1185042   13.596  &lt; 2e-16 ***\nORIGIN_BS28089          1.2731639  0.1142360   11.145  &lt; 2e-16 ***\nORIGIN_BS28099          0.8386704  0.1139353    7.361 1.83e-13 ***\nORIGIN_BS28211          2.3869336  0.1238036   19.280  &lt; 2e-16 ***\nORIGIN_BS28251         -0.0253921  0.1343743   -0.189 0.850120    \nORIGIN_BS28271         -1.2028742  0.1766813   -6.808 9.89e-12 ***\nORIGIN_BS28309         -1.0428652  0.4616724   -2.259 0.023891 *  \nORIGIN_BS28361         -2.3746962  0.3106929   -7.643 2.12e-14 ***\nORIGIN_BS28409          1.2270793  0.1128263   10.876  &lt; 2e-16 ***\nORIGIN_BS28441          0.2119763  0.1147204    1.848 0.064636 .  \nORIGIN_BS28491          1.4818496  0.1099918   13.472  &lt; 2e-16 ***\nORIGIN_BS28511          1.7423114  0.1105735   15.757  &lt; 2e-16 ***\nORIGIN_BS28531          0.5148562  0.1324908    3.886 0.000102 ***\nORIGIN_BS28649          1.8877558  0.1078021   17.511  &lt; 2e-16 ***\nORIGIN_BS28669          1.4930502  0.1151168   12.970  &lt; 2e-16 ***\nORIGIN_BS28689          2.3090244  0.1092669   21.132  &lt; 2e-16 ***\nORIGIN_BS28701         -0.8044365  0.1738421   -4.627 3.70e-06 ***\nORIGIN_BS29019          2.9070521  0.3013350    9.647  &lt; 2e-16 ***\nORIGIN_BS29031          3.6264775  0.1061108   34.176  &lt; 2e-16 ***\nORIGIN_BS29039         -2.2123355  0.2515232   -8.796  &lt; 2e-16 ***\nORIGIN_BS29059         -0.2627275  0.2004469   -1.311 0.189956    \nORIGIN_BS29089          2.8993502  0.2753002   10.532  &lt; 2e-16 ***\nORIGIN_BS29101         -1.0048994  0.2880159   -3.489 0.000485 ***\nORIGIN_BS30049         -1.2661666  0.3604942   -3.512 0.000444 ***\nORIGIN_BS30099         -0.6775187  0.4008780   -1.690 0.091011 .  \nORIGIN_BS30109         -3.7822872  1.0502265   -3.601 0.000317 ***\nORIGIN_BS30129         -0.8885752  0.5525131   -1.608 0.107782    \nORIGIN_BS33049          0.4244643  0.5370370    0.790 0.429305    \nORIGIN_BS40011          2.7039263  0.1055078   25.628  &lt; 2e-16 ***\nORIGIN_BS40021         -0.4377403  0.1973342   -2.218 0.026536 *  \nORIGIN_BS40031          1.0571493  0.1434202    7.371 1.69e-13 ***\nORIGIN_BS40049         -0.3180416  0.1329561   -2.392 0.016753 *  \nORIGIN_BS40069          0.9657650  0.1119743    8.625  &lt; 2e-16 ***\nORIGIN_BS40071          0.2552519  0.1850853    1.379 0.167863    \nORIGIN_BS40089         -0.0506534  0.1290479   -0.393 0.694677    \nORIGIN_BS40101          1.2389473  0.1211270   10.228  &lt; 2e-16 ***\nORIGIN_BS40191          1.7024998  0.1258586   13.527  &lt; 2e-16 ***\nORIGIN_BS40209          2.3936709  0.1055810   22.671  &lt; 2e-16 ***\nORIGIN_BS40221          0.3317998  0.2192691    1.513 0.130227    \nORIGIN_BS40249         -0.9237569  0.2375293   -3.889 0.000101 ***\nORIGIN_BS41029          1.5612425  0.1114489   14.009  &lt; 2e-16 ***\nORIGIN_BS41041          1.2874511  0.1160300   11.096  &lt; 2e-16 ***\nORIGIN_BS41069          0.5088265  0.1205136    4.222 2.42e-05 ***\nORIGIN_BS41079          0.5067046  0.1219127    4.156 3.23e-05 ***\nORIGIN_BS41119          0.4851588  0.1220048    3.977 6.99e-05 ***\nORIGIN_BS41139          0.8069907  0.1198391    6.734 1.65e-11 ***\nORIGIN_BS42011          0.7439821  0.1193538    6.233 4.56e-10 ***\nORIGIN_BS42019          1.2271683  0.1125529   10.903  &lt; 2e-16 ***\nORIGIN_BS42039          0.8045245  0.1149415    6.999 2.57e-12 ***\nORIGIN_BS42051          2.0192822  0.1075220   18.780  &lt; 2e-16 ***\nORIGIN_BS42099          1.7975308  0.1099103   16.355  &lt; 2e-16 ***\nORIGIN_BS42111         -0.5090053  0.1956635   -2.601 0.009284 ** \nORIGIN_BS42131         -0.8889807  0.1968060   -4.517 6.27e-06 ***\nORIGIN_BS42141         -0.8979336  0.1909213   -4.703 2.56e-06 ***\nORIGIN_BS42149         -0.3615062  0.1253717   -2.883 0.003933 ** \nORIGIN_BS42161          0.9648738  0.1128351    8.551  &lt; 2e-16 ***\nORIGIN_BS42199         -0.2086330  0.1790700   -1.165 0.243982    \nORIGIN_BS42229          0.8839576  0.1308794    6.754 1.44e-11 ***\nORIGIN_BS43021          1.0225581  0.1518974    6.732 1.67e-11 ***\nORIGIN_BS43061          2.0416763  0.1211114   16.858  &lt; 2e-16 ***\nORIGIN_BS43111         -0.7822066  0.2816825   -2.777 0.005488 ** \nORIGIN_BS43119         -0.3805095  0.1479175   -2.572 0.010098 *  \nORIGIN_BS43179          0.3893496  0.1156525    3.367 0.000761 ***\nORIGIN_BS43191          0.8660344  0.1257626    6.886 5.73e-12 ***\nORIGIN_BS43219          1.0916432  0.1226417    8.901  &lt; 2e-16 ***\nORIGIN_BS43221         -0.2172181  0.2438962   -0.891 0.373135    \nORIGIN_BS43231          0.5425889  0.1303881    4.161 3.16e-05 ***\nORIGIN_BS43239         -0.5823074  0.2184687   -2.665 0.007690 ** \nORIGIN_BS43291          0.3503172  0.1471551    2.381 0.017285 *  \nORIGIN_BS43311          0.7103580  0.1861998    3.815 0.000136 ***\nORIGIN_BS43321         -0.0681746  0.2240387   -0.304 0.760901    \nORIGIN_BS43349          1.0451749  0.1273750    8.205 2.30e-16 ***\nORIGIN_BS43511          0.1872895  0.1377169    1.360 0.173843    \nORIGIN_BS43541          1.9508855  0.2742082    7.115 1.12e-12 ***\nORIGIN_BS43561         -4.3912360  1.0360645   -4.238 2.25e-05 ***\nORIGIN_BS43571          4.0043390  0.3215744   12.452  &lt; 2e-16 ***\nORIGIN_BS43609          0.6274877  0.1940615    3.233 0.001223 ** \nORIGIN_BS43611          0.2810353  0.1961420    1.433 0.151911    \nORIGIN_BS43629          0.3910654  0.1279661    3.056 0.002243 ** \nORIGIN_BS43639         -0.8627699  0.5114899   -1.687 0.091646 .  \nORIGIN_BS43701          0.0266729  0.1390129    0.192 0.847841    \nORIGIN_BS43811          2.0019151  0.1215493   16.470  &lt; 2e-16 ***\nORIGIN_BS43821          1.0931317  0.1291887    8.462  &lt; 2e-16 ***\nORIGIN_BS44029          1.6557685  0.1078821   15.348  &lt; 2e-16 ***\nORIGIN_BS44079          0.7838761  0.1659235    4.724 2.31e-06 ***\nORIGIN_BS44111         -0.3253557  0.2253148   -1.444 0.148738    \nORIGIN_BS44151         -1.0705194  0.1798461   -5.952 2.64e-09 ***\nORIGIN_BS44171         -2.7804039  0.4240135   -6.557 5.48e-11 ***\nORIGIN_BS44229          0.7787760  0.1129141    6.897 5.31e-12 ***\nORIGIN_BS44261          2.9791805  0.1072104   27.788  &lt; 2e-16 ***\nORIGIN_BS44299          1.8853016  0.1240517   15.198  &lt; 2e-16 ***\nORIGIN_BS44411         -0.7308208  0.6836910   -1.069 0.285099    \nORIGIN_BS44519          1.7088736  0.3210092    5.323 1.02e-07 ***\nORIGIN_BS44549         -0.7808079  0.1730378   -4.512 6.41e-06 ***\nORIGIN_BS44641         -0.2175778  0.1730757   -1.257 0.208708    \nORIGIN_BS44651         -2.7625184  0.3819469   -7.233 4.73e-13 ***\nORIGIN_BS44701          1.3574290  0.1277330   10.627  &lt; 2e-16 ***\nORIGIN_BS44801         -0.5902449  0.1830986   -3.224 0.001266 ** \nORIGIN_BS44919          0.0008064  0.2323085    0.003 0.997230    \nORIGIN_BS45071          0.8493233  0.2157485    3.937 8.26e-05 ***\nORIGIN_BS45079          0.7337999  0.1210599    6.061 1.35e-09 ***\nORIGIN_BS45099         -1.5004881  0.1791797   -8.374  &lt; 2e-16 ***\nORIGIN_BS45251         -2.2601956  1.1148482   -2.027 0.042626 *  \nORIGIN_BS45279          0.1081049  1.0592479    0.102 0.918711    \nORIGIN_BS45329          2.0303802  1.0525124    1.929 0.053721 .  \nORIGIN_BS45359         -3.2232513  0.6308032   -5.110 3.23e-07 ***\nORIGIN_BS45361         -0.5850328  0.2760773   -2.119 0.034083 *  \nORIGIN_BS45399         -1.1221971  1.0477632   -1.071 0.284151    \nORIGIN_BS45411          0.7999242  1.0460307    0.765 0.444436    \nORIGIN_BS46029         -2.3806869  0.3217271   -7.400 1.36e-13 ***\nORIGIN_BS46049         -3.6109695  1.0065552   -3.587 0.000334 ***\nORIGIN_BS46059         -1.3384612  0.2646893   -5.057 4.27e-07 ***\nORIGIN_BS46088         -0.5036378  0.1474792   -3.415 0.000638 ***\nORIGIN_BS46111          0.6021373  0.1581794    3.807 0.000141 ***\nORIGIN_BS46171          2.2643932  0.1694004   13.367  &lt; 2e-16 ***\nORIGIN_BS46179         -1.1023600  0.2369310   -4.653 3.28e-06 ***\nORIGIN_BS46199         -1.6990174  0.2886938   -5.885 3.98e-09 ***\nORIGIN_BS46261          0.2180559  0.1767138    1.234 0.217222    \nORIGIN_BS46271         -0.4523117  0.2930439   -1.543 0.122711    \nORIGIN_BS46279          1.1374478  0.1688389    6.737 1.62e-11 ***\nORIGIN_BS46321          1.1491853  0.2313389    4.968 6.78e-07 ***\nORIGIN_BS46359         -1.7491691  0.3090064   -5.661 1.51e-08 ***\nORIGIN_BS46371          2.0410081  0.1710872   11.930  &lt; 2e-16 ***\nORIGIN_BS46381         -0.9971337  0.1820861   -5.476 4.35e-08 ***\nORIGIN_BS46391         -1.1611523  0.1738571   -6.679 2.41e-11 ***\nORIGIN_BS46419          1.1769393  0.2372587    4.961 7.03e-07 ***\nORIGIN_BS46449         -1.2415275  0.1688257   -7.354 1.93e-13 ***\nORIGIN_BS46469          1.3396091  0.1491658    8.981  &lt; 2e-16 ***\nORIGIN_BS46549         -0.0098519  0.1281673   -0.077 0.938729    \nORIGIN_BS46571          0.4465456  0.3916984    1.140 0.254276    \nORIGIN_BS46719         -0.4212304  0.2539766   -1.659 0.097209 .  \nORIGIN_BS46739          0.5686288  0.1771767    3.209 0.001330 ** \nORIGIN_BS46781         -3.3926502  0.2333531  -14.539  &lt; 2e-16 ***\nORIGIN_BS46799          0.3512030  0.2588758    1.357 0.174893    \nORIGIN_BS46879         -2.7534506  0.7474346   -3.684 0.000230 ***\nORIGIN_BS46931         -2.7573758  1.0463877   -2.635 0.008410 ** \nORIGIN_BS47041          0.8188533  0.1745951    4.690 2.73e-06 ***\nORIGIN_BS47061         -2.5582115  0.3079722   -8.307  &lt; 2e-16 ***\nORIGIN_BS47071         -1.3908426  0.1702979   -8.167 3.16e-16 ***\nORIGIN_BS47091         -1.0895395  0.4258057   -2.559 0.010504 *  \nORIGIN_BS47511          1.0668695  0.3307771    3.225 0.001258 ** \nORIGIN_BS47541         -0.6158423  0.3367229   -1.829 0.067410 .  \nORIGIN_BS47551          1.6402155  0.2428448    6.754 1.44e-11 ***\nORIGIN_BS47609         -0.4478666  0.2695435   -1.662 0.096598 .  \nORIGIN_BS47629          0.2835278  0.1462212    1.939 0.052497 .  \nORIGIN_BS47809          1.6263144  0.1597813   10.178  &lt; 2e-16 ***\nORIGIN_BS47821         -1.5526697  0.1745594   -8.895  &lt; 2e-16 ***\nORIGIN_BS48131          2.7374124  0.1154518   23.710  &lt; 2e-16 ***\nORIGIN_BS48141          1.1616722  0.1719610    6.755 1.42e-11 ***\nORIGIN_BS49021         -3.1674498  1.0240728   -3.093 0.001981 ** \nORIGIN_BS49039         -1.5993859  1.3905001   -1.150 0.250052    \nORIGIN_BS49051         -3.3859036  1.0240700   -3.306 0.000945 ***\nORIGIN_BS49069          0.5034231  1.0112041    0.498 0.618593    \nORIGIN_BS49101         -0.4665405  0.2854784   -1.634 0.102208    \nORIGIN_BS49111         -2.1371037  0.3998527   -5.345 9.06e-08 ***\nORIGIN_BS49141         -0.1197920  0.6119041   -0.196 0.844791    \nORIGIN_BS49159         -1.2324176  0.9351445   -1.318 0.187540    \nORIGIN_BS49189         -2.9035391  0.5467583   -5.310 1.09e-07 ***\nORIGIN_BS49209         -0.5799911  0.3338527   -1.737 0.082340 .  \nORIGIN_BS49249         -0.8200693  0.3928301   -2.088 0.036835 *  \nORIGIN_BS50021          1.8280095  0.1104745   16.547  &lt; 2e-16 ***\nORIGIN_BS50059          1.1070883  0.1138219    9.726  &lt; 2e-16 ***\nORIGIN_BS50071          0.0757415  0.1455271    0.520 0.602741    \nORIGIN_BS50079         -0.6624719  0.1737405   -3.813 0.000137 ***\nORIGIN_BS50121          0.5980742  0.1239399    4.826 1.40e-06 ***\nORIGIN_BS50169          0.1654659  0.1239151    1.335 0.181773    \nORIGIN_BS50211          1.7510498  0.1054766   16.601  &lt; 2e-16 ***\nORIGIN_BS50279          1.3649659  0.1547488    8.821  &lt; 2e-16 ***\nORIGIN_BS50321          1.2305880  0.1627362    7.562 3.97e-14 ***\nORIGIN_BS50991          2.6189791  0.1148190   22.810  &lt; 2e-16 ***\nORIGIN_BS51039         -1.5277828  0.1986948   -7.689 1.48e-14 ***\nORIGIN_BS51119         -0.9771341  0.2183427   -4.475 7.63e-06 ***\nORIGIN_BS52011         -0.3714777  0.3934611   -0.944 0.345104    \nORIGIN_BS52061         -0.1680193  0.1461864   -1.149 0.250412    \nORIGIN_BS52071          2.0565407  0.1090974   18.850  &lt; 2e-16 ***\nORIGIN_BS52089          0.9173101  0.1504431    6.097 1.08e-09 ***\nORIGIN_BS52109          0.6724648  0.1122230    5.992 2.07e-09 ***\nORIGIN_BS52179          2.2793524  0.2082286   10.946  &lt; 2e-16 ***\nORIGIN_BS52199          2.1011385  0.3965281    5.299 1.17e-07 ***\nORIGIN_BS52211          0.0257806  0.2972948    0.087 0.930896    \nORIGIN_BS52231          1.7562853  0.1378189   12.743  &lt; 2e-16 ***\nORIGIN_BS52299         -1.1306161  0.3501006   -3.229 0.001240 ** \nORIGIN_BS52309         -5.5229709  1.0057682   -5.491 3.99e-08 ***\nORIGIN_BS52351          0.2560187  0.2020829    1.267 0.205191    \nORIGIN_BS52389         -1.5360812  0.4220497   -3.640 0.000273 ***\nORIGIN_BS52401         -1.8313169  0.1794083  -10.208  &lt; 2e-16 ***\nORIGIN_BS52449          2.6283305  0.1833093   14.338  &lt; 2e-16 ***\nORIGIN_BS52479          0.0971987  0.1555229    0.625 0.531984    \nORIGIN_BS53009          1.9449183  0.1044647   18.618  &lt; 2e-16 ***\nORIGIN_BS53039          0.4192418  0.1204570    3.480 0.000501 ***\nORIGIN_BS53059          1.7995463  0.1080187   16.660  &lt; 2e-16 ***\nORIGIN_BS53079          0.7040340  0.1241065    5.673 1.40e-08 ***\nORIGIN_BS53099         -0.0974917  0.1570315   -0.621 0.534704    \nORIGIN_BS53111         -1.9834156  0.4598570   -4.313 1.61e-05 ***\nORIGIN_BS53121          2.1650634  0.1110345   19.499  &lt; 2e-16 ***\nORIGIN_BS53199          0.5068904  0.1359501    3.729 0.000193 ***\nORIGIN_BS53209         -0.5182511  0.2253889   -2.299 0.021484 *  \nORIGIN_BS53211          0.0036776  0.1772739    0.021 0.983449    \nORIGIN_BS53281          5.1902354  0.1066838   48.651  &lt; 2e-16 ***\nORIGIN_BS53299          2.0878931  0.1230301   16.971  &lt; 2e-16 ***\nORIGIN_BS53351         -0.1046130  0.1325007   -0.790 0.429803    \nORIGIN_BS53359          2.4177930  0.1145175   21.113  &lt; 2e-16 ***\nORIGIN_BS53371          0.4316753  0.1159750    3.722 0.000198 ***\nORIGIN_BS53379          1.6424314  0.1142463   14.376  &lt; 2e-16 ***\nORIGIN_BS53389          2.5650183  0.1089055   23.553  &lt; 2e-16 ***\nORIGIN_BS53419          0.8509021  0.1587165    5.361 8.27e-08 ***\nORIGIN_BS54011          1.6040208  0.1434435   11.182  &lt; 2e-16 ***\nORIGIN_BS54049         -1.6841520  0.1552252  -10.850  &lt; 2e-16 ***\nORIGIN_BS54051          0.1259696  0.2309264    0.545 0.585412    \nORIGIN_BS54109          0.3542499  0.1445915    2.450 0.014285 *  \nORIGIN_BS54169          1.3025500  0.1818226    7.164 7.84e-13 ***\nORIGIN_BS54189          1.8254640  0.1278858   14.274  &lt; 2e-16 ***\nORIGIN_BS54229          0.3971979  0.1225247    3.242 0.001188 ** \nORIGIN_BS54247          1.1315682  0.1190797    9.503  &lt; 2e-16 ***\nORIGIN_BS54279          0.5244014  0.1400443    3.745 0.000181 ***\nORIGIN_BS54281          0.8934267  0.1301090    6.867 6.57e-12 ***\nORIGIN_BS54311          1.4499435  0.1203121   12.052  &lt; 2e-16 ***\nORIGIN_BS54339         -0.4484441  0.1356956   -3.305 0.000951 ***\nORIGIN_BS54351          0.5426704  0.1303457    4.163 3.14e-05 ***\nORIGIN_BS54489          0.3156690  0.1489754    2.119 0.034096 *  \nORIGIN_BS54491         -0.9617405  0.2162821   -4.447 8.72e-06 ***\nORIGIN_BS54539          0.0269159  0.1426816    0.189 0.850373    \nORIGIN_BS54589          1.3045578  0.1349973    9.664  &lt; 2e-16 ***\nORIGIN_BS54611          1.8072035  0.1503413   12.021  &lt; 2e-16 ***\nORIGIN_BS54641          0.4310545  0.3467031    1.243 0.213759    \nORIGIN_BS55021          2.9697712  0.1545942   19.210  &lt; 2e-16 ***\nORIGIN_BS55049          0.1932620  0.7284190    0.265 0.790765    \nORIGIN_BS55081          1.2718563  0.1236002   10.290  &lt; 2e-16 ***\nORIGIN_BS55119          2.5717567  0.1455456   17.670  &lt; 2e-16 ***\nORIGIN_BS55171          0.7713960  0.1977263    3.901 9.57e-05 ***\nORIGIN_BS55231         -0.4186789  0.2321418   -1.804 0.071302 .  \nORIGIN_BS55249         -1.8699130  0.4215396   -4.436 9.17e-06 ***\nORIGIN_BS55259         -0.4515670  0.1957140   -2.307 0.021039 *  \nORIGIN_BS55289         -0.7869771  0.3334796   -2.360 0.018280 *  \nORIGIN_BS56021          0.3622554  0.1407755    2.573 0.010074 *  \nORIGIN_BS56041         -1.1150552  0.2234609   -4.990 6.04e-07 ***\nORIGIN_BS56059          1.5427828  0.1178769   13.088  &lt; 2e-16 ***\nORIGIN_BS56069         -4.7283735  0.4626666  -10.220  &lt; 2e-16 ***\nORIGIN_BS56099          1.8548897  0.1144727   16.204  &lt; 2e-16 ***\nORIGIN_BS56269         -0.4052456  0.1449212   -2.796 0.005169 ** \nORIGIN_BS57059         -1.3681414  0.1633050   -8.378  &lt; 2e-16 ***\nORIGIN_BS57061         -0.7084124  0.1477735   -4.794 1.64e-06 ***\nORIGIN_BS57071          0.6624738  0.1146320    5.779 7.51e-09 ***\nORIGIN_BS57111          1.6098489  0.1238699   12.996  &lt; 2e-16 ***\nORIGIN_BS57129          0.2532836  0.1202006    2.107 0.035102 *  \nORIGIN_BS57139         -0.8040788  0.1447956   -5.553 2.80e-08 ***\nORIGIN_BS57149          0.6815136  0.2827208    2.411 0.015928 *  \nORIGIN_BS58101          0.2651043  0.1490866    1.778 0.075373 .  \nORIGIN_BS58121          0.4530292  0.2003086    2.262 0.023719 *  \nORIGIN_BS58201         -4.1294263  0.2192162  -18.837  &lt; 2e-16 ***\nORIGIN_BS58221          0.7208323  0.1719239    4.193 2.76e-05 ***\nORIGIN_BS58289          0.2579791  0.1643785    1.569 0.116550    \nORIGIN_BS58299         -0.1361218  0.2013860   -0.676 0.499089    \nORIGIN_BS58351          0.1356548  0.1709707    0.793 0.427522    \nORIGIN_BS58369         -0.7894161  0.2270952   -3.476 0.000509 ***\nORIGIN_BS58401         -0.5455720  0.2525720   -2.160 0.030768 *  \nORIGIN_BS58451         -1.5454708  0.2851007   -5.421 5.93e-08 ***\nORIGIN_BS58541         -0.3739833  0.1239655   -3.017 0.002554 ** \nORIGIN_BS59039          0.8292449  0.1194296    6.943 3.83e-12 ***\nORIGIN_BS59079          2.9080417  0.1116923   26.036  &lt; 2e-16 ***\nORIGIN_BS59149          1.1796576  0.1321830    8.924  &lt; 2e-16 ***\nORIGIN_BS59169          0.2772303  0.1289232    2.150 0.031527 *  \nORIGIN_BS59189          0.2272019  0.1361888    1.668 0.095259 .  \nORIGIN_BS59249          0.1913720  0.1654763    1.156 0.247480    \nORIGIN_BS59259         -1.9134109  0.1636289  -11.694  &lt; 2e-16 ***\nORIGIN_BS59261          0.5784911  0.1363307    4.243 2.20e-05 ***\nORIGIN_BS59299         -5.1963777  0.7390374   -7.031 2.05e-12 ***\nORIGIN_BS59311          1.8870980  0.2295056    8.222  &lt; 2e-16 ***\nORIGIN_BS59329         -1.5773813  0.3286859   -4.799 1.59e-06 ***\nORIGIN_BS59471          0.3872262  0.4836494    0.801 0.423343    \nORIGIN_BS59509         -1.7166122  0.2262714   -7.587 3.29e-14 ***\nORIGIN_BS59511          1.5952339  0.2114687    7.544 4.57e-14 ***\nORIGIN_BS59521         -0.1809797  0.2920115   -0.620 0.535410    \nORIGIN_BS59579         -1.4261001  0.1533616   -9.299  &lt; 2e-16 ***\nORIGIN_BS59601          0.1819201  0.4555549    0.399 0.689645    \nORIGIN_BS59619          0.1142285  0.1170959    0.976 0.329306    \nORIGIN_BS59711          3.1804342  0.2783058   11.428  &lt; 2e-16 ***\nORIGIN_BS59721          0.7182377  0.2062185    3.483 0.000496 ***\nORIGIN_BS59739         -1.2525269  0.1974207   -6.344 2.23e-10 ***\nORIGIN_BS59749         -1.2752351  0.1975754   -6.454 1.09e-10 ***\nORIGIN_BS60029         -0.3571526  0.1573210   -2.270 0.023195 *  \nORIGIN_BS60051         -0.2868475  0.1508709   -1.901 0.057266 .  \nORIGIN_BS60059         -0.8965253  0.2072166   -4.327 1.51e-05 ***\nORIGIN_BS60061          1.3040179  0.1514789    8.609  &lt; 2e-16 ***\nORIGIN_BS60089          1.8073779  0.1173714   15.399  &lt; 2e-16 ***\nORIGIN_BS60159          0.8521500  0.1081301    7.881 3.25e-15 ***\nORIGIN_BS60199          0.4259273  0.1205338    3.534 0.000410 ***\nORIGIN_BS60221          1.5514474  0.1200239   12.926  &lt; 2e-16 ***\nORIGIN_BS60261          0.9827252  0.1131179    8.688  &lt; 2e-16 ***\nORIGIN_BS61011          0.2777942  0.1317109    2.109 0.034934 *  \nORIGIN_BS61079         -0.1069768  0.2392800   -0.447 0.654819    \nORIGIN_BS62011          0.8153504  0.1134726    7.185 6.70e-13 ***\nORIGIN_BS62039         -0.4053621  0.1764363   -2.297 0.021590 *  \nORIGIN_BS62099         -1.6146897  0.2865567   -5.635 1.75e-08 ***\nORIGIN_BS62111          0.4305067  0.1339506    3.214 0.001309 ** \nORIGIN_BS63021          0.3139039  0.1664775    1.886 0.059354 .  \nORIGIN_BS63049          0.3317093  0.1208368    2.745 0.006049 ** \nORIGIN_BS63139          0.7913390  0.1195457    6.620 3.60e-11 ***\nORIGIN_BS63149          0.0059382  0.1223843    0.049 0.961301    \nORIGIN_BS63161          0.1292884  0.2071147    0.624 0.532473    \nORIGIN_BS63169          0.1008419  0.3715119    0.271 0.786055    \nORIGIN_BS63209          0.6946446  0.1205145    5.764 8.21e-09 ***\nORIGIN_BS63229         -0.0139683  0.1837382   -0.076 0.939401    \nORIGIN_BS63281          1.6241200  0.1102664   14.729  &lt; 2e-16 ***\nORIGIN_BS63289          0.8783783  0.1348237    6.515 7.27e-11 ***\nORIGIN_BS63309          0.7869340  0.1290424    6.098 1.07e-09 ***\nORIGIN_BS63321          0.4259814  0.1306556    3.260 0.001113 ** \nORIGIN_BS63329         -0.6294080  0.1615445   -3.896 9.77e-05 ***\nORIGIN_BS63331          0.4702442  0.1344285    3.498 0.000469 ***\nORIGIN_BS63369         -0.2757328  0.1238822   -2.226 0.026030 *  \nORIGIN_BS64011         -0.6194938  0.1709705   -3.623 0.000291 ***\nORIGIN_BS64019          0.6585310  0.1167221    5.642 1.68e-08 ***\nORIGIN_BS64029          0.7540283  0.1234599    6.107 1.01e-09 ***\nORIGIN_BS64119          1.7527921  0.1082070   16.199  &lt; 2e-16 ***\nORIGIN_BS64121         -0.5412419  0.1390993   -3.891 9.98e-05 ***\nORIGIN_BS64131         -0.8865892  0.3509820   -2.526 0.011536 *  \nORIGIN_BS64201          1.9634431  0.1148338   17.098  &lt; 2e-16 ***\nORIGIN_BS64229         -0.9943914  0.1749617   -5.683 1.32e-08 ***\nORIGIN_BS64371          0.1157687  0.1943380    0.596 0.551370    \nORIGIN_BS64411          0.7361044  0.1290986    5.702 1.18e-08 ***\nORIGIN_BS64491          1.4704875  0.1395446   10.538  &lt; 2e-16 ***\nORIGIN_BS64541          2.9946856  0.1214456   24.659  &lt; 2e-16 ***\nORIGIN_BS64629          1.2263409  0.1529791    8.016 1.09e-15 ***\nORIGIN_BS65061          2.0108926  0.1085884   18.518  &lt; 2e-16 ***\nORIGIN_BS65079          0.4031114  0.1259497    3.201 0.001372 ** \nORIGIN_BS65221          0.2063220  0.1315565    1.568 0.116808    \nORIGIN_BS65231          0.7419378  0.2333913    3.179 0.001478 ** \nORIGIN_BS65451          2.2172902  0.1324960   16.735  &lt; 2e-16 ***\nORIGIN_BS65461          0.4563489  0.1848961    2.468 0.013582 *  \nORIGIN_BS66019         -2.3781834  1.0055838   -2.365 0.018031 *  \nORIGIN_BS66039          0.9733568  0.1180115    8.248  &lt; 2e-16 ***\nORIGIN_BS66081         -1.1399394  0.1989622   -5.729 1.01e-08 ***\nORIGIN_BS66099          1.2059018  0.1242111    9.708  &lt; 2e-16 ***\nORIGIN_BS66139         -0.2369680  0.2059452   -1.151 0.249882    \nORIGIN_BS66149         -0.3586960  0.2449665   -1.464 0.143121    \nORIGIN_BS66181         -0.8473404  0.7158623   -1.184 0.236546    \nORIGIN_BS66241         -0.4537896  0.3950007   -1.149 0.250625    \nORIGIN_BS66251          0.0852069  0.3106473    0.274 0.783863    \nORIGIN_BS66301          2.7344428  0.2089696   13.085  &lt; 2e-16 ***\nORIGIN_BS66311          1.8317397  0.2636238    6.948 3.70e-12 ***\nORIGIN_BS66321          0.2590511  0.4250073    0.610 0.542179    \nORIGIN_BS66351          3.4791036  0.1046873   33.233  &lt; 2e-16 ***\nORIGIN_BS66371          2.0910501  0.1084597   19.280  &lt; 2e-16 ***\nORIGIN_BS66381          3.4166551  0.1071675   31.881  &lt; 2e-16 ***\nORIGIN_BS66399          0.3219672  0.1969631    1.635 0.102121    \nORIGIN_BS66409         -0.0089477  0.1964946   -0.046 0.963680    \nORIGIN_BS66419          1.0686060  0.1392191    7.676 1.64e-14 ***\nORIGIN_BS66421          2.1266969  0.1238335   17.174  &lt; 2e-16 ***\nORIGIN_BS66451          0.3285630  0.1269943    2.587 0.009675 ** \nORIGIN_BS66499          1.3708199  0.1116433   12.279  &lt; 2e-16 ***\nORIGIN_BS66581          0.8063699  0.2267448    3.556 0.000376 ***\nORIGIN_BS67021         -0.2309839  0.1908000   -1.211 0.226046    \nORIGIN_BS67059          0.9226023  0.1647273    5.601 2.13e-08 ***\nORIGIN_BS67079          0.6932293  0.1332564    5.202 1.97e-07 ***\nORIGIN_BS67101          0.2960637  0.1415302    2.092 0.036450 *  \nORIGIN_BS67121          1.3986388  0.1311913   10.661  &lt; 2e-16 ***\nORIGIN_BS67171          0.7111666  0.1377054    5.164 2.41e-07 ***\nORIGIN_BS67229          1.6430590  0.1318626   12.460  &lt; 2e-16 ***\nORIGIN_BS67321         -0.2999175  0.2837374   -1.057 0.290500    \nORIGIN_BS67371          1.3578787  0.1524698    8.906  &lt; 2e-16 ***\nORIGIN_BS67389         -0.6862091  0.1511439   -4.540 5.62e-06 ***\nORIGIN_BS67499          1.5625811  0.1268555   12.318  &lt; 2e-16 ***\nORIGIN_BS67599          3.0412012  0.1134794   26.800  &lt; 2e-16 ***\nORIGIN_BS67619          0.2389192  0.2001242    1.194 0.232535    \nORIGIN_BS67659         -0.6978141  0.5948011   -1.173 0.240720    \nORIGIN_BS68029          2.0713113  0.1296651   15.974  &lt; 2e-16 ***\nORIGIN_BS68039          0.7559072  0.1383975    5.462 4.71e-08 ***\nORIGIN_BS68069         -1.0380612  0.3535979   -2.936 0.003328 ** \nORIGIN_BS68101         -3.4007192  0.7150392   -4.756 1.97e-06 ***\nORIGIN_BS68111          2.0922309  0.1092177   19.157  &lt; 2e-16 ***\nORIGIN_BS68151         -1.9717496  0.3336738   -5.909 3.44e-09 ***\nORIGIN_BS70019          0.6504111  0.1216227    5.348 8.90e-08 ***\nORIGIN_BS70021         -0.2749468  0.1264414   -2.174 0.029668 *  \nORIGIN_BS70041          1.1736583  0.1324259    8.863  &lt; 2e-16 ***\nORIGIN_BS70051          2.0599422  0.1195387   17.232  &lt; 2e-16 ***\nORIGIN_BS70079         -0.6048288  0.1729287   -3.498 0.000470 ***\nORIGIN_BS70101          0.5529162  0.1235779    4.474 7.67e-06 ***\nORIGIN_BS70109          1.3349656  0.1123302   11.884  &lt; 2e-16 ***\nORIGIN_BS70119          1.9298091  0.1090956   17.689  &lt; 2e-16 ***\nORIGIN_BS70121          0.4657259  0.1290402    3.609 0.000307 ***\nORIGIN_BS70231          1.4587602  0.1071701   13.612  &lt; 2e-16 ***\nORIGIN_BS70279          0.4516283  0.1148627    3.932 8.43e-05 ***\nORIGIN_BS70291          0.5825177  0.1173586    4.964 6.92e-07 ***\nORIGIN_BS70401         -1.6137328  0.2872780   -5.617 1.94e-08 ***\nORIGIN_BS71011          0.7705020  0.1413552    5.451 5.01e-08 ***\nORIGIN_BS71049          1.2146120  0.1243172    9.770  &lt; 2e-16 ***\nORIGIN_BS71051          0.1982872  0.1317451    1.505 0.132303    \nORIGIN_BS71071          1.2932328  0.1118932   11.558  &lt; 2e-16 ***\nORIGIN_BS71091          1.4381093  0.1071457   13.422  &lt; 2e-16 ***\nORIGIN_BS71119          1.3738882  0.1150024   11.947  &lt; 2e-16 ***\nORIGIN_BS71121          1.1368572  0.1143535    9.942  &lt; 2e-16 ***\nORIGIN_BS71129         -0.1648610  0.1398105   -1.179 0.238329    \nORIGIN_BS71169          0.3035706  0.1215634    2.497 0.012517 *  \nORIGIN_BS71171         -2.2639825  0.4594919   -4.927 8.34e-07 ***\nORIGIN_BS72041          1.0500878  0.1189987    8.824  &lt; 2e-16 ***\nORIGIN_BS72061          0.8512530  0.1234415    6.896 5.35e-12 ***\nORIGIN_BS73019         -0.8327433  1.0063322   -0.828 0.407952    \nORIGIN_BS74031          0.2418026  0.2561229    0.944 0.345124    \nORIGIN_BS75031          0.5727973  0.1209204    4.737 2.17e-06 ***\nORIGIN_BS75131          1.1362694  0.1323787    8.583  &lt; 2e-16 ***\nORIGIN_BS75141          1.2281867  0.1273871    9.641  &lt; 2e-16 ***\nORIGIN_BS75151         -1.7720969  0.1466481  -12.084  &lt; 2e-16 ***\nORIGIN_BS75201         -0.6818753  0.1697563   -4.017 5.90e-05 ***\nORIGIN_BS75209          0.1895089  0.2363057    0.802 0.422573    \nORIGIN_BS75221         -0.1564626  0.1365648   -1.146 0.251918    \nORIGIN_BS75269         -0.1699285  0.1615673   -1.052 0.292914    \nORIGIN_BS75271          1.2257564  0.1532350    7.999 1.25e-15 ***\nORIGIN_BS75299         -0.3024673  0.1396358   -2.166 0.030302 *  \nORIGIN_BS75359          1.8132537  0.1109254   16.347  &lt; 2e-16 ***\nORIGIN_BS75381         -0.8528572  0.5123051   -1.665 0.095964 .  \nORIGIN_BS75419         -0.0316554  0.1381290   -0.229 0.818735    \nORIGIN_BS76079          0.5792348  0.1215801    4.764 1.90e-06 ***\nORIGIN_BS76109          1.0697830  0.1081741    9.889  &lt; 2e-16 ***\nORIGIN_BS76131          1.1621868  0.1219545    9.530  &lt; 2e-16 ***\nORIGIN_BS76161         -0.0052273  0.2309514   -0.023 0.981943    \nORIGIN_BS76181          3.8694715  0.5259299    7.357 1.88e-13 ***\nORIGIN_BS76201         -0.3827404  0.1309019   -2.924 0.003457 ** \nORIGIN_BS76209         -0.7699168  0.2721225   -2.829 0.004665 ** \nORIGIN_BS76241          0.9974927  0.1093897    9.119  &lt; 2e-16 ***\nORIGIN_BS76249          0.5835706  0.1123058    5.196 2.03e-07 ***\nORIGIN_BS76269          0.2322055  0.1423788    1.631 0.102911    \nORIGIN_BS76291         -1.4962819  0.5113293   -2.926 0.003431 ** \nORIGIN_BS76391         -2.3756855  0.5156175   -4.607 4.08e-06 ***\nORIGIN_BS76441         -1.5516269  0.4608802   -3.367 0.000761 ***\nORIGIN_BS76459         -0.4027250  0.1552914   -2.593 0.009505 ** \nORIGIN_BS77011          1.1480785  0.1238189    9.272  &lt; 2e-16 ***\nORIGIN_BS77049          0.8772033  0.1189278    7.376 1.63e-13 ***\nORIGIN_BS77091         -1.3332816  0.3202882   -4.163 3.14e-05 ***\nORIGIN_BS77211         -0.1419367  0.1307783   -1.085 0.277779    \nORIGIN_BS77279         -0.7865942  1.0099830   -0.779 0.436086    \nORIGIN_BS77331          1.1728620  0.1109832   10.568  &lt; 2e-16 ***\nORIGIN_BS77381         -0.3531421  0.1832231   -1.927 0.053931 .  \nORIGIN_BS78061          1.6164780  0.1185639   13.634  &lt; 2e-16 ***\nORIGIN_BS78081          0.5815914  0.1323500    4.394 1.11e-05 ***\nORIGIN_BS78129         -1.3921883  0.2385377   -5.836 5.34e-09 ***\nORIGIN_BS78131         -0.4367628  0.2654214   -1.646 0.099858 .  \nORIGIN_BS78139         -2.1733655  0.3208939   -6.773 1.26e-11 ***\nORIGIN_BS78161          0.0659118  0.1528330    0.431 0.666274    \nORIGIN_BS78191          0.6257271  0.1174337    5.328 9.91e-08 ***\nORIGIN_BS78261         -1.5360812  0.4220497   -3.640 0.000273 ***\nORIGIN_BS80029         -0.0789379  0.1212911   -0.651 0.515167    \nORIGIN_BS80049          1.0210631  0.1073465    9.512  &lt; 2e-16 ***\nORIGIN_BS80111          0.2610842  0.1324577    1.971 0.048715 *  \nORIGIN_BS80151          1.5893912  0.1109489   14.325  &lt; 2e-16 ***\nORIGIN_BS80159          1.0921339  0.1149901    9.498  &lt; 2e-16 ***\nORIGIN_BS80171         -0.6962169  0.3935997   -1.769 0.076920 .  \nORIGIN_BS80191          0.6389921  0.1480804    4.315 1.59e-05 ***\nORIGIN_BS80229         -0.7062581  0.2879102   -2.453 0.014165 *  \nORIGIN_BS80239         -0.7856600  0.3706281   -2.120 0.034022 *  \nORIGIN_BS80251          0.7877479  0.1357571    5.803 6.53e-09 ***\nORIGIN_BS80271          0.7433689  0.1269886    5.854 4.80e-09 ***\nORIGIN_BS80289         -0.2419058  0.1470216   -1.645 0.099892 .  \nORIGIN_BS81031          0.8116868  0.1143391    7.099 1.26e-12 ***\nORIGIN_BS81099         -0.0615632  0.1457451   -0.422 0.672730    \nORIGIN_BS81101         -0.7697148  0.1780307   -4.323 1.54e-05 ***\nORIGIN_BS81109          0.4025249  0.1201951    3.349 0.000811 ***\nORIGIN_BS81209         -0.9832625  0.1779718   -5.525 3.30e-08 ***\nORIGIN_BS81231         -1.0987503  0.2435092   -4.512 6.42e-06 ***\nORIGIN_BS82029          1.3592423  0.1062623   12.791  &lt; 2e-16 ***\nORIGIN_BS82033          0.8411236  0.1371491    6.133 8.63e-10 ***\nORIGIN_BS82051          0.7133133  0.1846524    3.863 0.000112 ***\nORIGIN_BS82131          0.7903234  0.1597932    4.946 7.58e-07 ***\nORIGIN_BS82181         -0.0819685  0.3764369   -0.218 0.827625    \nORIGIN_BS83031          0.3848592  0.1313188    2.931 0.003382 ** \nORIGIN_BS83099          0.8247976  0.1132229    7.285 3.22e-13 ***\nORIGIN_BS83101          1.9391157  0.1054149   18.395  &lt; 2e-16 ***\nORIGIN_BS83109          1.0065734  0.1165613    8.636  &lt; 2e-16 ***\nORIGIN_BS83111          0.4348977  0.1146209    3.794 0.000148 ***\nORIGIN_BS83129         -0.5451835  0.2147059   -2.539 0.011110 *  \nORIGIN_BS83169          0.4751738  0.1357206    3.501 0.000463 ***\nORIGIN_BS83329          2.0449665  0.1771755   11.542  &lt; 2e-16 ***\nORIGIN_BS83341          0.9896474  0.1574568    6.285 3.27e-10 ***\nORIGIN_BS84019          1.0241040  0.1095662    9.347  &lt; 2e-16 ***\nORIGIN_BS84029          1.1923641  0.1085825   10.981  &lt; 2e-16 ***\nORIGIN_BS84031          3.0135473  0.1051698   28.654  &lt; 2e-16 ***\nORIGIN_BS84079         -0.4137401  0.1605551   -2.577 0.009968 ** \nORIGIN_BS84081          0.1679231  0.1409435    1.191 0.233488    \nORIGIN_BS84141          0.5876156  0.1285312    4.572 4.84e-06 ***\nORIGIN_BS84169         -0.9601606  0.4242133   -2.263 0.023612 *  \nORIGIN_BS84191         -0.1038587  0.1706621   -0.609 0.542814    \nORIGIN_BS84219          1.3163976  0.1153590   11.411  &lt; 2e-16 ***\nORIGIN_BS84221         -1.2390839  0.1187224  -10.437  &lt; 2e-16 ***\nORIGIN_BS84231         -0.9339827  0.1174246   -7.954 1.81e-15 ***\nORIGIN_BS84239          1.5327990  0.1256490   12.199  &lt; 2e-16 ***\nORIGIN_BS84261         -0.7309183  0.2152639   -3.395 0.000685 ***\nORIGIN_BS84271         -0.0593433  0.2082230   -0.285 0.775645    \nORIGIN_BS84279          1.0007995  0.1693508    5.910 3.43e-09 ***\nORIGIN_BS84289          0.3062538  0.1318127    2.323 0.020158 *  \nORIGIN_BS84309         -2.1697804  0.4603266   -4.714 2.43e-06 ***\nORIGIN_BS84329          0.6359161  0.2065574    3.079 0.002079 ** \nORIGIN_BS84371         -2.3115602  0.3825339   -6.043 1.52e-09 ***\nORIGIN_BS84379          2.4458456  0.1177545   20.771  &lt; 2e-16 ***\nORIGIN_BS84401         -0.9838315  0.7201199   -1.366 0.171875    \nORIGIN_BS84451         -0.1251586  0.1323791   -0.945 0.344426    \nORIGIN_BS84491          0.7142591  0.1187715    6.014 1.81e-09 ***\nORIGIN_BS84501          0.9307411  0.1413210    6.586 4.52e-11 ***\nORIGIN_BS84521          0.6426932  0.1161342    5.534 3.13e-08 ***\nORIGIN_BS84591         -1.1567241  0.1924069   -6.012 1.83e-09 ***\nORIGIN_BS84601         -0.6960166  0.1795946   -3.875 0.000106 ***\nORIGIN_BS84629         -0.1709348  0.1347062   -1.269 0.204460    \nORIGIN_BS84671         -1.0408405  0.2101554   -4.953 7.32e-07 ***\nORIGIN_BS85021          0.5428065  0.1363980    3.980 6.90e-05 ***\nORIGIN_BS85029         -1.2646072  0.3736352   -3.385 0.000713 ***\nORIGIN_BS90029          0.2411033  0.2033565    1.186 0.235773    \nORIGIN_BS90069          1.1044426  0.1464281    7.543 4.61e-14 ***\nORIGIN_BS91069          1.2666775  0.1187353   10.668  &lt; 2e-16 ***\nORIGIN_BS91071         -0.8312916  0.2258770   -3.680 0.000233 ***\nORIGIN_BS91099          0.8075953  0.1236525    6.531 6.53e-11 ***\nORIGIN_BS92099          1.1658271  0.1154874   10.095  &lt; 2e-16 ***\nORIGIN_BS92129          1.4875580  0.1137456   13.078  &lt; 2e-16 ***\nORIGIN_BS92141          0.6868118  0.1285959    5.341 9.25e-08 ***\nORIGIN_BS92159          0.8627031  0.1175927    7.336 2.19e-13 ***\nORIGIN_BS92189          1.5173202  0.2383064    6.367 1.93e-10 ***\nORIGIN_BS92191          0.1747274  0.3262223    0.536 0.592229    \nORIGIN_BS93049          0.3077351  0.1341728    2.294 0.021815 *  \nORIGIN_BS93061          0.5989530  0.1240132    4.830 1.37e-06 ***\nORIGIN_BS93069          1.5028227  0.1120866   13.408  &lt; 2e-16 ***\nORIGIN_BS93081         -0.8258872  0.1899940   -4.347 1.38e-05 ***\nORIGIN_BS93171         -0.6139445  0.3262435   -1.882 0.059855 .  \nORIGIN_BS94021         -0.9790343  0.2232451   -4.385 1.16e-05 ***\nORIGIN_BS94029          0.8822096  0.1116158    7.904 2.70e-15 ***\nORIGIN_BS94061         -1.2604709  0.2455757   -5.133 2.86e-07 ***\nORIGIN_BS95029          2.9388706  0.1040195   28.253  &lt; 2e-16 ***\nORIGIN_BS95109          2.2294870  0.1045280   21.329  &lt; 2e-16 ***\nORIGIN_BS95129          1.2608037  0.1078933   11.686  &lt; 2e-16 ***\nORIGIN_BS95139          1.0543035  0.1257194    8.386  &lt; 2e-16 ***\nORIGIN_BS95909          0.1216039  0.1662822    0.731 0.464589    \nORIGIN_BS96011         -2.9229359  0.3331473   -8.774  &lt; 2e-16 ***\nORIGIN_BS96069          0.2241464  0.1246486    1.798 0.072141 .  \nORIGIN_BS96131         -0.0017085  0.2059157   -0.008 0.993380    \nORIGIN_BS96161          1.0910486  0.1239373    8.803  &lt; 2e-16 ***\nORIGIN_BS96179         -2.6586766  0.2588511  -10.271  &lt; 2e-16 ***\nORIGIN_BS96239         -1.9614849  0.2066657   -9.491  &lt; 2e-16 ***\nORIGIN_BS96249         -1.7216477  0.1785308   -9.643  &lt; 2e-16 ***\nORIGIN_BS96281          0.9309034  0.1293461    7.197 6.16e-13 ***\nORIGIN_BS96291         -0.0520089  0.3453903   -0.151 0.880307    \nORIGIN_BS96351         -0.8785102  0.1925964   -4.561 5.08e-06 ***\nORIGIN_BS96361         -1.6125850  0.2122612   -7.597 3.03e-14 ***\nORIGIN_BS97019          1.0704064  0.1120321    9.554  &lt; 2e-16 ***\nORIGIN_BS97099         -0.6259551  0.2811601   -2.226 0.025992 *  \nORIGIN_BS97109         -0.4096023  0.3082403   -1.329 0.183901    \nORIGIN_BS97159          1.3764189  0.1513782    9.093  &lt; 2e-16 ***\nORIGIN_BS97179          3.4030766  0.1164583   29.221  &lt; 2e-16 ***\nORIGIN_BS97181         -0.0945084  0.3079456   -0.307 0.758920    \nORIGIN_BS97209         -0.1135283  0.2224503   -0.510 0.609804    \nORIGIN_BS98079          0.0264560  0.1309785    0.202 0.839927    \nORIGIN_BS98129          0.3041664  0.1245564    2.442 0.014606 *  \nORIGIN_BS98139          0.6870642  0.1196938    5.740 9.46e-09 ***\nORIGIN_BS98291          1.7541130  0.1104994   15.874  &lt; 2e-16 ***\nORIGIN_BS98301         -2.0784701  0.7152344   -2.906 0.003661 ** \nORIGIN_BS99049          1.2524117  0.1135633   11.028  &lt; 2e-16 ***\nORIGIN_BS99101         -0.3061835  0.5114716   -0.599 0.549418    \nORIGIN_BS99189         -0.4506417  0.1690188   -2.666 0.007671 ** \nDESTIN_BS01119          0.4069740  0.0446455    9.116  &lt; 2e-16 ***\nDESTIN_BS01231         -2.5707049  0.1938615  -13.261  &lt; 2e-16 ***\nDESTIN_BS01239          0.1366233  0.0812530    1.681 0.092674 .  \nDESTIN_BS01349         -2.3682799  0.4498300   -5.265 1.40e-07 ***\nDESTIN_BS01549         -0.7175988  0.0990114   -7.248 4.24e-13 ***\nDESTIN_BS02089         -0.4374042  0.0503738   -8.683  &lt; 2e-16 ***\nDESTIN_BS02119         -0.8383930  0.0942741   -8.893  &lt; 2e-16 ***\nDESTIN_BS03011          0.2547866  0.0630837    4.039 5.37e-05 ***\nDESTIN_BS03021         -0.7540440  0.1687565   -4.468 7.89e-06 ***\nDESTIN_BS03111         -0.5459481  0.0896615   -6.089 1.14e-09 ***\nDESTIN_BS03218         -0.7086324  0.0625222  -11.334  &lt; 2e-16 ***\nDESTIN_BS03391         -0.1144877  0.1226463   -0.933 0.350573    \nDESTIN_BS03511          1.7711925  0.0692415   25.580  &lt; 2e-16 ***\nDESTIN_BS04179         -1.2576939  0.0597771  -21.040  &lt; 2e-16 ***\nDESTIN_BS04211         -1.6983569  0.2802384   -6.060 1.36e-09 ***\nDESTIN_BS04219         -1.1451291  0.1511180   -7.578 3.52e-14 ***\nDESTIN_BS04311         -1.5345078  0.1088597  -14.096  &lt; 2e-16 ***\nDESTIN_BS05013          1.6122190  0.0443524   36.350  &lt; 2e-16 ***\nDESTIN_BS05023         -2.0767971  0.0660221  -31.456  &lt; 2e-16 ***\nDESTIN_BS05259         -1.0012581  0.1189179   -8.420  &lt; 2e-16 ***\nDESTIN_BS05431         -1.8779067  0.3191790   -5.884 4.02e-09 ***\nDESTIN_BS06049         -1.4499494  0.1530135   -9.476  &lt; 2e-16 ***\nDESTIN_BS06141         -1.3480295  0.1503932   -8.963  &lt; 2e-16 ***\nDESTIN_BS06159         -0.4609032  0.1111184   -4.148 3.36e-05 ***\nDESTIN_BS07011         -0.7319036  0.0627215  -11.669  &lt; 2e-16 ***\nDESTIN_BS07021         -0.6156014  0.0695132   -8.856  &lt; 2e-16 ***\nDESTIN_BS07249         -1.4616662  0.1241845  -11.770  &lt; 2e-16 ***\nDESTIN_BS07331         -0.0166990  0.1604325   -0.104 0.917100    \nDESTIN_BS07369         -0.8367674  0.0693240  -12.070  &lt; 2e-16 ***\nDESTIN_BS07379         -0.7692973  0.0613029  -12.549  &lt; 2e-16 ***\nDESTIN_BS07419          1.5242983  0.0421475   36.166  &lt; 2e-16 ***\nDESTIN_BS07539         -0.0984892  0.0629182   -1.565 0.117500    \nDESTIN_BS07569         -2.4930899  0.1485106  -16.787  &lt; 2e-16 ***\nDESTIN_BS08058          0.3887210  0.0701760    5.539 3.04e-08 ***\nDESTIN_BS08069          0.1930214  0.0461442    4.183 2.88e-05 ***\nDESTIN_BS08121         -0.0684589  0.0431530   -1.586 0.112643    \nDESTIN_BS09047          0.9646192  0.0409536   23.554  &lt; 2e-16 ***\nDESTIN_BS09121         -1.0830301  0.0811456  -13.347  &lt; 2e-16 ***\nDESTIN_BS09149         -1.8226700  0.1561913  -11.669  &lt; 2e-16 ***\nDESTIN_BS09213         -0.6801460  0.0705573   -9.640  &lt; 2e-16 ***\nDESTIN_BS09219          0.5747465  0.0452959   12.689  &lt; 2e-16 ***\nDESTIN_BS10017         -0.1380838  0.0778870   -1.773 0.076250 .  \nDESTIN_BS10061         -1.0050885  0.0926651  -10.846  &lt; 2e-16 ***\nDESTIN_BS10099          0.1408717  0.0614907    2.291 0.021967 *  \nDESTIN_BS10129         -0.4446460  0.2070424   -2.148 0.031745 *  \nDESTIN_BS10139         -0.1580289  0.0630801   -2.505 0.012238 *  \nDESTIN_BS10191         -0.3476095  0.0730058   -4.761 1.92e-06 ***\nDESTIN_BS10199         -0.0404497  0.0682696   -0.592 0.553516    \nDESTIN_BS10249         -0.5815085  0.1112847   -5.225 1.74e-07 ***\nDESTIN_BS10281         -0.6616497  0.0852769   -7.759 8.57e-15 ***\nDESTIN_BS10299         -0.1899560  0.0670397   -2.833 0.004604 ** \nDESTIN_BS10321         -1.0878160  0.1166788   -9.323  &lt; 2e-16 ***\nDESTIN_BS10341         -0.2932129  0.1215903   -2.411 0.015888 *  \nDESTIN_BS10381          0.0775393  0.0621158    1.248 0.211920    \nDESTIN_BS10459         -2.9232648  0.4503931   -6.490 8.56e-11 ***\nDESTIN_BS10469          0.0615527  0.0816604    0.754 0.450990    \nDESTIN_BS11019          0.2954463  0.0597668    4.943 7.68e-07 ***\nDESTIN_BS11031         -1.7064531  0.1844538   -9.251  &lt; 2e-16 ***\nDESTIN_BS11041         -1.1861979  0.1162929  -10.200  &lt; 2e-16 ***\nDESTIN_BS11049         -1.3791089  0.1110127  -12.423  &lt; 2e-16 ***\nDESTIN_BS11081         -2.1584527  0.1786652  -12.081  &lt; 2e-16 ***\nDESTIN_BS11099         -1.2358598  0.1027146  -12.032  &lt; 2e-16 ***\nDESTIN_BS11131         -0.4606350  0.0786678   -5.855 4.76e-09 ***\nDESTIN_BS11171         -0.7226694  0.0770909   -9.374  &lt; 2e-16 ***\nDESTIN_BS11201         -0.8837392  0.0875969  -10.089  &lt; 2e-16 ***\nDESTIN_BS11211         -1.5414409  0.1074364  -14.347  &lt; 2e-16 ***\nDESTIN_BS11221         -0.1076644  0.0702636   -1.532 0.125450    \nDESTIN_BS11271         -0.9656667  0.1244645   -7.759 8.59e-15 ***\nDESTIN_BS11309         -2.2301762  0.2815780   -7.920 2.37e-15 ***\nDESTIN_BS11339         -2.5263454  0.5035257   -5.017 5.24e-07 ***\nDESTIN_BS11369          0.6965313  0.0811971    8.578  &lt; 2e-16 ***\nDESTIN_BS11389         -0.4458793  0.0591379   -7.540 4.71e-14 ***\nDESTIN_BS11409          0.1026242  0.0816981    1.256 0.209066    \nDESTIN_BS11459         -1.3253495  0.2891377   -4.584 4.57e-06 ***\nDESTIN_BS11519          0.0442470  0.0575939    0.768 0.442333    \nDESTIN_BS11529          1.0124066  0.0655878   15.436  &lt; 2e-16 ***\nDESTIN_BS11531         -2.8454445  0.2008926  -14.164  &lt; 2e-16 ***\nDESTIN_BS11589         -0.5975521  0.1198189   -4.987 6.13e-07 ***\nDESTIN_BS12029         -1.3927519  0.1865360   -7.466 8.24e-14 ***\nDESTIN_BS12031         -1.0179779  0.0963141  -10.569  &lt; 2e-16 ***\nDESTIN_BS12069         -0.0172165  0.0652932   -0.264 0.792027    \nDESTIN_BS12071          0.2564000  0.0535903    4.784 1.71e-06 ***\nDESTIN_BS12109         -1.1157136  0.1007385  -11.075  &lt; 2e-16 ***\nDESTIN_BS12119         -2.6721887  0.2647933  -10.092  &lt; 2e-16 ***\nDESTIN_BS12129         -1.1156696  0.1349208   -8.269  &lt; 2e-16 ***\nDESTIN_BS12149         -2.5207720  0.3285906   -7.671 1.70e-14 ***\nDESTIN_BS12169         -2.0215629  0.3863630   -5.232 1.67e-07 ***\nDESTIN_BS12199         -1.5314804  0.1554077   -9.855  &lt; 2e-16 ***\nDESTIN_BS12201         -1.7265774  0.5064943   -3.409 0.000652 ***\nDESTIN_BS12209         -1.6712110  0.2828961   -5.908 3.47e-09 ***\nDESTIN_BS13029         -2.3034513  0.2002954  -11.500  &lt; 2e-16 ***\nDESTIN_BS13089         -0.1321141  0.0882615   -1.497 0.134433    \nDESTIN_BS13141         -1.5354968  0.1309563  -11.725  &lt; 2e-16 ***\nDESTIN_BS13159         -0.6911630  0.0718806   -9.615  &lt; 2e-16 ***\nDESTIN_BS14019         -2.0104213  0.1533996  -13.106  &lt; 2e-16 ***\nDESTIN_BS14071         -1.8509567  0.3275901   -5.650 1.60e-08 ***\nDESTIN_BS14119         -0.2060731  0.0699303   -2.947 0.003210 ** \nDESTIN_BS14159         -0.6962679  0.0805539   -8.644  &lt; 2e-16 ***\nDESTIN_BS14171         -1.7287943  0.2921054   -5.918 3.25e-09 ***\nDESTIN_BS14189         -0.8559849  0.1015358   -8.430  &lt; 2e-16 ***\nDESTIN_BS14199         -0.0928472  0.0832591   -1.115 0.264782    \nDESTIN_BS14219         -0.2755076  0.0866072   -3.181 0.001467 ** \nDESTIN_BS14221         -1.5861037  0.1472056  -10.775  &lt; 2e-16 ***\nDESTIN_BS14241         -0.7150448  0.1006801   -7.102 1.23e-12 ***\nDESTIN_BS14259          0.5327778  0.1203859    4.426 9.62e-06 ***\nDESTIN_BS14291         -0.7521366  0.1194285   -6.298 3.02e-10 ***\nDESTIN_BS14519          0.4979183  0.1839367    2.707 0.006789 ** \nDESTIN_BS15071         -0.7270762  0.2360915   -3.080 0.002073 ** \nDESTIN_BS15159         -1.6287690  0.1943625   -8.380  &lt; 2e-16 ***\nDESTIN_BS15209         -0.0678891  0.0921041   -0.737 0.461067    \nDESTIN_BS16029         -1.0619456  0.1708242   -6.217 5.08e-10 ***\nDESTIN_BS16049         -0.0412560  0.0628991   -0.656 0.511883    \nDESTIN_BS16089          0.5387406  0.0541114    9.956  &lt; 2e-16 ***\nDESTIN_BS16099         -1.6436114  0.3810201   -4.314 1.61e-05 ***\nDESTIN_BS16159         -0.0505597  0.0603222   -0.838 0.401941    \nDESTIN_BS16179         -3.0736264  0.7151536   -4.298 1.72e-05 ***\nDESTIN_BS16181         -1.3225247  0.1657520   -7.979 1.48e-15 ***\nDESTIN_BS16239         -0.2637383  0.1237059   -2.132 0.033009 *  \nDESTIN_BS17011         -0.9054761  0.1595874   -5.674 1.40e-08 ***\nDESTIN_BS17039         -1.3502937  0.0684489  -19.727  &lt; 2e-16 ***\nDESTIN_BS17049          1.4192370  0.0444052   31.961  &lt; 2e-16 ***\nDESTIN_BS17059         -1.7308750  0.1307642  -13.237  &lt; 2e-16 ***\nDESTIN_BS17061         -0.4878176  0.1113032   -4.383 1.17e-05 ***\nDESTIN_BS17091         -0.1854501  0.1433315   -1.294 0.195716    \nDESTIN_BS17101         -0.8524943  0.0639232  -13.336  &lt; 2e-16 ***\nDESTIN_BS17179          2.2492643  0.0443500   50.716  &lt; 2e-16 ***\nDESTIN_BS17181         -4.3421753  0.1172238  -37.042  &lt; 2e-16 ***\nDESTIN_BS17189         -0.7167929  0.0635564  -11.278  &lt; 2e-16 ***\nDESTIN_BS17309         -1.4165295  0.1599832   -8.854  &lt; 2e-16 ***\nDESTIN_BS17339         -1.2342502  0.3391048   -3.640 0.000273 ***\nDESTIN_BS17389         -0.1176806  0.0601070   -1.958 0.050247 .  \nDESTIN_BS18011         -1.0573487  0.1369665   -7.720 1.17e-14 ***\nDESTIN_BS18141         -1.5709663  0.1082175  -14.517  &lt; 2e-16 ***\nDESTIN_BS18149         -1.7714032  0.1293436  -13.695  &lt; 2e-16 ***\nDESTIN_BS18191         -0.9826036  0.1669449   -5.886 3.96e-09 ***\nDESTIN_BS18241         -2.4404458  0.3571756   -6.833 8.34e-12 ***\nDESTIN_BS18261         -2.9254457  0.5022500   -5.825 5.72e-09 ***\nDESTIN_BS18301         -1.3345186  0.1917609   -6.959 3.42e-12 ***\nDESTIN_BS19059          1.3041154  0.0517487   25.201  &lt; 2e-16 ***\nDESTIN_BS19091         -0.8255731  0.1019021   -8.102 5.42e-16 ***\nDESTIN_BS20031          0.2917871  0.0633018    4.609 4.04e-06 ***\nDESTIN_BS20051         -0.2771643  0.0853514   -3.247 0.001165 ** \nDESTIN_BS20089         -0.0871245  0.0893344   -0.975 0.329430    \nDESTIN_BS20239         -1.2948677  0.0702056  -18.444  &lt; 2e-16 ***\nDESTIN_BS20281         -2.0739968  0.2580328   -8.038 9.15e-16 ***\nDESTIN_BS20299         -1.9764502  0.2042689   -9.676  &lt; 2e-16 ***\nDESTIN_BS20319         -4.9125464  0.4164169  -11.797  &lt; 2e-16 ***\nDESTIN_BS21019         -0.3319758  0.1372601   -2.419 0.015581 *  \nDESTIN_BS21049         -1.7311538  0.2138566   -8.095 5.73e-16 ***\nDESTIN_BS21051         -1.4282412  0.4514746   -3.164 0.001559 ** \nDESTIN_BS21079         -3.0364345  0.1666048  -18.225  &lt; 2e-16 ***\nDESTIN_BS21109         -2.2634885  0.4113608   -5.502 3.75e-08 ***\nDESTIN_BS21139         -3.2640084  0.3827236   -8.528  &lt; 2e-16 ***\nDESTIN_BS21159         -2.4400567  0.5038265   -4.843 1.28e-06 ***\nDESTIN_BS21179         -0.8670834  0.1658214   -5.229 1.70e-07 ***\nDESTIN_BS21351         -0.2495535  0.3693230   -0.676 0.499228    \nDESTIN_BS21369         -0.9642337  0.1047287   -9.207  &lt; 2e-16 ***\nDESTIN_BS21389         -0.7072773  0.1133039   -6.242 4.31e-10 ***\nDESTIN_BS21429          0.5536633  0.0559687    9.892  &lt; 2e-16 ***\nDESTIN_BS21501         -3.4246692  1.0035719   -3.412 0.000644 ***\nDESTIN_BS21561         -0.0853168  0.0776860   -1.098 0.272106    \nDESTIN_BS21611         -0.6810023  0.1231725   -5.529 3.22e-08 ***\nDESTIN_BS21631         -1.2376647  0.1028610  -12.032  &lt; 2e-16 ***\nDESTIN_BS21651         -0.8960420  0.1336984   -6.702 2.06e-11 ***\nDESTIN_BS21681         -1.1698295  0.0981528  -11.918  &lt; 2e-16 ***\nDESTIN_BS21771         -0.6976590  0.1128741   -6.181 6.38e-10 ***\nDESTIN_BS22169         -2.8507356  0.5367211   -5.311 1.09e-07 ***\nDESTIN_BS22241         -0.7366390  0.4827942   -1.526 0.127064    \nDESTIN_BS22289          2.4900368  1.1700304    2.128 0.033322 *  \nDESTIN_BS22349          0.6233304  0.1598807    3.899 9.67e-05 ***\nDESTIN_BS22479         -2.3833390  0.2372109  -10.047  &lt; 2e-16 ***\nDESTIN_BS22509          0.6916767  0.1644785    4.205 2.61e-05 ***\nDESTIN_BS22539         -5.0100923  0.7266639   -6.895 5.40e-12 ***\nDESTIN_BS23021         -4.0997384  1.0620627   -3.860 0.000113 ***\nDESTIN_BS23069         -1.1808306  0.4405224   -2.681 0.007351 ** \nDESTIN_BS23151         -0.3339496  1.2026136   -0.278 0.781253    \nDESTIN_BS23251         -1.6828707  1.1057571   -1.522 0.128030    \nDESTIN_BS23371          0.9596183  0.3340213    2.873 0.004067 ** \nDESTIN_BS23481         -1.6262189  1.1670062   -1.393 0.163470    \nDESTIN_BS23491          4.3915946  1.5532172    2.827 0.004692 ** \nDESTIN_BS24011         -2.3045544  1.1156663   -2.066 0.038863 *  \nDESTIN_BS24289         -0.7008552  1.2020510   -0.583 0.559860    \nDESTIN_BS24461                 NA         NA       NA       NA    \nDESTIN_BS24509         -1.2446380  1.0801259   -1.152 0.249194    \nDESTIN_BS25109                 NA         NA       NA       NA    \nDESTIN_BS25161          0.1709464  0.8821975    0.194 0.846353    \nDESTIN_BS25191          0.5390712  0.4108268    1.312 0.189466    \nDESTIN_BS25221                 NA         NA       NA       NA    \nDESTIN_BS25429          2.0892098  0.2392445    8.733  &lt; 2e-16 ***\nDESTIN_BS25519         -1.7721554  0.5162071   -3.433 0.000597 ***\nDESTIN_BS26131                 NA         NA       NA       NA    \nDESTIN_BS26241         -4.2045414  0.6250484   -6.727 1.73e-11 ***\nDESTIN_BS26269          4.2753815  0.4208764   10.158  &lt; 2e-16 ***\nDESTIN_BS26289          1.8066392  0.5750218    3.142 0.001679 ** \nDESTIN_BS26311         -5.1898170  0.6249383   -8.305  &lt; 2e-16 ***\nDESTIN_BS26349         -1.8427649  0.2748079   -6.706 2.01e-11 ***\nDESTIN_BS26389          2.6402822  0.3043075    8.676  &lt; 2e-16 ***\nDESTIN_BS26461                 NA         NA       NA       NA    \nDESTIN_BS27109          1.2342598  0.1063362   11.607  &lt; 2e-16 ***\nDESTIN_BS27141         -1.0091164  0.1649757   -6.117 9.55e-10 ***\nDESTIN_BS27209         -1.5824676  0.2492709   -6.348 2.18e-10 ***\nDESTIN_BS27219          1.1169207  0.5048688    2.212 0.026946 *  \nDESTIN_BS27279          0.2367599  0.2439139    0.971 0.331713    \nDESTIN_BS27341          0.3731510  0.0842522    4.429 9.47e-06 ***\nDESTIN_BS27401         -1.7142525  0.4826375   -3.552 0.000383 ***\nDESTIN_BS27421         -0.7334233  0.8314279   -0.882 0.377709    \nDESTIN_BS27431          0.3524185  0.0842828    4.181 2.90e-05 ***\nDESTIN_BS28031         -0.9968384  0.1717997   -5.802 6.54e-09 ***\nDESTIN_BS28059         -0.6542606  0.0886700   -7.379 1.60e-13 ***\nDESTIN_BS28089         -1.3439016  0.1583244   -8.488  &lt; 2e-16 ***\nDESTIN_BS28099          1.3414925  0.0630253   21.285  &lt; 2e-16 ***\nDESTIN_BS28211          1.4226645  0.0425441   33.440  &lt; 2e-16 ***\nDESTIN_BS28251         -2.3059908  0.2177418  -10.590  &lt; 2e-16 ***\nDESTIN_BS28271         -1.2959910  0.1282488  -10.105  &lt; 2e-16 ***\nDESTIN_BS28309         -2.3626070  0.2662875   -8.872  &lt; 2e-16 ***\nDESTIN_BS28361         -0.2871245  0.1674687   -1.714 0.086437 .  \nDESTIN_BS28409          1.3869169  0.0986259   14.062  &lt; 2e-16 ***\nDESTIN_BS28441         -0.6370204  0.2308494   -2.759 0.005790 ** \nDESTIN_BS28481         -1.2495357  0.1472387   -8.486  &lt; 2e-16 ***\nDESTIN_BS28491          0.1303839  0.0628907    2.073 0.038155 *  \nDESTIN_BS28511          1.1396264  0.0507734   22.445  &lt; 2e-16 ***\nDESTIN_BS28531         -0.2834618  0.0703288   -4.031 5.57e-05 ***\nDESTIN_BS28649         -0.2537918  0.0581068   -4.368 1.26e-05 ***\nDESTIN_BS28669         -3.6785466  0.1341340  -27.424  &lt; 2e-16 ***\nDESTIN_BS28689         -0.9665343  0.0996739   -9.697  &lt; 2e-16 ***\nDESTIN_BS28701         -2.7511451  1.0020519   -2.746 0.006042 ** \nDESTIN_BS29019         -0.6702407  1.0267477   -0.653 0.513898    \nDESTIN_BS29031         -0.0903250  0.1284060   -0.703 0.481786    \nDESTIN_BS29059         -3.8353492  1.0034504   -3.822 0.000132 ***\nDESTIN_BS29089          2.7572749  0.3363029    8.199 2.43e-16 ***\nDESTIN_BS29101         -2.2259112  0.4548765   -4.893 9.91e-07 ***\nDESTIN_BS30049         -0.6043420  0.2315819   -2.610 0.009064 ** \nDESTIN_BS30099         -2.6292354  0.4658731   -5.644 1.66e-08 ***\nDESTIN_BS30109         -0.8298276  0.3102461   -2.675 0.007479 ** \nDESTIN_BS30129          0.4544465  0.3065295    1.483 0.138193    \nDESTIN_BS40011          0.0674130  0.0528480    1.276 0.202097    \nDESTIN_BS40021         -0.9725558  0.0774414  -12.559  &lt; 2e-16 ***\nDESTIN_BS40031         -0.0985007  0.0628959   -1.566 0.117328    \nDESTIN_BS40049          0.5620255  0.0580177    9.687  &lt; 2e-16 ***\nDESTIN_BS40069         -0.2337566  0.0813229   -2.874 0.004048 ** \nDESTIN_BS40071         -1.7170627  0.1051357  -16.332  &lt; 2e-16 ***\nDESTIN_BS40089         -1.5433854  0.1330021  -11.604  &lt; 2e-16 ***\nDESTIN_BS40101         -2.7222788  0.0769046  -35.398  &lt; 2e-16 ***\nDESTIN_BS40191         -0.0037461  0.0535399   -0.070 0.944219    \nDESTIN_BS40209         -1.0783843  0.1389336   -7.762 8.37e-15 ***\nDESTIN_BS40221          0.0235649  0.0624859    0.377 0.706081    \nDESTIN_BS40249         -1.5605402  0.1418220  -11.004  &lt; 2e-16 ***\nDESTIN_BS41029         -0.5643399  0.0739670   -7.630 2.35e-14 ***\nDESTIN_BS41041         -0.3309659  0.0622357   -5.318 1.05e-07 ***\nDESTIN_BS41069         -0.3684312  0.0627702   -5.870 4.37e-09 ***\nDESTIN_BS41079         -1.4534706  0.0994462  -14.616  &lt; 2e-16 ***\nDESTIN_BS41119         -1.0689103  0.0903584  -11.830  &lt; 2e-16 ***\nDESTIN_BS41139         -1.6628781  0.2174613   -7.647 2.06e-14 ***\nDESTIN_BS42011         -0.3193186  0.0684262   -4.667 3.06e-06 ***\nDESTIN_BS42019         -0.2345306  0.0602497   -3.893 9.92e-05 ***\nDESTIN_BS42039         -0.2649887  0.0615364   -4.306 1.66e-05 ***\nDESTIN_BS42051          0.0099961  0.0640705    0.156 0.876019    \nDESTIN_BS42099          1.4953293  0.0663114   22.550  &lt; 2e-16 ***\nDESTIN_BS42111         -1.2343089  0.0898127  -13.743  &lt; 2e-16 ***\nDESTIN_BS42131         -1.0657795  0.1994680   -5.343 9.14e-08 ***\nDESTIN_BS42141         -0.7839721  0.0750573  -10.445  &lt; 2e-16 ***\nDESTIN_BS42149         -1.7245356  0.1050647  -16.414  &lt; 2e-16 ***\nDESTIN_BS42161         -0.1882060  0.0602666   -3.123 0.001791 ** \nDESTIN_BS42199         -1.4805318  0.2134113   -6.937 3.99e-12 ***\nDESTIN_BS42229         -0.6110419  0.1048841   -5.826 5.68e-09 ***\nDESTIN_BS43021         -1.3126545  0.0947900  -13.848  &lt; 2e-16 ***\nDESTIN_BS43061         -0.2597308  0.0594009   -4.373 1.23e-05 ***\nDESTIN_BS43111         -2.3628560  0.1621554  -14.572  &lt; 2e-16 ***\nDESTIN_BS43119          0.7418579  0.0658919   11.259  &lt; 2e-16 ***\nDESTIN_BS43131          0.4641860  0.0692033    6.708 1.98e-11 ***\nDESTIN_BS43179         -0.2728488  0.1024101   -2.664 0.007715 ** \nDESTIN_BS43191          0.8953876  0.0555294   16.125  &lt; 2e-16 ***\nDESTIN_BS43219          0.9359458  0.1548258    6.045 1.49e-09 ***\nDESTIN_BS43221          0.2498760  0.0839488    2.977 0.002915 ** \nDESTIN_BS43231         -0.7359940  0.1163324   -6.327 2.51e-10 ***\nDESTIN_BS43239          0.0142801  0.1084929    0.132 0.895283    \nDESTIN_BS43291         -3.7629747  0.3286743  -11.449  &lt; 2e-16 ***\nDESTIN_BS43311         -2.1814830  0.1903829  -11.458  &lt; 2e-16 ***\nDESTIN_BS43321         -0.0238682  0.1503114   -0.159 0.873833    \nDESTIN_BS43339         -0.6891327  0.1425053   -4.836 1.33e-06 ***\nDESTIN_BS43349         -0.2996814  0.0902770   -3.320 0.000902 ***\nDESTIN_BS43351          0.0976588  0.2256951    0.433 0.665231    \nDESTIN_BS43359          0.8349667  0.0961396    8.685  &lt; 2e-16 ***\nDESTIN_BS43511          0.4324175  0.0880261    4.912 9.00e-07 ***\nDESTIN_BS43561         -4.2549806  0.3261054  -13.048  &lt; 2e-16 ***\nDESTIN_BS43571          1.0633953  0.2538086    4.190 2.79e-05 ***\nDESTIN_BS43609         -0.0451456  0.2351921   -0.192 0.847780    \nDESTIN_BS43611         -0.4733702  0.0925986   -5.112 3.19e-07 ***\nDESTIN_BS43629         -1.6749740  0.2406678   -6.960 3.41e-12 ***\nDESTIN_BS43639         -2.3954331  0.5819417   -4.116 3.85e-05 ***\nDESTIN_BS43701         -1.2535062  1.0036406   -1.249 0.211680    \nDESTIN_BS43811         -1.4731896  0.1999612   -7.367 1.74e-13 ***\nDESTIN_BS43821         -2.0354136  0.1674672  -12.154  &lt; 2e-16 ***\nDESTIN_BS43891         -4.4608200  0.5817485   -7.668 1.75e-14 ***\nDESTIN_BS44029          2.0329946  0.0632997   32.117  &lt; 2e-16 ***\nDESTIN_BS44079          1.7337635  0.2388783    7.258 3.93e-13 ***\nDESTIN_BS44111          0.0420374  0.7278683    0.058 0.953944    \nDESTIN_BS44151         -1.1669240  0.1796734   -6.495 8.32e-11 ***\nDESTIN_BS44171         -0.3958830  0.2416705   -1.638 0.101399    \nDESTIN_BS44191         -1.5491033  0.1565870   -9.893  &lt; 2e-16 ***\nDESTIN_BS44229          0.4124543  0.0883833    4.667 3.06e-06 ***\nDESTIN_BS44261          0.2265515  0.0617220    3.671 0.000242 ***\nDESTIN_BS44299         -0.3719421  0.2814773   -1.321 0.186370    \nDESTIN_BS44411         -1.6382776  0.1771265   -9.249  &lt; 2e-16 ***\nDESTIN_BS44519         -0.2216344  0.6677551   -0.332 0.739957    \nDESTIN_BS44549          1.3774115  0.2497207    5.516 3.47e-08 ***\nDESTIN_BS44619         -0.0598747  0.0868406   -0.689 0.490523    \nDESTIN_BS44651          1.0006110  0.1929571    5.186 2.15e-07 ***\nDESTIN_BS44701          1.6319023  0.1601558   10.189  &lt; 2e-16 ***\nDESTIN_BS44801          2.1100929  0.1620012   13.025  &lt; 2e-16 ***\nDESTIN_BS44919         -3.4235084  0.5064597   -6.760 1.38e-11 ***\nDESTIN_BS45071         -1.3448684  0.1857225   -7.241 4.44e-13 ***\nDESTIN_BS45079          1.5579919  0.0724508   21.504  &lt; 2e-16 ***\nDESTIN_BS45099         -1.1878157  0.5842066   -2.033 0.042031 *  \nDESTIN_BS45249          0.5816703  1.0472962    0.555 0.578620    \nDESTIN_BS45279         -2.8714631  1.0519001   -2.730 0.006338 ** \nDESTIN_BS45329          3.5134916  1.0418839    3.372 0.000746 ***\nDESTIN_BS45359         -0.4220536  0.4564433   -0.925 0.355144    \nDESTIN_BS45399         -2.2975434  1.0330094   -2.224 0.026140 *  \nDESTIN_BS45411         -0.5057839  0.4835029   -1.046 0.295523    \nDESTIN_BS45441          0.6282810  1.4281390    0.440 0.659988    \nDESTIN_BS45489         -1.7437233  1.0541514   -1.654 0.098097 .  \nDESTIN_BS46029         -0.6136719  0.4260044   -1.441 0.149718    \nDESTIN_BS46049         -0.0451471  0.7577648   -0.060 0.952491    \nDESTIN_BS46059          0.0316502  0.6383967    0.050 0.960459    \nDESTIN_BS46088         -0.3184142  0.1008921   -3.156 0.001600 ** \nDESTIN_BS46111         -1.0603560  0.1281243   -8.276  &lt; 2e-16 ***\nDESTIN_BS46171         -0.9222757  0.1927145   -4.786 1.70e-06 ***\nDESTIN_BS46179          1.0364940  0.3110638    3.332 0.000862 ***\nDESTIN_BS46199                 NA         NA       NA       NA    \nDESTIN_BS46261         -1.2496803  0.1389318   -8.995  &lt; 2e-16 ***\nDESTIN_BS46279         -0.5318489  0.0983356   -5.409 6.36e-08 ***\nDESTIN_BS46321          2.9868705  0.7823485    3.818 0.000135 ***\nDESTIN_BS46329          0.7370577  0.2741437    2.689 0.007176 ** \nDESTIN_BS46359         -4.6023583  0.4106594  -11.207  &lt; 2e-16 ***\nDESTIN_BS46371          1.3526934  0.2226741    6.075 1.24e-09 ***\nDESTIN_BS46381          0.3349148  0.2296685    1.458 0.144771    \nDESTIN_BS46391         -1.0669621  1.0364444   -1.029 0.303271    \nDESTIN_BS46419         -0.3392259  0.0820982   -4.132 3.60e-05 ***\nDESTIN_BS46449         -0.1469153  0.1588784   -0.925 0.355120    \nDESTIN_BS46469         -0.3259644  0.0831478   -3.920 8.84e-05 ***\nDESTIN_BS46571          1.7498616  0.1379566   12.684  &lt; 2e-16 ***\nDESTIN_BS46719         -1.0483855  0.1313480   -7.982 1.44e-15 ***\nDESTIN_BS46739         -0.4693877  0.0896200   -5.238 1.63e-07 ***\nDESTIN_BS46781         -0.0872469  0.3822402   -0.228 0.819451    \nDESTIN_BS46791          2.1553952  0.1835987   11.740  &lt; 2e-16 ***\nDESTIN_BS46799         -0.0086037  0.2928742   -0.029 0.976564    \nDESTIN_BS46931          0.6266707  1.0224111    0.613 0.539920    \nDESTIN_BS47041          1.0036527  0.1360483    7.377 1.62e-13 ***\nDESTIN_BS47061         -1.9547089  0.2990674   -6.536 6.32e-11 ***\nDESTIN_BS47071         -0.3294551  0.1678508   -1.963 0.049671 *  \nDESTIN_BS47091         -0.8159208  0.2897503   -2.816 0.004863 ** \nDESTIN_BS47529         -1.3257040  0.5951837   -2.227 0.025921 *  \nDESTIN_BS47541         -0.9607230  0.2608024   -3.684 0.000230 ***\nDESTIN_BS47551         -3.8817902  0.4086744   -9.498  &lt; 2e-16 ***\nDESTIN_BS47579          0.9997403  0.1345430    7.431 1.08e-13 ***\nDESTIN_BS47609          0.3018926  0.0744967    4.052 5.07e-05 ***\nDESTIN_BS47629         -1.7321113  0.1313763  -13.184  &lt; 2e-16 ***\nDESTIN_BS47809         -0.7931540  0.1172232   -6.766 1.32e-11 ***\nDESTIN_BS47821         -0.7891434  0.4375162   -1.804 0.071280 .  \nDESTIN_BS48131          0.4102050  0.1838149    2.232 0.025640 *  \nDESTIN_BS48141         -3.1194419  0.4106211   -7.597 3.03e-14 ***\nDESTIN_BS49039         -1.9707713  1.0355502   -1.903 0.057026 .  \nDESTIN_BS49049         -2.6438895  1.0250230   -2.579 0.009899 ** \nDESTIN_BS49051         -0.1603909  1.4281468   -0.112 0.910580    \nDESTIN_BS49069         -1.2264325  0.4118670   -2.978 0.002904 ** \nDESTIN_BS49101         -0.5884937  0.3039776   -1.936 0.052871 .  \nDESTIN_BS49111         -1.5985453  0.5842124   -2.736 0.006215 ** \nDESTIN_BS49131         -1.7284548  0.9614307   -1.798 0.072210 .  \nDESTIN_BS49141                 NA         NA       NA       NA    \nDESTIN_BS49159          0.8467348  0.1989442    4.256 2.08e-05 ***\nDESTIN_BS49171         -2.1401170  0.8022586   -2.668 0.007639 ** \nDESTIN_BS49209          0.6152652  1.1357036    0.542 0.587992    \nDESTIN_BS49249         -1.1621126  0.7006765   -1.659 0.097205 .  \nDESTIN_BS50021          0.6248185  0.0523028   11.946  &lt; 2e-16 ***\nDESTIN_BS50059         -0.3071359  0.0724032   -4.242 2.22e-05 ***\nDESTIN_BS50071         -2.1105384  0.2710339   -7.787 6.86e-15 ***\nDESTIN_BS50079         -1.6715272  0.2827688   -5.911 3.39e-09 ***\nDESTIN_BS50121         -1.3311923  0.1568421   -8.487  &lt; 2e-16 ***\nDESTIN_BS50169         -2.0283464  0.1220683  -16.616  &lt; 2e-16 ***\nDESTIN_BS50211         -0.3503133  0.0702896   -4.984 6.23e-07 ***\nDESTIN_BS50279          1.0193968  0.1053217    9.679  &lt; 2e-16 ***\nDESTIN_BS50321         -0.5703693  0.1410107   -4.045 5.24e-05 ***\nDESTIN_BS50991          0.0174471  0.0510424    0.342 0.732489    \nDESTIN_BS51039         -2.3678413  0.2616375   -9.050  &lt; 2e-16 ***\nDESTIN_BS51119         -2.7331615  0.2613637  -10.457  &lt; 2e-16 ***\nDESTIN_BS52011         -1.8585965  0.2279896   -8.152 3.58e-16 ***\nDESTIN_BS52061         -2.6510803  0.1638889  -16.176  &lt; 2e-16 ***\nDESTIN_BS52071          0.0864275  0.0454811    1.900 0.057394 .  \nDESTIN_BS52089         -0.4309364  0.0588071   -7.328 2.34e-13 ***\nDESTIN_BS52109         -0.6507607  0.0608474  -10.695  &lt; 2e-16 ***\nDESTIN_BS52179         -1.2247756  0.1377884   -8.889  &lt; 2e-16 ***\nDESTIN_BS52199         -3.1412350  0.1919901  -16.361  &lt; 2e-16 ***\nDESTIN_BS52211         -0.9734124  0.1745722   -5.576 2.46e-08 ***\nDESTIN_BS52231         -0.5366691  0.0594589   -9.026  &lt; 2e-16 ***\nDESTIN_BS52299          0.8718016  0.3202577    2.722 0.006485 ** \nDESTIN_BS52301                 NA         NA       NA       NA    \nDESTIN_BS52351         -0.8376809  0.1421662   -5.892 3.81e-09 ***\nDESTIN_BS52401         -2.4692227  0.2391540  -10.325  &lt; 2e-16 ***\nDESTIN_BS52449         -2.0395794  0.1910937  -10.673  &lt; 2e-16 ***\nDESTIN_BS52479         -0.2993316  0.0785113   -3.813 0.000138 ***\nDESTIN_BS52529                 NA         NA       NA       NA    \nDESTIN_BS53009         -0.3291093  0.0444107   -7.411 1.26e-13 ***\nDESTIN_BS53039         -0.5010503  0.0676874   -7.402 1.34e-13 ***\nDESTIN_BS53059          0.8978622  0.0527421   17.024  &lt; 2e-16 ***\nDESTIN_BS53079         -1.4361702  0.1464531   -9.806  &lt; 2e-16 ***\nDESTIN_BS53099         -2.2290550  0.2136257  -10.434  &lt; 2e-16 ***\nDESTIN_BS53111         -2.9079528  0.3361035   -8.652  &lt; 2e-16 ***\nDESTIN_BS53121         -0.4740563  0.0696463   -6.807 9.99e-12 ***\nDESTIN_BS53211         -2.5684447  0.0817670  -31.412  &lt; 2e-16 ***\nDESTIN_BS53281         -0.9996828  0.0615789  -16.234  &lt; 2e-16 ***\nDESTIN_BS53299          0.1599023  0.0644423    2.481 0.013090 *  \nDESTIN_BS53351          1.2520768  0.0639547   19.578  &lt; 2e-16 ***\nDESTIN_BS53359         -2.5577913  0.1967716  -12.999  &lt; 2e-16 ***\nDESTIN_BS53371          2.2751534  0.0475055   47.892  &lt; 2e-16 ***\nDESTIN_BS53379         -1.0531894  0.0726901  -14.489  &lt; 2e-16 ***\nDESTIN_BS53389         -0.8149831  0.0605730  -13.455  &lt; 2e-16 ***\nDESTIN_BS53419         -0.5165059  0.1069495   -4.829 1.37e-06 ***\nDESTIN_BS54011          0.4193072  0.0478490    8.763  &lt; 2e-16 ***\nDESTIN_BS54049         -0.4949329  0.0806910   -6.134 8.59e-10 ***\nDESTIN_BS54051         -1.7472267  0.1155794  -15.117  &lt; 2e-16 ***\nDESTIN_BS54109         -2.0261917  0.0791206  -25.609  &lt; 2e-16 ***\nDESTIN_BS54169         -1.3739281  0.2269009   -6.055 1.40e-09 ***\nDESTIN_BS54189         -0.1686362  0.1238077   -1.362 0.173172    \nDESTIN_BS54229         -0.5929247  0.1175076   -5.046 4.52e-07 ***\nDESTIN_BS54247         -0.7879055  0.0634034  -12.427  &lt; 2e-16 ***\nDESTIN_BS54279         -1.0110456  0.1052267   -9.608  &lt; 2e-16 ***\nDESTIN_BS54281         -0.4110160  0.0768677   -5.347 8.94e-08 ***\nDESTIN_BS54311         -0.1964724  0.0452969   -4.337 1.44e-05 ***\nDESTIN_BS54339         -0.4395933  0.1290618   -3.406 0.000659 ***\nDESTIN_BS54351         -0.6641388  0.1119145   -5.934 2.95e-09 ***\nDESTIN_BS54489         -0.3338825  0.0876879   -3.808 0.000140 ***\nDESTIN_BS54491         -2.7458576  0.2627240  -10.451  &lt; 2e-16 ***\nDESTIN_BS54539         -1.7942620  0.0909838  -19.721  &lt; 2e-16 ***\nDESTIN_BS54589          0.0986667  0.0819560    1.204 0.228628    \nDESTIN_BS54611         -1.0617470  0.1349983   -7.865 3.69e-15 ***\nDESTIN_BS54641         -1.2111953  0.2008379   -6.031 1.63e-09 ***\nDESTIN_BS55021         -0.0479515  0.2299242   -0.209 0.834797    \nDESTIN_BS55049         -2.0477789  0.2225215   -9.203  &lt; 2e-16 ***\nDESTIN_BS55081         -1.7410105  0.1571707  -11.077  &lt; 2e-16 ***\nDESTIN_BS55119         -0.7820035  0.1011170   -7.734 1.05e-14 ***\nDESTIN_BS55171         -1.0270874  0.0945543  -10.862  &lt; 2e-16 ***\nDESTIN_BS55231         -2.3097968  0.5047916   -4.576 4.75e-06 ***\nDESTIN_BS55249         -2.4555705  0.5062487   -4.851 1.23e-06 ***\nDESTIN_BS55259         -2.0189065  0.5817595   -3.470 0.000520 ***\nDESTIN_BS55289         -2.2453309  1.0026487   -2.239 0.025130 *  \nDESTIN_BS56021         -0.0480557  0.0778225   -0.618 0.536902    \nDESTIN_BS56041         -1.6732372  0.1543148  -10.843  &lt; 2e-16 ***\nDESTIN_BS56059          0.7541692  0.0721732   10.449  &lt; 2e-16 ***\nDESTIN_BS56069         -1.1355279  0.1333850   -8.513  &lt; 2e-16 ***\nDESTIN_BS56099          2.7019829  0.0648188   41.685  &lt; 2e-16 ***\nDESTIN_BS56269         -1.8635220  0.2940608   -6.337 2.34e-10 ***\nDESTIN_BS57059         -0.9921560  0.3391182   -2.926 0.003437 ** \nDESTIN_BS57061         -1.3235260  0.1560010   -8.484  &lt; 2e-16 ***\nDESTIN_BS57071         -0.2257315  0.0804587   -2.806 0.005023 ** \nDESTIN_BS57111         -0.5505234  0.0684287   -8.045 8.61e-16 ***\nDESTIN_BS57129          0.5765682  0.0910210    6.334 2.38e-10 ***\nDESTIN_BS57139         -0.2219926  0.2904755   -0.764 0.444725    \nDESTIN_BS57149         -1.4716866  0.5050323   -2.914 0.003568 ** \nDESTIN_BS58031         -1.9307971  0.2589316   -7.457 8.87e-14 ***\nDESTIN_BS58101         -0.2388371  0.0808282   -2.955 0.003128 ** \nDESTIN_BS58121          0.3939092  0.1202898    3.275 0.001058 ** \nDESTIN_BS58201          0.3284366  0.4677836    0.702 0.482609    \nDESTIN_BS58221         -0.3681624  0.0847749   -4.343 1.41e-05 ***\nDESTIN_BS58289         -0.0493370  0.1223206   -0.403 0.686697    \nDESTIN_BS58299         -0.8450394  0.1140833   -7.407 1.29e-13 ***\nDESTIN_BS58351          0.4273648  0.2477186    1.725 0.084491 .  \nDESTIN_BS58369         -1.2126818  0.3004741   -4.036 5.44e-05 ***\nDESTIN_BS58401         -1.1719791  0.1980678   -5.917 3.28e-09 ***\nDESTIN_BS58451         -3.4634955  1.0099902   -3.429 0.000605 ***\nDESTIN_BS58541          5.0133523  0.1434596   34.946  &lt; 2e-16 ***\nDESTIN_BS59039          0.2292265  0.1124073    2.039 0.041425 *  \nDESTIN_BS59079          2.2508569  0.0464571   48.450  &lt; 2e-16 ***\nDESTIN_BS59149          0.0252431  0.0705175    0.358 0.720366    \nDESTIN_BS59189          0.7537675  0.0946909    7.960 1.72e-15 ***\nDESTIN_BS59201         -0.4073485  0.1345258   -3.028 0.002462 ** \nDESTIN_BS59249         -0.9369402  0.1856135   -5.048 4.47e-07 ***\nDESTIN_BS59259          3.1528986  0.0894529   35.246  &lt; 2e-16 ***\nDESTIN_BS59261          0.6542575  0.0627012   10.435  &lt; 2e-16 ***\nDESTIN_BS59291          0.3665540  0.1920754    1.908 0.056341 .  \nDESTIN_BS59311         -3.8790220  0.2699297  -14.370  &lt; 2e-16 ***\nDESTIN_BS59329          0.1907153  0.1994040    0.956 0.338857    \nDESTIN_BS59401         -1.9233074  0.2410381   -7.979 1.47e-15 ***\nDESTIN_BS59471          0.5712349  0.1078560    5.296 1.18e-07 ***\nDESTIN_BS59509         -2.2654474  0.3818316   -5.933 2.97e-09 ***\nDESTIN_BS59511         -0.3579922  0.1363275   -2.626 0.008640 ** \nDESTIN_BS59521          0.6475265  0.0619014   10.461  &lt; 2e-16 ***\nDESTIN_BS59579          1.5526751  0.1193731   13.007  &lt; 2e-16 ***\nDESTIN_BS59601          1.6565446  0.1030497   16.075  &lt; 2e-16 ***\nDESTIN_BS59619          0.5629324  0.0981437    5.736 9.71e-09 ***\nDESTIN_BS59649         -1.2071757  0.3136694   -3.849 0.000119 ***\nDESTIN_BS59711         -0.5550218  0.1810097   -3.066 0.002168 ** \nDESTIN_BS59721         -0.9187986  0.2006797   -4.578 4.68e-06 ***\nDESTIN_BS59739         -1.4133243  0.2482012   -5.694 1.24e-08 ***\nDESTIN_BS59749         -1.1356563  0.2196193   -5.171 2.33e-07 ***\nDESTIN_BS60029         -1.6630894  0.1330801  -12.497  &lt; 2e-16 ***\nDESTIN_BS60051         -2.3728793  0.2614654   -9.075  &lt; 2e-16 ***\nDESTIN_BS60059         -1.9089949  0.1221542  -15.628  &lt; 2e-16 ***\nDESTIN_BS60061         -1.2038861  0.1612042   -7.468 8.14e-14 ***\nDESTIN_BS60089         -1.0316025  0.0590180  -17.479  &lt; 2e-16 ***\nDESTIN_BS60159         -1.0658588  0.0660699  -16.132  &lt; 2e-16 ***\nDESTIN_BS60199          1.0321422  0.0550867   18.737  &lt; 2e-16 ***\nDESTIN_BS60221         -1.0362889  0.0949315  -10.916  &lt; 2e-16 ***\nDESTIN_BS60261          0.4193690  0.0535909    7.825 5.06e-15 ***\nDESTIN_BS61011         -1.4275637  0.0852633  -16.743  &lt; 2e-16 ***\nDESTIN_BS61079          1.6056362  0.0797732   20.128  &lt; 2e-16 ***\nDESTIN_BS62011         -1.6919049  0.1156065  -14.635  &lt; 2e-16 ***\nDESTIN_BS62039         -1.5169638  0.1069575  -14.183  &lt; 2e-16 ***\nDESTIN_BS62099         -1.7088358  0.2549560   -6.702 2.05e-11 ***\nDESTIN_BS62111         -1.3151297  0.0829196  -15.860  &lt; 2e-16 ***\nDESTIN_BS63021         -1.3410691  0.0712008  -18.835  &lt; 2e-16 ***\nDESTIN_BS63049         -0.4202924  0.0682211   -6.161 7.24e-10 ***\nDESTIN_BS63139         -0.5966132  0.1057910   -5.640 1.71e-08 ***\nDESTIN_BS63149         -0.9986812  0.0576275  -17.330  &lt; 2e-16 ***\nDESTIN_BS63161         -1.1451198  0.2202228   -5.200 1.99e-07 ***\nDESTIN_BS63209         -2.3814255  0.1358903  -17.525  &lt; 2e-16 ***\nDESTIN_BS63229         -0.8067304  0.0987031   -8.173 3.00e-16 ***\nDESTIN_BS63281         -0.3146985  0.0820552   -3.835 0.000125 ***\nDESTIN_BS63289         -0.2493465  0.0880050   -2.833 0.004607 ** \nDESTIN_BS63309         -0.4527345  0.0768096   -5.894 3.76e-09 ***\nDESTIN_BS63321         -1.2646930  0.1113810  -11.355  &lt; 2e-16 ***\nDESTIN_BS63329          0.3531455  0.0852489    4.143 3.44e-05 ***\nDESTIN_BS63331         -1.8572105  0.1112379  -16.696  &lt; 2e-16 ***\nDESTIN_BS63369         -0.6902414  0.0897774   -7.688 1.49e-14 ***\nDESTIN_BS64011         -1.4585677  0.0978914  -14.900  &lt; 2e-16 ***\nDESTIN_BS64019         -0.6525525  0.0883380   -7.387 1.50e-13 ***\nDESTIN_BS64029         -0.9346028  0.1134672   -8.237  &lt; 2e-16 ***\nDESTIN_BS64119         -0.0412884  0.0715680   -0.577 0.563999    \nDESTIN_BS64121         -0.7972329  0.0713144  -11.179  &lt; 2e-16 ***\nDESTIN_BS64131         -4.5898764  0.5798311   -7.916 2.46e-15 ***\nDESTIN_BS64201         -0.7755641  0.0609020  -12.735  &lt; 2e-16 ***\nDESTIN_BS64229         -2.8456461  0.2917555   -9.754  &lt; 2e-16 ***\nDESTIN_BS64311         -0.3854722  0.1070956   -3.599 0.000319 ***\nDESTIN_BS64371         -1.6241795  0.1938461   -8.379  &lt; 2e-16 ***\nDESTIN_BS64411          0.4794179  0.0723070    6.630 3.35e-11 ***\nDESTIN_BS64491         -0.1117454  0.0623365   -1.793 0.073034 .  \nDESTIN_BS64541          0.5293351  0.0651545    8.124 4.50e-16 ***\nDESTIN_BS64629         -1.6761964  0.1109533  -15.107  &lt; 2e-16 ***\nDESTIN_BS65061         -0.2951062  0.0679802   -4.341 1.42e-05 ***\nDESTIN_BS65079         -0.3152869  0.2195153   -1.436 0.150921    \nDESTIN_BS65181         -0.5434179  0.1261632   -4.307 1.65e-05 ***\nDESTIN_BS65209         -2.0385924  0.1463537  -13.929  &lt; 2e-16 ***\nDESTIN_BS65221         -0.7225081  0.1763103   -4.098 4.17e-05 ***\nDESTIN_BS65231         -0.2408740  0.0696167   -3.460 0.000540 ***\nDESTIN_BS65381         -1.3369382  0.3453956   -3.871 0.000109 ***\nDESTIN_BS65461         -2.7119175  0.2548030  -10.643  &lt; 2e-16 ***\nDESTIN_BS65481                 NA         NA       NA       NA    \nDESTIN_BS66019         -2.3865020  0.3156287   -7.561 4.00e-14 ***\nDESTIN_BS66039         -0.7650660  0.0494624  -15.468  &lt; 2e-16 ***\nDESTIN_BS66081         -1.9839506  0.2066939   -9.598  &lt; 2e-16 ***\nDESTIN_BS66099         -1.1806153  0.0534261  -22.098  &lt; 2e-16 ***\nDESTIN_BS66139         -2.9090827  0.1998694  -14.555  &lt; 2e-16 ***\nDESTIN_BS66149         -1.9713839  0.1825763  -10.798  &lt; 2e-16 ***\nDESTIN_BS66181         -1.8900961  0.4711455   -4.012 6.03e-05 ***\nDESTIN_BS66241         -1.8307331  0.7422180   -2.467 0.013641 *  \nDESTIN_BS66301         -1.8754212  0.1439245  -13.031  &lt; 2e-16 ***\nDESTIN_BS66311         -3.0312977  0.2194165  -13.815  &lt; 2e-16 ***\nDESTIN_BS66321         -4.6443947  0.2348659  -19.775  &lt; 2e-16 ***\nDESTIN_BS66351          1.4778748  0.0426395   34.660  &lt; 2e-16 ***\nDESTIN_BS66371         -0.1093891  0.0462442   -2.365 0.018007 *  \nDESTIN_BS66381          0.3118984  0.0573343    5.440 5.33e-08 ***\nDESTIN_BS66399         -1.8771682  0.1078122  -17.411  &lt; 2e-16 ***\nDESTIN_BS66409         -2.9789259  0.1249682  -23.837  &lt; 2e-16 ***\nDESTIN_BS66419         -3.4765636  0.1914919  -18.155  &lt; 2e-16 ***\nDESTIN_BS66421         -0.7481872  0.0788180   -9.493  &lt; 2e-16 ***\nDESTIN_BS66451         -2.2735258  0.2477101   -9.178  &lt; 2e-16 ***\nDESTIN_BS66499         -1.0247515  0.0964400  -10.626  &lt; 2e-16 ***\nDESTIN_BS66581         -2.3556547  0.1796118  -13.115  &lt; 2e-16 ***\nDESTIN_BS67021         -1.3703628  0.1382813   -9.910  &lt; 2e-16 ***\nDESTIN_BS67059          0.4817526  0.0500353    9.628  &lt; 2e-16 ***\nDESTIN_BS67079         -0.4700838  0.0632515   -7.432 1.07e-13 ***\nDESTIN_BS67101         -1.2238195  0.1617411   -7.567 3.83e-14 ***\nDESTIN_BS67121         -0.7950270  0.1141593   -6.964 3.30e-12 ***\nDESTIN_BS67171         -0.1103188  0.1374687   -0.803 0.422263    \nDESTIN_BS67229         -0.2323448  0.1790407   -1.298 0.194383    \nDESTIN_BS67321         -0.9695531  0.1064318   -9.110  &lt; 2e-16 ***\nDESTIN_BS67371          1.5552998  0.0603827   25.757  &lt; 2e-16 ***\nDESTIN_BS67389         -0.8041413  0.2738260   -2.937 0.003317 ** \nDESTIN_BS67499         -0.0124221  0.1347980   -0.092 0.926576    \nDESTIN_BS67599         -0.9364096  0.0949648   -9.861  &lt; 2e-16 ***\nDESTIN_BS67619         -1.1654631  0.0942490  -12.366  &lt; 2e-16 ***\nDESTIN_BS67659         -0.8434748  0.1402636   -6.013 1.82e-09 ***\nDESTIN_BS68029          0.3117095  0.0866312    3.598 0.000321 ***\nDESTIN_BS68039         -0.5233121  0.1213531   -4.312 1.62e-05 ***\nDESTIN_BS68101         -3.0123489  0.2932069  -10.274  &lt; 2e-16 ***\nDESTIN_BS68111         -0.0522629  0.0779101   -0.671 0.502341    \nDESTIN_BS68151         -2.0275225  0.2722535   -7.447 9.54e-14 ***\nDESTIN_BS70019         -0.5556846  0.0697095   -7.971 1.57e-15 ***\nDESTIN_BS70021         -1.8152681  0.1543070  -11.764  &lt; 2e-16 ***\nDESTIN_BS70041          0.6097327  0.0625499    9.748  &lt; 2e-16 ***\nDESTIN_BS70051         -0.4991761  0.0935811   -5.334 9.60e-08 ***\nDESTIN_BS70079         -2.4700440  0.1940653  -12.728  &lt; 2e-16 ***\nDESTIN_BS70101         -0.8732802  0.0796592  -10.963  &lt; 2e-16 ***\nDESTIN_BS70109         -1.1010047  0.0878042  -12.539  &lt; 2e-16 ***\nDESTIN_BS70119         -0.2127606  0.0730875   -2.911 0.003602 ** \nDESTIN_BS70121         -0.2864449  0.0925095   -3.096 0.001959 ** \nDESTIN_BS70231         -1.9223749  0.2087521   -9.209  &lt; 2e-16 ***\nDESTIN_BS70279         -0.4614358  0.0842310   -5.478 4.30e-08 ***\nDESTIN_BS70291         -0.9379115  0.0787265  -11.914  &lt; 2e-16 ***\nDESTIN_BS70401         -5.0172700  0.7110196   -7.056 1.71e-12 ***\nDESTIN_BS71011         -1.0044251  0.1509731   -6.653 2.87e-11 ***\nDESTIN_BS71051         -2.0880016  0.2621271   -7.966 1.64e-15 ***\nDESTIN_BS71071         -1.4591875  0.1076935  -13.549  &lt; 2e-16 ***\nDESTIN_BS71091          0.1466912  0.0495894    2.958 0.003095 ** \nDESTIN_BS71119         -0.0475657  0.1038697   -0.458 0.646999    \nDESTIN_BS71121         -1.3694399  0.0920415  -14.879  &lt; 2e-16 ***\nDESTIN_BS71129         -0.2960166  0.0746716   -3.964 7.36e-05 ***\nDESTIN_BS71169         -1.5249864  0.0975071  -15.640  &lt; 2e-16 ***\nDESTIN_BS71171         -2.1861275  0.3053708   -7.159 8.13e-13 ***\nDESTIN_BS72041          0.2513241  0.0712440    3.528 0.000419 ***\nDESTIN_BS72061          1.1204421  0.0474189   23.629  &lt; 2e-16 ***\nDESTIN_BS73019         -1.6526736  0.2344589   -7.049 1.80e-12 ***\nDESTIN_BS74031         -1.3783513  0.2256233   -6.109 1.00e-09 ***\nDESTIN_BS74041         -1.7788734  0.4253064   -4.183 2.88e-05 ***\nDESTIN_BS75031          0.3526777  0.1101250    3.203 0.001362 ** \nDESTIN_BS75131         -0.3703126  0.0828552   -4.469 7.84e-06 ***\nDESTIN_BS75141          0.5232559  0.0730937    7.159 8.14e-13 ***\nDESTIN_BS75151          1.2228111  0.0820094   14.911  &lt; 2e-16 ***\nDESTIN_BS75201          0.3300178  0.1746476    1.890 0.058809 .  \nDESTIN_BS75209         -0.3762977  0.1377900   -2.731 0.006315 ** \nDESTIN_BS75221         -0.2967552  0.0744408   -3.986 6.71e-05 ***\nDESTIN_BS75269         -0.3717492  0.1103868   -3.368 0.000758 ***\nDESTIN_BS75271          1.0265969  0.0572781   17.923  &lt; 2e-16 ***\nDESTIN_BS75299         -1.0599710  0.0978751  -10.830  &lt; 2e-16 ***\nDESTIN_BS75359          1.8074057  0.0541292   33.391  &lt; 2e-16 ***\nDESTIN_BS75381         -2.8931236  0.5896448   -4.907 9.27e-07 ***\nDESTIN_BS75419         -0.6478904  0.1154411   -5.612 2.00e-08 ***\nDESTIN_BS76079         -0.0153380  0.0583340   -0.263 0.792602    \nDESTIN_BS76109          0.9410556  0.0478890   19.651  &lt; 2e-16 ***\nDESTIN_BS76131          1.4470236  0.0463333   31.231  &lt; 2e-16 ***\nDESTIN_BS76159         -0.7766007  0.2495175   -3.112 0.001856 ** \nDESTIN_BS76161         -1.1227317  0.2005478   -5.598 2.16e-08 ***\nDESTIN_BS76181         -0.1321027  0.1663465   -0.794 0.427113    \nDESTIN_BS76201         -1.1992524  0.1695978   -7.071 1.54e-12 ***\nDESTIN_BS76209         -1.1593313  0.0779846  -14.866  &lt; 2e-16 ***\nDESTIN_BS76241         -0.4856245  0.0650201   -7.469 8.09e-14 ***\nDESTIN_BS76249         -0.1109590  0.0491955   -2.255 0.024104 *  \nDESTIN_BS76339                 NA         NA       NA       NA    \nDESTIN_BS76391         -1.7000715  0.1638372  -10.377  &lt; 2e-16 ***\nDESTIN_BS76441         -1.1070251  0.2709390   -4.086 4.39e-05 ***\nDESTIN_BS76459         -2.1773368  0.5071108   -4.294 1.76e-05 ***\nDESTIN_BS77011          0.2870946  0.0572187    5.017 5.23e-07 ***\nDESTIN_BS77049         -1.5139981  0.1159831  -13.054  &lt; 2e-16 ***\nDESTIN_BS77091         -3.0896248  0.5061673   -6.104 1.03e-09 ***\nDESTIN_BS77111         -0.8728753  0.2220199   -3.932 8.44e-05 ***\nDESTIN_BS77129          0.3009995  0.1378046    2.184 0.028944 *  \nDESTIN_BS77211         -3.4641676  1.0041873   -3.450 0.000561 ***\nDESTIN_BS77269         -1.5252175  0.2238373   -6.814 9.49e-12 ***\nDESTIN_BS77279         -1.1006547  0.1170319   -9.405  &lt; 2e-16 ***\nDESTIN_BS77331          0.1365300  0.0645883    2.114 0.034528 *  \nDESTIN_BS77379         -1.8437863  0.2970276   -6.207 5.38e-10 ***\nDESTIN_BS78061          0.4478694  0.0500237    8.953  &lt; 2e-16 ***\nDESTIN_BS78081         -1.6420273  0.5842103   -2.811 0.004944 ** \nDESTIN_BS78129         -1.3044589  0.3372952   -3.867 0.000110 ***\nDESTIN_BS78131         -2.1559171  0.2935039   -7.345 2.05e-13 ***\nDESTIN_BS78139         -2.7662966  0.4336007   -6.380 1.77e-10 ***\nDESTIN_BS78191         -1.3478737  0.1046338  -12.882  &lt; 2e-16 ***\nDESTIN_BS78271                 NA         NA       NA       NA    \nDESTIN_BS80029         -1.0130708  0.0775677  -13.060  &lt; 2e-16 ***\nDESTIN_BS80049         -0.1238524  0.0537575   -2.304 0.021228 *  \nDESTIN_BS80111         -1.1979716  0.0987941  -12.126  &lt; 2e-16 ***\nDESTIN_BS80151          0.0395131  0.0620870    0.636 0.524506    \nDESTIN_BS80159          0.5547751  0.0691753    8.020 1.06e-15 ***\nDESTIN_BS80191         -2.8757968  0.7294887   -3.942 8.07e-05 ***\nDESTIN_BS80229         -1.0478169  0.0798289  -13.126  &lt; 2e-16 ***\nDESTIN_BS80239         -1.1462177  0.1030392  -11.124  &lt; 2e-16 ***\nDESTIN_BS80251          0.5377301  0.0562914    9.553  &lt; 2e-16 ***\nDESTIN_BS80271         -0.1665482  0.0782043   -2.130 0.033200 *  \nDESTIN_BS80289         -1.9502278  0.1684144  -11.580  &lt; 2e-16 ***\nDESTIN_BS81031         -0.1113514  0.0554579   -2.008 0.044659 *  \nDESTIN_BS81099         -0.4352254  0.0734428   -5.926 3.10e-09 ***\nDESTIN_BS81101         -1.4603906  0.1009025  -14.473  &lt; 2e-16 ***\nDESTIN_BS81109         -2.2333967  0.1305201  -17.112  &lt; 2e-16 ***\nDESTIN_BS81209         -0.6481378  0.1138258   -5.694 1.24e-08 ***\nDESTIN_BS81231         -0.5659558  0.0926974   -6.105 1.03e-09 ***\nDESTIN_BS82029          0.4945983  0.0505361    9.787  &lt; 2e-16 ***\nDESTIN_BS82033         -0.4120786  0.0923841   -4.460 8.18e-06 ***\nDESTIN_BS82051          1.1966209  0.0527536   22.683  &lt; 2e-16 ***\nDESTIN_BS82131          0.2755627  0.0796958    3.458 0.000545 ***\nDESTIN_BS82181         -0.9953515  0.1758229   -5.661 1.50e-08 ***\nDESTIN_BS82221         -0.8194191  0.0822119   -9.967  &lt; 2e-16 ***\nDESTIN_BS83031         -1.1664307  0.0869200  -13.420  &lt; 2e-16 ***\nDESTIN_BS83099          0.4229125  0.0571678    7.398 1.39e-13 ***\nDESTIN_BS83101          0.7509692  0.0535172   14.032  &lt; 2e-16 ***\nDESTIN_BS83109          0.6045888  0.0476446   12.690  &lt; 2e-16 ***\nDESTIN_BS83111         -0.4379510  0.0712328   -6.148 7.84e-10 ***\nDESTIN_BS83129         -1.2780460  0.1462799   -8.737  &lt; 2e-16 ***\nDESTIN_BS83169         -2.2838114  0.2919682   -7.822 5.19e-15 ***\nDESTIN_BS83181         -2.3541790  0.5837340   -4.033 5.51e-05 ***\nDESTIN_BS83329                 NA         NA       NA       NA    \nDESTIN_BS84019         -1.6785903  0.0840512  -19.971  &lt; 2e-16 ***\nDESTIN_BS84029          0.7362845  0.0551795   13.343  &lt; 2e-16 ***\nDESTIN_BS84031          1.5327701  0.0442896   34.608  &lt; 2e-16 ***\nDESTIN_BS84079         -0.1227452  0.1141783   -1.075 0.282361    \nDESTIN_BS84081         -0.4380301  0.1495353   -2.929 0.003398 ** \nDESTIN_BS84141         -2.2060010  0.1784191  -12.364  &lt; 2e-16 ***\nDESTIN_BS84169         -0.9603731  0.2185794   -4.394 1.11e-05 ***\nDESTIN_BS84191         -0.5759206  0.0644369   -8.938  &lt; 2e-16 ***\nDESTIN_BS84219         -0.3259510  0.0542832   -6.005 1.92e-09 ***\nDESTIN_BS84221         -0.2999557  0.1442875   -2.079 0.037629 *  \nDESTIN_BS84231          1.8347944  0.0801272   22.899  &lt; 2e-16 ***\nDESTIN_BS84239          1.0737602  0.0484281   22.172  &lt; 2e-16 ***\nDESTIN_BS84261          0.6196725  0.1037246    5.974 2.31e-09 ***\nDESTIN_BS84271          0.8639013  0.1902800    4.540 5.62e-06 ***\nDESTIN_BS84279         -1.6312332  0.2476270   -6.587 4.47e-11 ***\nDESTIN_BS84289          0.6415916  0.0561592   11.425  &lt; 2e-16 ***\nDESTIN_BS84309         -1.1223195  0.0851533  -13.180  &lt; 2e-16 ***\nDESTIN_BS84329         -0.0950303  0.1098338   -0.865 0.386918    \nDESTIN_BS84371         -1.5644556  0.2547579   -6.141 8.20e-10 ***\nDESTIN_BS84379         -2.3380979  0.1371889  -17.043  &lt; 2e-16 ***\nDESTIN_BS84401         -0.9088256  0.1922952   -4.726 2.29e-06 ***\nDESTIN_BS84451         -0.1790574  0.0596480   -3.002 0.002683 ** \nDESTIN_BS84491          0.4839557  0.0853070    5.673 1.40e-08 ***\nDESTIN_BS84501          0.5349208  0.0622534    8.593  &lt; 2e-16 ***\nDESTIN_BS84521         -0.4376916  0.0607955   -7.199 6.05e-13 ***\nDESTIN_BS84561         -0.9748114  0.2050056   -4.755 1.98e-06 ***\nDESTIN_BS84591         -0.4746843  0.1456610   -3.259 0.001119 ** \nDESTIN_BS84601         -2.0304543  0.2006841  -10.118  &lt; 2e-16 ***\nDESTIN_BS84629         -0.5202170  0.0906139   -5.741 9.41e-09 ***\nDESTIN_BS84671          0.4009180  0.0624424    6.421 1.36e-10 ***\nDESTIN_BS85021         -0.0806214  0.1088050   -0.741 0.458711    \nDESTIN_BS85029         -1.5979062  0.2627545   -6.081 1.19e-09 ***\nDESTIN_BS90029          0.2550807  0.0860890    2.963 0.003047 ** \nDESTIN_BS90069         -0.6498845  0.1291813   -5.031 4.88e-07 ***\nDESTIN_BS91069         -1.6884537  0.1449812  -11.646  &lt; 2e-16 ***\nDESTIN_BS91071         -0.5982258  0.0951525   -6.287 3.24e-10 ***\nDESTIN_BS91099          0.1773048  0.0566344    3.131 0.001744 ** \nDESTIN_BS92099         -0.8504990  0.0824480  -10.316  &lt; 2e-16 ***\nDESTIN_BS92129          1.1083095  0.0533159   20.788  &lt; 2e-16 ***\nDESTIN_BS92141         -1.1226360  0.1204718   -9.319  &lt; 2e-16 ***\nDESTIN_BS92159         -0.8877494  0.0916418   -9.687  &lt; 2e-16 ***\nDESTIN_BS92189          0.5278426  0.0987654    5.344 9.07e-08 ***\nDESTIN_BS92191          0.7259560  0.1731357    4.193 2.75e-05 ***\nDESTIN_BS93049         -0.3160009  0.0797821   -3.961 7.47e-05 ***\nDESTIN_BS93061          0.1410715  0.0689406    2.046 0.040729 *  \nDESTIN_BS93069         -0.7599337  0.0904461   -8.402  &lt; 2e-16 ***\nDESTIN_BS93081         -0.5799387  0.0960048   -6.041 1.53e-09 ***\nDESTIN_BS93171          0.3008718  0.2319323    1.297 0.194549    \nDESTIN_BS93189         -1.3483525  0.2281588   -5.910 3.43e-09 ***\nDESTIN_BS94021         -0.6112952  0.0971125   -6.295 3.08e-10 ***\nDESTIN_BS94029         -0.8014986  0.3670182   -2.184 0.028976 *  \nDESTIN_BS94061         -0.1602414  0.0679465   -2.358 0.018356 *  \nDESTIN_BS95029          1.2326772  0.0435486   28.306  &lt; 2e-16 ***\nDESTIN_BS95109          1.0492618  0.0460132   22.803  &lt; 2e-16 ***\nDESTIN_BS95129         -0.5294131  0.0534312   -9.908  &lt; 2e-16 ***\nDESTIN_BS95909         -1.8457281  0.1349907  -13.673  &lt; 2e-16 ***\nDESTIN_BS96011         -2.3460006  0.2174954  -10.786  &lt; 2e-16 ***\nDESTIN_BS96069          0.2175997  0.0574567    3.787 0.000152 ***\nDESTIN_BS96131          0.2885494  0.1154787    2.499 0.012464 *  \nDESTIN_BS96161          1.9615733  0.0483233   40.593  &lt; 2e-16 ***\nDESTIN_BS96179          0.0457781  0.3360695    0.136 0.891650    \nDESTIN_BS96219          3.2927529  0.0485504   67.821  &lt; 2e-16 ***\nDESTIN_BS96239         -2.0592309  0.2397933   -8.588  &lt; 2e-16 ***\nDESTIN_BS96249         -0.2446069  0.1075310   -2.275 0.022921 *  \nDESTIN_BS96281         -0.6336940  0.0734412   -8.629  &lt; 2e-16 ***\nDESTIN_BS96291         -1.2647513  0.2021160   -6.258 3.91e-10 ***\nDESTIN_BS96311         -1.8545973  0.3373817   -5.497 3.86e-08 ***\nDESTIN_BS96351         -1.1008655  0.6001097   -1.834 0.066589 .  \nDESTIN_BS96361          0.5464018  0.2792030    1.957 0.050347 .  \nDESTIN_BS96401         -2.0107118  0.4117509   -4.883 1.04e-06 ***\nDESTIN_BS97019         -2.2669283  0.0849020  -26.701  &lt; 2e-16 ***\nDESTIN_BS97041         -0.5320971  0.1160782   -4.584 4.56e-06 ***\nDESTIN_BS97099         -3.3542967  1.0040048   -3.341 0.000835 ***\nDESTIN_BS97109         -1.4225529  0.4549887   -3.127 0.001769 ** \nDESTIN_BS97159         -5.6323050  0.5811807   -9.691  &lt; 2e-16 ***\nDESTIN_BS97179         -0.5516803  0.5079526   -1.086 0.277441    \nDESTIN_BS97181         -0.3586077  0.2109981   -1.700 0.089210 .  \nDESTIN_BS97209         -1.9280741  0.4161804   -4.633 3.61e-06 ***\nDESTIN_BS98079         -1.0427118  0.1855672   -5.619 1.92e-08 ***\nDESTIN_BS98129         -1.1713139  0.1628092   -7.194 6.27e-13 ***\nDESTIN_BS98139         -1.1131350  0.1798801   -6.188 6.09e-10 ***\nDESTIN_BS98291          1.2486340  0.3178765    3.928 8.56e-05 ***\nDESTIN_BS98301          1.3674064  0.0844460   16.193  &lt; 2e-16 ***\nDESTIN_BS99049         -0.1238213  0.1548001   -0.800 0.423781    \nDESTIN_BS99101          0.2435929  0.2247775    1.084 0.278495    \nDESTIN_BS99189          0.6880931  0.1282943    5.363 8.17e-08 ***\nlog(retail_poi_orig)           NA         NA       NA       NA    \nlog(retail_poi_dest)           NA         NA       NA       NA    \nlog(finance_poi_orig)          NA         NA       NA       NA    \nlog(finance_poi_dest)          NA         NA       NA       NA    \nlog(business_poi_orig)         NA         NA       NA       NA    \nlog(business_poi_dest)         NA         NA       NA       NA    \nlog(food_poi_orig)             NA         NA       NA       NA    \nlog(food_poi_dest)             NA         NA       NA       NA    \nlog(leisure_poi_orig)          NA         NA       NA       NA    \nlog(leisure_poi_dest)          NA         NA       NA       NA    \nlog(entertn_poi_orig)          NA         NA       NA       NA    \nlog(entertn_poi_dest)          NA         NA       NA       NA    \nlog(dist)              -0.8105944  0.0034028 -238.211  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 645333  on 7625  degrees of freedom\nResidual deviance: 123195  on 6075  degrees of freedom\n  (210861 observations deleted due to missingness)\nAIC: 155618\n\nNumber of Fisher Scoring iterations: 8\n\n\n\n\n\nPresent the modelling results by using appropriate geovisualization and graphical visualization methods.\n\n\n\n\n\n\nNote\n\n\n\nObservations:\n\nWith reference to the Spatial Interaction Model output tables, maps and data visualization prepared, describe the modelling results"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html#setting-the-scene",
    "href": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html#setting-the-scene",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "What are the driving forces behind urban dwellers to weak up early in morning to commute from their home locations to their work places? What are the impact of removing a public bus service on the commuters reside along the corridor of the bus route? These and many other questions related to urban mobility are challenges faced by transport operators and urban managers.\nTo provide answer to this question, traditionally, commuters survey will be used. However, commuters survey is a very costly, time-consuming and laborous, not to mention that the survey data tend to take a long time to clean and analyse. As a result, it is not unusual, by the time the survey report was ready, most of the information already out-of-date!\nAs city-wide urban infrastructures such as public buses, mass rapid transits, public utilities and roads become digital, the data sets obtained can be used as a framework for tracking movement patterns through space and time. This is particularly true with the recent trend of massive deployment of pervasive computing technologies such as GPS on the vehicles and SMART cards used by public transport commuters.\nUnfortunately, this explosive growth of geospatially-referenced data has far outpaced the planner’s ability to utilize and transform the data into insightful information thus creating an adverse impact on the return on the investment made to collect and manage this data."
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html#objectives",
    "href": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html#objectives",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "This take-home exercise is motivated by two main reasons. Firstly, despite increasing amounts of open data available for public consumption, there has not been significant practice research carried out to show how these disparate data sources can be integrated, analysed, and modelled to support policy making decisions.\nSecondly, there is a general lack of practical research to show how geospatial data science and analysis (GDSA) can be used to support decision-making.\nHence, your task for this take-home exercise is to conduct a case study to demonstrate the potential value of GDSA to integrate publicly available data from multiple sources for building a spatial interaction models to determine factors affecting urban mobility patterns of public bus transit."
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html#the-data",
    "href": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html#the-data",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "For the purpose of this assignment, data from several open government sources will be used:\n\nPassenger Volume by Origin Destination Bus Stops, Bus Stop Location, Train Station and Train Station Exit Point, just to name a few of them, from LTA DataMall.\nMaster Plan 2019 Subzone Boundary, HDB Property Information, School Directory and Information and other relevant data from Data.gov.sg.\n\n\n\n\n\nBusiness, entertn, F&B, FinServ, Leisure&Recreation and Retails are geospatial data sets of the locations of business establishments, entertainments, food and beverage outlets, financial centres, leisure and recreation centres, retail and services stores/outlets I compiled for urban mobility study. They are available on in the geospatial folder to Take-home Exercise 2 data folder.\nHDB: This data set is the geocoded version of HDB Property Information data from data.gov. The data set is prepared using September 2021 data. If you want to prepare you own data by using the latest HDB Property Information provided on data.gov.sg, this link provides a useful step-by-step guide.\n\n\n\n\n\n\n\nImportant\n\n\n\nThose specially collected data aim to use within this excercise content only, if intend to put in other usage, approach course instructor Dr. Kam Tin Seong and ask for permission first.\n\n\nFor starting, load needing packages.\n\n\nCode\npacman::p_load(sf, sp, spdep, tmap, tidyverse, sfdep, stplanr, reshape2)"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html#the-task",
    "href": "Takehome_Ex/Takehome_Ex02/Takehome_Ex02.html#the-task",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Derive an analytical hexagon data of 375m (this distance is the perpendicular distance between the centre of the hexagon and its edges) to represent the traffic analysis zone (TAZ).\nFirst of all, we need to import Bus Stop Location from LTA DataMall.\n\n\nCode\nbusstop = st_read(dsn = \"./data/geospatial/BusStopLocation_Jul2023\",\n                   layer = \"BusStop\")  %&gt;% st_transform(crs = 3414) %&gt;% \n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\n\nReading layer `BusStop' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial/BusStopLocation_Jul2023' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nAlso import subzone geometry data as our background layer.\n\n\nCode\nsz = st_read(dsn = \"./data/geospatial\",\n                   layer = \"MPSZ-2019\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `MPSZ-2019' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nThen we can Derive an analytical hexagon data of 375m.\n\n\nCode\nhexagon &lt;- st_sf(geometry = st_make_grid(busstop, cellsize = 750, what = \"polygons\",square = FALSE)) %&gt;%\n  mutate(id = row_number()) %&gt;%\n  st_transform(crs = 3414) \n\nhexagon &lt;- hexagon %&gt;%\n  mutate(N = lengths(st_intersects(hexagon, busstop))) %&gt;% \n  filter(N&gt;0)\n\n\nPlot out our bus_hex to check.\n\n\nCode\ntm_shape(sz) +\n  tm_polygons(alpha = 0.3) +\n  tm_borders(alpha = 0.2) +\ntm_shape(hexagon) +\n  tm_fill(\"N\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Bus stop counts\",\n          colorNA = NULL,\n          showNA = FALSE) +\n  tm_layout(main.title = \"Count of Bus Stops at Hexagon Level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"4star\", size = 1.5) +\n  tm_borders(alpha = 0.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\nThen we can join bus stop with hexagon, and join with subzone to exclude hexagons out of range.\n\n\nCode\nbus_hex &lt;- st_join(\n  st_join(hexagon, busstop%&gt;%select(BUS_STOP_N,geometry), join = st_intersects),\n  sz) %&gt;%\n  drop_na() %&gt;%\n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\nbus_hex\n\n\nSimple feature collection with 5140 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3595.122 ymin: 26049.09 xmax: 48595.12 ymax: 50297.8\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    id N BUS_STOP_N           SUBZONE_N SUBZONE_C PLN_AREA_N PLN_AREA_C\n1   23 1      25059 TUAS VIEW EXTENSION    TSSZ06       TUAS         TS\n2   44 1      25751 TUAS VIEW EXTENSION    TSSZ06       TUAS         TS\n3   46 2      26379           TUAS VIEW    TSSZ05       TUAS         TS\n3.1 46 2      26369           TUAS VIEW    TSSZ05       TUAS         TS\n4   66 1      25741 TUAS VIEW EXTENSION    TSSZ06       TUAS         TS\n5   67 4      26399           TUAS VIEW    TSSZ05       TUAS         TS\n5.1 67 4      25719           TUAS VIEW    TSSZ05       TUAS         TS\n5.2 67 4      25711           TUAS VIEW    TSSZ05       TUAS         TS\n5.3 67 4      26389           TUAS VIEW    TSSZ05       TUAS         TS\n6   68 1      26299           TUAS VIEW    TSSZ05       TUAS         TS\n       REGION_N REGION_C                       geometry\n1   WEST REGION       WR POLYGON ((3970.122 27348.13...\n2   WEST REGION       WR POLYGON ((4345.122 27997.65...\n3   WEST REGION       WR POLYGON ((4345.122 30595.72...\n3.1 WEST REGION       WR POLYGON ((4345.122 30595.72...\n4   WEST REGION       WR POLYGON ((4720.122 28647.16...\n5   WEST REGION       WR POLYGON ((4720.122 29946.2,...\n5.1 WEST REGION       WR POLYGON ((4720.122 29946.2,...\n5.2 WEST REGION       WR POLYGON ((4720.122 29946.2,...\n5.3 WEST REGION       WR POLYGON ((4720.122 29946.2,...\n6   WEST REGION       WR POLYGON ((4720.122 31245.24...\n\n\nNotice there would be duplicate geometry, meaning multiple ’BUS_STOP_N’s at same hexagon.\n\n\nCode\nbus_hex %&gt;%\n  group_by(geometry)%&gt;%\n  filter(row_number()&gt;1)\n\n\nSimple feature collection with 4309 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 27348.13 xmax: 48595.12 ymax: 50297.8\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 4,309 × 10\n# Groups:   geometry [776]\n      id     N BUS_STOP_N SUBZONE_N     SUBZONE_C PLN_AREA_N PLN_AREA_C REGION_N\n * &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;   \n 1    46     2 26369      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 2    67     4 25719      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 3    67     4 25711      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 4    67     4 26389      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 5    88     4 25701      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 6    88     4 25709      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 7    88     4 26461      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n 8    89     2 26289      TUAS PROMENA… TSSZ02    TUAS       TS         WEST RE…\n 9   109     3 25631      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n10   109     3 26419      TUAS VIEW     TSSZ05    TUAS       TS         WEST RE…\n# ℹ 4,299 more rows\n# ℹ 2 more variables: REGION_C &lt;chr&gt;, geometry &lt;POLYGON [m]&gt;\n\n\n\n\n\nWith reference to the time intervals provided in the table below, construct an O-D matrix of commuter flows for a time interval of your choice by integrating Passenger Volume by Origin Destination Bus Stops and Bus Stop Location from LTA DataMall. The O-D matrix must be aggregated at the analytics hexagon level\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\nImport bus passenger trips data.\n\n\nCode\nodbus = read_csv(\"./data/aspatial/origin_destination_bus_202310.csv\")  %&gt;%\n  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),\n         DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE))\n\n\nExtract passenger trips data during all peak time intervals.\n\n\nCode\npeak_trips &lt;- bind_rows(\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n    mutate(interval = \"weekdayam\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 &\n           TIME_PER_HOUR &lt;= 20) %&gt;%\n    mutate(interval = \"weekdaypm\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 &\n           TIME_PER_HOUR &lt;= 14) %&gt;%\n    mutate(interval = \"weekendam\"),\n  odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n           TIME_PER_HOUR &lt;= 19) %&gt;%\n    mutate(interval = \"weekendpm\")) %&gt;%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE, interval) %&gt;%\n  reframe(TRIPS = sum(TOTAL_TRIPS)) \n\nglimpse(peak_trips)\n\n\nRows: 951,259\nColumns: 4\n$ ORIGIN_PT_CODE      &lt;fct&gt; 01012, 01012, 01012, 01012, 01012, 01012, 01012, 0…\n$ DESTINATION_PT_CODE &lt;fct&gt; 01112, 01112, 01112, 01112, 01113, 01113, 01113, 0…\n$ interval            &lt;chr&gt; \"weekdayam\", \"weekdaypm\", \"weekendam\", \"weekendpm\"…\n$ TRIPS               &lt;dbl&gt; 290, 540, 265, 201, 118, 516, 189, 165, 77, 303, 1…\n\n\nCheck any bus stops not in our origin ‘bus_hex’ list.\n\n\nCode\npeak_trips %&gt;%\n  filter(! ORIGIN_PT_CODE %in% bus_hex$'BUS_STOP_N') %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  reframe(TRIPS = sum(TRIPS))\n\n\nExclude any bus stops not included in ‘bus_hex’ data before continue.\n\n\nCode\npeak_trips &lt;- peak_trips %&gt;%\n  filter(ORIGIN_PT_CODE %in% bus_hex$'BUS_STOP_N') %&gt;%\n  filter(DESTINATION_PT_CODE %in% bus_hex$'BUS_STOP_N')\n\n\nDuplication check before continue.\n\n\nCode\npeak_trips %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nAfter that, we need to combine those passenger trip data with geospatial data by origin bus stops.\n\n\nCode\npeaktrip_hex &lt;- left_join(peak_trips %&gt;% \n                            group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %&gt;%\n                            reframe(TRIPS = sum(TRIPS)),\n                          bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\"))  %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         DESTIN_BS = DESTINATION_PT_CODE) \n\n\nDuplication check before continue:\n\n\nCode\npeaktrip_hex %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nThen we can continue to join again with geospatial data by destination bus stops.\n\n\nCode\npeaktrip_hex &lt;- left_join(peaktrip_hex, bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"),\n                          suffix = c(\".origin\", \".destin\")) \n\nglimpse(peaktrip_hex)\n\n\nRows: 306,940\nColumns: 5\n$ ORIGIN_BS       &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", …\n$ DESTIN_BS       &lt;chr&gt; \"01112\", \"01113\", \"01121\", \"01211\", \"01311\", \"01549\", …\n$ TRIPS           &lt;dbl&gt; 1296, 988, 629, 765, 1217, 16, 29, 1, 94, 102, 68, 436…\n$ geometry.origin &lt;POLYGON [m]&gt; POLYGON ((29845.12 30595.72..., POLYGON ((2984…\n$ geometry.destin &lt;POLYGON [m]&gt; POLYGON ((30220.12 31245.24..., POLYGON ((3022…\n\n\nDuplication check again.\n\n\nCode\npeaktrip_hex %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\n# A tibble: 0 × 5\n# ℹ 5 variables: ORIGIN_BS &lt;chr&gt;, DESTIN_BS &lt;chr&gt;, TRIPS &lt;dbl&gt;,\n#   geometry.origin &lt;GEOMETRY [m]&gt;, geometry.destin &lt;GEOMETRY [m]&gt;\n\n\nWe can save the output into a rds file.\n\n\nCode\nwrite_rds(peaktrip_hex, \"./data/rds/peaktrip_hex.rds\")\n\n\n\n\n\nDisplay the O-D flows of the passenger trips by using appropriate geovisualisation methods.\nFirst let’s ensure there aren’t any observations with same origin and destination.\n\n\nCode\npeaktrip_hex %&gt;%\n  filter(ORIGIN_BS==DESTIN_BS)\n\n\nThen we can create flow lines and check summary of data in case there are any zero.\n\n\nCode\npeaktrip_flow &lt;- od2line(flow = peaktrip_hex, \n                    zones = bus_hex,\n                    zone_code = \"BUS_STOP_N\")\n\nsummary(peaktrip_flow)\n\n\n  ORIGIN_BS          DESTIN_BS             TRIPS         \n Length:306940      Length:306940      Min.   :     1.0  \n Class :character   Class :character   1st Qu.:     6.0  \n Mode  :character   Mode  :character   Median :    27.0  \n                                       Mean   :   209.1  \n                                       3rd Qu.:   112.0  \n                                       Max.   :153711.0  \n      geometry.origin        geometry.destin            geometry     \n POLYGON      :306940   POLYGON      :306940   LINESTRING   :306940  \n epsg:3414    :     0   epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0   +proj=tmer...:     0  \n                                                                     \n                                                                     \n                                                                     \n\n\nTill now, we can plot out the bus trip flow during all 4 peak time intervals in total.\n\n\nCode\ntm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeaktrip_flow %&gt;% \n  filter(TRIPS &gt;= 2000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6)\n\n\n\n\n\nAnd we can visualize 4 peak time intervals in facets style to check any difference within.\nFirst need to wrangling the data to put trips data of different time intervals into different columns.\n\n\nCode\npeak_interval_trips &lt;- peak_trips %&gt;%\n  pivot_wider(names_from = interval, \n              values_from = TRIPS, \n              values_fill = 0)\n\npeak_interval_hex &lt;- left_join(peak_interval_trips,\n                          bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\"))  %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         DESTIN_BS = DESTINATION_PT_CODE) \n\n\npeak_interval_hex &lt;- left_join(peak_interval_hex, bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"),\n                          suffix = c(\".origin\", \".destin\")) \n\nglimpse(peak_interval_hex)\n\n\nRows: 306,940\nColumns: 8\n$ ORIGIN_BS       &lt;chr&gt; \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", \"01012\", …\n$ DESTIN_BS       &lt;chr&gt; \"01112\", \"01113\", \"01121\", \"01211\", \"01311\", \"01549\", …\n$ weekdayam       &lt;dbl&gt; 290, 118, 77, 118, 165, 0, 0, 0, 14, 30, 16, 35, 26, 0…\n$ weekdaypm       &lt;dbl&gt; 540, 516, 303, 363, 630, 6, 6, 1, 42, 48, 23, 260, 76,…\n$ weekendam       &lt;dbl&gt; 265, 189, 120, 141, 218, 1, 7, 0, 16, 8, 8, 58, 21, 7,…\n$ weekendpm       &lt;dbl&gt; 201, 165, 129, 143, 204, 9, 16, 0, 22, 16, 21, 83, 21,…\n$ geometry.origin &lt;POLYGON [m]&gt; POLYGON ((29845.12 30595.72..., POLYGON ((2984…\n$ geometry.destin &lt;POLYGON [m]&gt; POLYGON ((30220.12 31245.24..., POLYGON ((3022…\n\n\nBefore we continue, we can check duplication and save the result as a rds file.\n\n\nCode\npeak_interval_hex %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\n\n\nCode\nwrite_rds(peak_interval_hex, \"./data/rds/peak_interval_hex.rds\")\n\n\nThen we can create flow lines.\n\n\nCode\npeak_interval_flow &lt;- od2line(flow = peak_interval_hex, \n                    zones = bus_hex,\n                    zone_code = \"BUS_STOP_N\")\n\nsummary(peak_interval_flow)\n\n\n  ORIGIN_BS          DESTIN_BS           weekdayam          weekdaypm       \n Length:306940      Length:306940      Min.   :    0.00   Min.   :    0.00  \n Class :character   Class :character   1st Qu.:    1.00   1st Qu.:    1.00  \n Mode  :character   Mode  :character   Median :    6.00   Median :    8.00  \n                                       Mean   :   82.23   Mean   :   78.52  \n                                       3rd Qu.:   37.00   3rd Qu.:   38.00  \n                                       Max.   :74796.00   Max.   :42785.00  \n   weekendam          weekendpm             geometry.origin  \n Min.   :    0.00   Min.   :    0.00   POLYGON      :306940  \n 1st Qu.:    0.00   1st Qu.:    0.00   epsg:3414    :     0  \n Median :    3.00   Median :    3.00   +proj=tmer...:     0  \n Mean   :   24.16   Mean   :   24.23                         \n 3rd Qu.:   12.00   3rd Qu.:   12.00                         \n Max.   :15603.00   Max.   :23484.00                         \n      geometry.destin            geometry     \n POLYGON      :306940   LINESTRING   :306940  \n epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0  \n                                              \n                                              \n                                              \n\n\nThen we can plot out 4 peak intervals in facets.\n\n\nCode\nweekdayam_plot &lt;- tm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeak_interval_flow %&gt;% \n  filter(weekdayam &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"weekdayam\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6) +\n  tm_layout(main.title = \"Trips during Weekday 6am till 9am\",\n            main.title.size = 1.2)\n\nweekdaypm_plot &lt;- tm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeak_interval_flow %&gt;% \n  filter(weekdaypm &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"weekdaypm\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6) +\n  tm_layout(main.title = \"Trips during Weekday 5pm till 8pm\",\n            main.title.size = 1.2)\n\nweekendam_plot &lt;- tm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeak_interval_flow %&gt;% \n  filter(weekendam &gt;= 2000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"weekendam\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6) +\n  tm_layout(main.title = \"Trips during Weekend/Holiday 11am till 2pm\",\n            main.title.size = 1.2)\n\nweekendpm_plot &lt;- tm_shape(sz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\npeak_interval_flow %&gt;% \n  filter(weekendpm &gt;= 2000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"weekendpm\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           col = \"darkgreen\",\n           alpha = 0.6) +\n  tm_layout(main.title = \"Trips during Weekend/Holiday 4pm till 7pm\",\n            main.title.size = 1.2)\n\ntmap_arrange(weekdayam_plot, weekdaypm_plot, weekendam_plot, weekendpm_plot, asp=1, ncol=2,\n             outer.margins = 0)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nObservations:\nDescribe the spatial patterns revealed by the geo-visualization (not more than 100 words per visual)\n\n\n\n\n\nFirstly import all those propulsive and Attractiveness variables.\n\n\nCode\nbusiness = st_read(dsn = \"./data/geospatial\",\n                   layer = \"Business\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `Business' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nentertn = st_read(dsn = \"./data/geospatial\",\n                   layer = \"entertn\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `entertn' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 114 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10809.34 ymin: 26528.63 xmax: 41600.62 ymax: 46375.77\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nfood = st_read(dsn = \"./data/geospatial\",\n                   layer = \"F&B\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `F&B' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1919 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25343.27 xmax: 45462.43 ymax: 48796.21\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nfinance = st_read(dsn = \"./data/geospatial\",\n                   layer = \"FinServ\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `FinServ' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nleisure = st_read(dsn = \"./data/geospatial\",\n                   layer = \"Leisure&Recreation\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `Leisure&Recreation' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1217 features and 30 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25134.28 xmax: 48439.77 ymax: 50078.88\nProjected CRS: SVY21 / Singapore TM\n\n\nCode\nretail = st_read(dsn = \"./data/geospatial\",\n                   layer = \"Retails\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `Retails' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Takehome_Ex/Takehome_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n\n\nThen we can assemble all those variables by using st_join.\n\n\nCode\nfactors &lt;- st_join(retail %&gt;% select(POI_NAME, geometry), \n                   business %&gt;% select(POI_NAME, geometry), \n                   join = st_nearest_feature,\n                   suffix = c(\"_retail\", \"_business\")) %&gt;% \n  st_join(finance %&gt;% select(POI_NAME, geometry) %&gt;% rename(finance = POI_NAME),\n          join = st_nearest_feature) %&gt;% \n  st_join(food %&gt;% select(POI_NAME, geometry) %&gt;% rename(food = POI_NAME),\n          join = st_nearest_feature) %&gt;% \n  st_join(leisure %&gt;% select(POI_NAME, geometry) %&gt;% rename(leisure = POI_NAME),\n          join = st_nearest_feature) %&gt;% \n  st_join(entertn %&gt;% select(POI_NAME, geometry) %&gt;% rename(entertn = POI_NAME),\n          join = st_nearest_feature) %&gt;%\n  st_join(bus_hex%&gt;%select(BUS_STOP_N, geometry), join = st_nearest_feature)\n\nglimpse(factors)\n\n\nRows: 37,635\nColumns: 8\n$ POI_NAME_retail   &lt;chr&gt; \"TIAN KEE & CO\", \"PEOPLE TRADITIONAL CHINESE MEDICAL…\n$ POI_NAME_business &lt;chr&gt; \"GOODMAN ARTS CENTRE\", \"GOODMAN ARTS CENTRE\", \"883 F…\n$ finance           &lt;chr&gt; \"POSB\", \"POSB\", \"POSB\", \"POSB\", \"UOB\", \"DBS\", \"DBS\",…\n$ food              &lt;chr&gt; \"LORNA 62\", \"LORNA 62\", \"RC & CYBER CAFE\", \"RC & CYB…\n$ leisure           &lt;chr&gt; \"GENESIS GYM\", \"GENESIS GYM\", \"RIVER SAFARI\", \"ZOO\",…\n$ entertn           &lt;chr&gt; \"GOODMAN ARTS CENTRE\", \"GOODMAN ARTS CENTRE\", \"CATHA…\n$ BUS_STOP_N        &lt;chr&gt; \"80271\", \"80271\", \"48131\", \"48131\", \"07249\", \"10299\"…\n$ geometry          &lt;POINT [m]&gt; POINT (33713.83 32023.15), POINT (33713.83 320…\n\n\nThen we need to count the point of each variable around each bus stop.\n\n\nCode\nfactor_count &lt;- \n  aggregate(POI_NAME_retail ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n  rename(retail_poi = POI_NAME_retail) %&gt;%\n  left_join(\n    aggregate(POI_NAME_business ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(business_poi = POI_NAME_business),\n    by = join_by(BUS_STOP_N)) %&gt;%\n  left_join(\n    aggregate(finance ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(finance_poi = finance),\n    by = join_by(BUS_STOP_N)) %&gt;%\n  left_join(\n    aggregate(food ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(food_poi = food),\n    by = join_by(BUS_STOP_N)) %&gt;% \n  left_join(\n    aggregate(leisure ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(leisure_poi = leisure),\n    by = join_by(BUS_STOP_N)) %&gt;% \n  left_join(\n    aggregate(entertn ~ BUS_STOP_N, data = factors, function(x) length(unique(x))) %&gt;%\n    rename(entertn_poi = entertn),\n    by = join_by(BUS_STOP_N)) \n\nsummary(factor_count)\n\n\n  BUS_STOP_N          retail_poi       business_poi     finance_poi    \n Length:915         Min.   :   1.00   Min.   : 1.000   Min.   : 1.000  \n Class :character   1st Qu.:   3.00   1st Qu.: 1.000   1st Qu.: 1.000  \n Mode  :character   Median :   9.00   Median : 2.000   Median : 2.000  \n                    Mean   :  39.78   Mean   : 3.455   Mean   : 2.388  \n                    3rd Qu.:  34.00   3rd Qu.: 4.000   3rd Qu.: 3.000  \n                    Max.   :1411.00   Max.   :62.000   Max.   :30.000  \n    food_poi      leisure_poi      entertn_poi    \n Min.   : 1.00   Min.   : 1.000   Min.   : 1.000  \n 1st Qu.: 1.00   1st Qu.: 1.000   1st Qu.: 1.000  \n Median : 1.00   Median : 2.000   Median : 1.000  \n Mean   : 2.38   Mean   : 2.145   Mean   : 1.264  \n 3rd Qu.: 2.00   3rd Qu.: 3.000   3rd Qu.: 1.000  \n Max.   :64.00   Max.   :30.000   Max.   :10.000  \n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nSince left = TRUE is default in st_join, so here I will join those variables in the sequence of number of observations, which is, retail &lt;- business &lt;- finance &lt;- food &lt;- leisure &lt;- entertain.\nAnd to avoid NA count in some variable, I will set the “join = st_nearest_feature” instead of default “st_intersect”.\n\n\n\n\n\n\nFirst we need to convert the bus_hex we have generated into Spatial Polygons Data Frame.\n\n\nCode\nbus_sp &lt;- as(bus_hex, \"Spatial\")\nbus_sp\n\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 5140 \nextent      : 3595.122, 48595.12, 26049.09, 50297.8  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 9\nnames       :   id,  N, BUS_STOP_N,      SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  :   23,  1,      01012, ALEXANDRA HILL,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  : 2505, 19,      99189,         YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\nThen we can compute distance matrix of our bus stops hexagons and check the head 5.\n\n\nCode\ndist &lt;- spDists(bus_sp, \n                longlat = FALSE)\nhead(dist, n=c(5, 5))\n\n\n         [,1]     [,2]     [,3]     [,4]     [,5]\n[1,]    0.000  750.000 3269.174 3269.174 1500.000\n[2,]  750.000    0.000 2598.076 2598.076  750.000\n[3,] 3269.174 2598.076    0.000    0.000 1984.313\n[4,] 3269.174 2598.076    0.000    0.000 1984.313\n[5,] 1500.000  750.000 1984.313 1984.313    0.000\n\n\nAnd we need to give names to columns and rows of the matrix.\n\n\nCode\nbusstop_N &lt;- bus_sp$BUS_STOP_N\n\ncolnames(dist) &lt;- paste0(busstop_N)\nrownames(dist) &lt;- paste0(busstop_N)\n\nhead(dist, n=c(5, 5))\n\n\n         25059    25751    26379    26369    25741\n25059    0.000  750.000 3269.174 3269.174 1500.000\n25751  750.000    0.000 2598.076 2598.076  750.000\n26379 3269.174 2598.076    0.000    0.000 1984.313\n26369 3269.174 2598.076    0.000    0.000 1984.313\n25741 1500.000  750.000 1984.313 1984.313    0.000\n\n\nThen we can label the bus stops and convert it to pair-distance.\n\n\nCode\ndistPair &lt;- as.data.frame(as.table(dist)) \nnames(distPair) &lt;- c(\"orig\", \"dest\", \"dist\")\ndistPair &lt;- distPair %&gt;%\n  filter(orig != dest)\n\nglimpse(distPair)\n\n\nRows: 26,414,460\nColumns: 3\n$ orig &lt;fct&gt; 25751, 26379, 26369, 25741, 26399, 25719, 25711, 26389, 26299, 25…\n$ dest &lt;fct&gt; 25059, 25059, 25059, 25059, 25059, 25059, 25059, 25059, 25059, 25…\n$ dist &lt;dbl&gt; 750.000, 3269.174, 3269.174, 1500.000, 2704.163, 2704.163, 2704.1…\n\n\nLet’s give a constant distance of 50m to intra-hexagon bus stops pairs before continue.\n\n\nCode\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\nsummary(distPair)\n\n\n      orig               dest               dist      \n 25059  :    5139   25059  :    5139   Min.   :   50  \n 25751  :    5139   25751  :    5139   1st Qu.: 7830  \n 26379  :    5139   26379  :    5139   Median :12617  \n 26369  :    5139   26369  :    5139   Mean   :13296  \n 25741  :    5139   25741  :    5139   3rd Qu.:17859  \n 26399  :    5139   26399  :    5139   Max.   :44680  \n (Other):26383626   (Other):26383626                  \n\n\n\n\n\n\n\n\nFor this part, I will focus on weekend/holiday evening peak time interval for further analysis.\n\n\nCode\nweekendpm_trips &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 &\n           TIME_PER_HOUR &lt;= 19) %&gt;%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %&gt;%\n  reframe(TRIPS = sum(TOTAL_TRIPS))\n \nweekendpm_trips &lt;- weekendpm_trips %&gt;%\n  filter(ORIGIN_PT_CODE %in% bus_hex$'BUS_STOP_N') %&gt;%\n  filter(DESTINATION_PT_CODE %in% bus_hex$'BUS_STOP_N')\n\nweekendpm_hex &lt;- left_join(weekendpm_trips,bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\"))  %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         DESTIN_BS = DESTINATION_PT_CODE) \n\nweekendpm_hex &lt;- left_join(weekendpm_hex, bus_hex %&gt;% select(BUS_STOP_N, geometry), \n                          by = c(\"DESTIN_BS\" = \"BUS_STOP_N\"),\n                          suffix = c(\".origin\", \".destin\")) \n\n\nCreate flow lines for those trips data.\n\n\nCode\nweekendpm_flow &lt;- od2line(flow = weekendpm_hex, \n                    zones = bus_hex,\n                    zone_code = \"BUS_STOP_N\") \n\nsummary(weekendpm_flow)\n\n\n  ORIGIN_BS          DESTIN_BS             TRIPS         \n Length:218487      Length:218487      Min.   :    1.00  \n Class :character   Class :character   1st Qu.:    2.00  \n Mode  :character   Mode  :character   Median :    6.00  \n                                       Mean   :   34.05  \n                                       3rd Qu.:   21.00  \n                                       Max.   :23484.00  \n      geometry.origin        geometry.destin            geometry     \n POLYGON      :218487   POLYGON      :218487   LINESTRING   :218487  \n epsg:3414    :     0   epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0   +proj=tmer...:     0  \n                                                                     \n                                                                     \n                                                                     \n\n\nTo ensure, let’s check any case of origin == destination before continue.\n\n\nCode\nweekendpm_flow %&gt;%\n  filter(ORIGIN_BS == DESTIN_BS)\n\n\nSimple feature collection with 0 features and 3 fields\nActive geometry column: geometry\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n[1] ORIGIN_BS       DESTIN_BS       TRIPS           geometry.origin\n[5] geometry.destin geometry       \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThen we can join the flow data with pairwise distance and use summary to check any case of 0.\n\n\nCode\nweekendpm_dist &lt;- weekendpm_flow %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_BS\" = \"orig\",\n                    \"DESTIN_BS\" = \"dest\"))\n\nsummary(weekendpm_dist)\n\n\n  ORIGIN_BS          DESTIN_BS             TRIPS               dist      \n Length:218487      Length:218487      Min.   :    1.00   Min.   :   50  \n Class :character   Class :character   1st Qu.:    2.00   1st Qu.: 1984  \n Mode  :character   Mode  :character   Median :    6.00   Median : 3750  \n                                       Mean   :   34.05   Mean   : 4830  \n                                       3rd Qu.:   21.00   3rd Qu.: 6750  \n                                       Max.   :23484.00   Max.   :24784  \n      geometry.origin        geometry.destin            geometry     \n POLYGON      :218487   POLYGON      :218487   LINESTRING   :218487  \n epsg:3414    :     0   epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0   +proj=tmer...:     0  \n                                                                     \n                                                                     \n                                                                     \n\n\nTill now we can join the flow data with all 6 propulsive and Attractiveness variables by both origin and destination bus stops.\n\n\nCode\nweekendpm_SIM &lt;- weekendpm_dist %&gt;%\n  left_join(factor_count, by = c(\"ORIGIN_BS\"=\"BUS_STOP_N\")) %&gt;%\n  left_join(factor_count, by = c(\"DESTIN_BS\"=\"BUS_STOP_N\"), \n            suffix = c(\"_orig\", \"_dest\"))\n#weekendpm_SIM[is.na(weekendpm_SIM)] &lt;- 0.1\n\nsummary(weekendpm_SIM)\n\n\n  ORIGIN_BS          DESTIN_BS             TRIPS               dist      \n Length:218487      Length:218487      Min.   :    1.00   Min.   :   50  \n Class :character   Class :character   1st Qu.:    2.00   1st Qu.: 1984  \n Mode  :character   Mode  :character   Median :    6.00   Median : 3750  \n                                       Mean   :   34.05   Mean   : 4830  \n                                       3rd Qu.:   21.00   3rd Qu.: 6750  \n                                       Max.   :23484.00   Max.   :24784  \n                                                                         \n retail_poi_orig   business_poi_orig finance_poi_orig food_poi_orig   \n Min.   :   1.00   Min.   : 1.00     Min.   : 1.00    Min.   : 1.00   \n 1st Qu.:   5.00   1st Qu.: 1.00     1st Qu.: 1.00    1st Qu.: 1.00   \n Median :  18.00   Median : 2.00     Median : 2.00    Median : 2.00   \n Mean   :  74.29   Mean   : 4.25     Mean   : 3.17    Mean   : 3.45   \n 3rd Qu.:  67.00   3rd Qu.: 4.00     3rd Qu.: 4.00    3rd Qu.: 3.00   \n Max.   :1411.00   Max.   :62.00     Max.   :30.00    Max.   :64.00   \n NA's   :177440    NA's   :177440    NA's   :177440   NA's   :177440  \n leisure_poi_orig entertn_poi_orig retail_poi_dest   business_poi_dest\n Min.   : 1.00    Min.   : 1.00    Min.   :   1.00   Min.   : 1.00    \n 1st Qu.: 1.00    1st Qu.: 1.00    1st Qu.:   5.00   1st Qu.: 1.00    \n Median : 2.00    Median : 1.00    Median :  22.00   Median : 2.00    \n Mean   : 2.77    Mean   : 1.44    Mean   :  73.17   Mean   : 4.13    \n 3rd Qu.: 3.00    3rd Qu.: 2.00    3rd Qu.:  72.00   3rd Qu.: 5.00    \n Max.   :30.00    Max.   :10.00    Max.   :1411.00   Max.   :62.00    \n NA's   :177440   NA's   :177440   NA's   :177837    NA's   :177837   \n finance_poi_dest food_poi_dest    leisure_poi_dest entertn_poi_dest\n Min.   : 1.00    Min.   : 1.00    Min.   : 1.00    Min.   : 1.00   \n 1st Qu.: 1.00    1st Qu.: 1.00    1st Qu.: 1.00    1st Qu.: 1.00   \n Median : 2.00    Median : 2.00    Median : 2.00    Median : 1.00   \n Mean   : 3.13    Mean   : 3.27    Mean   : 2.71    Mean   : 1.45   \n 3rd Qu.: 4.00    3rd Qu.: 3.00    3rd Qu.: 3.00    3rd Qu.: 2.00   \n Max.   :30.00    Max.   :64.00    Max.   :30.00    Max.   :10.00   \n NA's   :177837   NA's   :177837   NA's   :177837   NA's   :177837  \n      geometry.origin        geometry.destin            geometry     \n POLYGON      :218487   POLYGON      :218487   LINESTRING   :218487  \n epsg:3414    :     0   epsg:3414    :     0   epsg:3414    :     0  \n +proj=tmer...:     0   +proj=tmer...:     0   +proj=tmer...:     0  \n                                                                     \n                                                                     \n                                                                     \n                                                                     \n\n\nNow we can calibrate an unconstrained spatial interaction model by using glm().\n\n\nCode\nuncSIM &lt;- glm(formula = TRIPS ~ \n                log(retail_poi_orig) + \n                log(retail_poi_dest) +\n                log(finance_poi_orig) + \n                log(finance_poi_dest) +\n                log(business_poi_orig) + \n                log(business_poi_dest) +\n                log(food_poi_orig) + \n                log(food_poi_dest) +\n                log(leisure_poi_orig) + \n                log(leisure_poi_dest) +\n                log(entertn_poi_orig) + \n                log(entertn_poi_dest) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = weekendpm_SIM,\n              na.action = na.exclude)\nuncSIM\n\n\n\nCall:  glm(formula = TRIPS ~ log(retail_poi_orig) + log(retail_poi_dest) + \n    log(finance_poi_orig) + log(finance_poi_dest) + log(business_poi_orig) + \n    log(business_poi_dest) + log(food_poi_orig) + log(food_poi_dest) + \n    log(leisure_poi_orig) + log(leisure_poi_dest) + log(entertn_poi_orig) + \n    log(entertn_poi_dest) + log(dist), family = poisson(link = \"log\"), \n    data = weekendpm_SIM, na.action = na.exclude)\n\nCoefficients:\n           (Intercept)    log(retail_poi_orig)    log(retail_poi_dest)  \n               6.88976                 0.12268                 0.09547  \n log(finance_poi_orig)   log(finance_poi_dest)  log(business_poi_orig)  \n               0.15330                 0.34699                -0.20719  \nlog(business_poi_dest)      log(food_poi_orig)      log(food_poi_dest)  \n              -0.36212                 0.09849                -0.16741  \n log(leisure_poi_orig)   log(leisure_poi_dest)   log(entertn_poi_orig)  \n              -0.19138                -0.02565                -0.22954  \n log(entertn_poi_dest)               log(dist)  \n               0.29166                -0.50044  \n\nDegrees of Freedom: 7625 Total (i.e. Null);  7612 Residual\n  (210861 observations deleted due to missingness)\nNull Deviance:      645300 \nResidual Deviance: 550100   AIC: 579400\n\n\nThen let’s fit a doubly constrained SIM .\n\n\nCode\ndbcSIM &lt;- glm(formula = TRIPS ~ \n                ORIGIN_BS + \n                DESTIN_BS + \n                log(retail_poi_orig) + \n                log(retail_poi_dest) +\n                log(finance_poi_orig) + \n                log(finance_poi_dest) +\n                log(business_poi_orig) + \n                log(business_poi_dest) +\n                log(food_poi_orig) + \n                log(food_poi_dest) +\n                log(leisure_poi_orig) + \n                log(leisure_poi_dest) +\n                log(entertn_poi_orig) + \n                log(entertn_poi_dest) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = weekendpm_SIM,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_BS + DESTIN_BS + log(retail_poi_orig) + \n    log(retail_poi_dest) + log(finance_poi_orig) + log(finance_poi_dest) + \n    log(business_poi_orig) + log(business_poi_dest) + log(food_poi_orig) + \n    log(food_poi_dest) + log(leisure_poi_orig) + log(leisure_poi_dest) + \n    log(entertn_poi_orig) + log(entertn_poi_dest) + log(dist), \n    family = poisson(link = \"log\"), data = weekendpm_SIM, na.action = na.exclude)\n\nCoefficients: (25 not defined because of singularities)\n                         Estimate Std. Error  z value Pr(&gt;|z|)    \n(Intercept)             8.6940347  0.1096771   79.269  &lt; 2e-16 ***\nORIGIN_BS01119          1.4455614  0.1171765   12.337  &lt; 2e-16 ***\nORIGIN_BS01231          2.3788212  0.1275649   18.648  &lt; 2e-16 ***\nORIGIN_BS01239          0.4899699  0.1352795    3.622 0.000292 ***\nORIGIN_BS01549          1.0051654  0.1592477    6.312 2.76e-10 ***\nORIGIN_BS02089          0.6972652  0.1346040    5.180 2.22e-07 ***\nORIGIN_BS02119          0.2895997  0.1780270    1.627 0.103797    \nORIGIN_BS03011          1.0521767  0.1108133    9.495  &lt; 2e-16 ***\nORIGIN_BS03021          0.7312752  0.1232583    5.933 2.98e-09 ***\nORIGIN_BS03111          0.5844663  0.1147539    5.093 3.52e-07 ***\nORIGIN_BS03218         -0.6878658  0.2520220   -2.729 0.006345 ** \nORIGIN_BS03391         -1.7998571  0.1981955   -9.081  &lt; 2e-16 ***\nORIGIN_BS03511          1.7734691  0.1161177   15.273  &lt; 2e-16 ***\nORIGIN_BS04179          0.8165542  0.1130537    7.223 5.10e-13 ***\nORIGIN_BS04211          0.4845172  0.1704086    2.843 0.004465 ** \nORIGIN_BS04219          0.4440134  0.2718138    1.634 0.102360    \nORIGIN_BS04311          0.5267405  0.1257098    4.190 2.79e-05 ***\nORIGIN_BS05013          2.4068813  0.1053220   22.853  &lt; 2e-16 ***\nORIGIN_BS05023          0.6537482  0.1193632    5.477 4.33e-08 ***\nORIGIN_BS05259          0.5154983  0.1835072    2.809 0.004967 ** \nORIGIN_BS05431         -1.3841562  0.6031486   -2.295 0.021740 *  \nORIGIN_BS06049          0.5169735  0.1167067    4.430 9.44e-06 ***\nORIGIN_BS06141          0.0348134  0.1851212    0.188 0.850832    \nORIGIN_BS06159          1.3111307  0.1143757   11.463  &lt; 2e-16 ***\nORIGIN_BS07011          1.1735526  0.1115437   10.521  &lt; 2e-16 ***\nORIGIN_BS07021          0.6055897  0.1184375    5.113 3.17e-07 ***\nORIGIN_BS07249          0.7668679  0.1371385    5.592 2.25e-08 ***\nORIGIN_BS07331         -1.0670870  0.5872105   -1.817 0.069184 .  \nORIGIN_BS07369         -0.0409940  0.1224158   -0.335 0.737719    \nORIGIN_BS07379          0.9040930  0.1141055    7.923 2.31e-15 ***\nORIGIN_BS07419          1.9155117  0.1056179   18.136  &lt; 2e-16 ***\nORIGIN_BS07539          0.6485357  0.1106455    5.861 4.59e-09 ***\nORIGIN_BS07569          0.6671570  0.2477554    2.693 0.007085 ** \nORIGIN_BS08058          1.4875725  0.1122498   13.252  &lt; 2e-16 ***\nORIGIN_BS08069          1.0404112  0.1089817    9.547  &lt; 2e-16 ***\nORIGIN_BS08121          1.9401180  0.1043277   18.596  &lt; 2e-16 ***\nORIGIN_BS09047          2.1766451  0.1056438   20.604  &lt; 2e-16 ***\nORIGIN_BS09121         -0.5933650  0.1591564   -3.728 0.000193 ***\nORIGIN_BS09149          0.0807636  0.1353388    0.597 0.550674    \nORIGIN_BS09213          2.8314531  0.1091453   25.942  &lt; 2e-16 ***\nORIGIN_BS09219          1.7919199  0.1059958   16.906  &lt; 2e-16 ***\nORIGIN_BS10017          0.3031028  0.1115163    2.718 0.006568 ** \nORIGIN_BS10061          0.0099521  0.1404808    0.071 0.943523    \nORIGIN_BS10099          1.4657398  0.1099899   13.326  &lt; 2e-16 ***\nORIGIN_BS10129          0.2693664  0.1838592    1.465 0.142902    \nORIGIN_BS10139          1.4518777  0.1099289   13.207  &lt; 2e-16 ***\nORIGIN_BS10191          1.0613196  0.1100144    9.647  &lt; 2e-16 ***\nORIGIN_BS10199          0.9994983  0.1156161    8.645  &lt; 2e-16 ***\nORIGIN_BS10249         -0.4195939  0.1505452   -2.787 0.005317 ** \nORIGIN_BS10281          0.6534066  0.1127892    5.793 6.91e-09 ***\nORIGIN_BS10299          1.3455135  0.1093735   12.302  &lt; 2e-16 ***\nORIGIN_BS10321          1.0470575  0.1248810    8.384  &lt; 2e-16 ***\nORIGIN_BS10341          0.6304998  0.1222451    5.158 2.50e-07 ***\nORIGIN_BS10381          0.0567334  0.1436902    0.395 0.692967    \nORIGIN_BS10449          0.2907734  0.1550905    1.875 0.060812 .  \nORIGIN_BS10469          0.8687727  0.2034008    4.271 1.94e-05 ***\nORIGIN_BS11019          1.4104245  0.1103978   12.776  &lt; 2e-16 ***\nORIGIN_BS11031         -0.4493729  0.1420685   -3.163 0.001561 ** \nORIGIN_BS11041          0.4027865  0.1243042    3.240 0.001194 ** \nORIGIN_BS11049          0.7951127  0.1171784    6.785 1.16e-11 ***\nORIGIN_BS11081         -0.3499503  0.1872795   -1.869 0.061679 .  \nORIGIN_BS11099         -0.6825509  0.1563236   -4.366 1.26e-05 ***\nORIGIN_BS11131         -0.0717631  0.1512617   -0.474 0.635193    \nORIGIN_BS11171         -0.6126212  0.1373026   -4.462 8.13e-06 ***\nORIGIN_BS11201         -0.7604513  0.1501219   -5.066 4.07e-07 ***\nORIGIN_BS11211         -1.0951301  0.1775962   -6.166 6.99e-10 ***\nORIGIN_BS11221         -0.7032781  0.1741111   -4.039 5.36e-05 ***\nORIGIN_BS11271         -0.5538819  0.1883238   -2.941 0.003270 ** \nORIGIN_BS11309         -0.8477546  0.2431368   -3.487 0.000489 ***\nORIGIN_BS11339         -1.0344296  0.2521282   -4.103 4.08e-05 ***\nORIGIN_BS11369          1.7725713  0.1058039   16.753  &lt; 2e-16 ***\nORIGIN_BS11409         -0.0558473  0.1612209   -0.346 0.729040    \nORIGIN_BS11459          0.4187352  0.1489382    2.811 0.004932 ** \nORIGIN_BS11519          1.1803926  0.1095773   10.772  &lt; 2e-16 ***\nORIGIN_BS11529          0.9993984  0.1209657    8.262  &lt; 2e-16 ***\nORIGIN_BS11531         -0.6128923  0.1382321   -4.434 9.26e-06 ***\nORIGIN_BS11589          0.4438728  0.1418119    3.130 0.001748 ** \nORIGIN_BS12029          0.2650759  0.1389107    1.908 0.056359 .  \nORIGIN_BS12031          0.3764455  0.1321845    2.848 0.004401 ** \nORIGIN_BS12069         -0.8078448  0.1283225   -6.295 3.07e-10 ***\nORIGIN_BS12071          0.0712731  0.1409289    0.506 0.613041    \nORIGIN_BS12109         -0.4446419  0.1373601   -3.237 0.001208 ** \nORIGIN_BS12119         -0.7486878  0.2584211   -2.897 0.003766 ** \nORIGIN_BS12129          2.2381074  0.1310617   17.077  &lt; 2e-16 ***\nORIGIN_BS12149          0.2489475  0.1581804    1.574 0.115529    \nORIGIN_BS12169          0.7542043  0.1623327    4.646 3.38e-06 ***\nORIGIN_BS12199          0.4962580  0.1669062    2.973 0.002946 ** \nORIGIN_BS12201         -0.5559513  0.2117826   -2.625 0.008662 ** \nORIGIN_BS12209          0.9720760  0.1139350    8.532  &lt; 2e-16 ***\nORIGIN_BS13029          0.3442373  0.1288497    2.672 0.007549 ** \nORIGIN_BS13089          0.1368460  0.1674923    0.817 0.413912    \nORIGIN_BS13141          0.1695228  0.1323704    1.281 0.200310    \nORIGIN_BS13159          0.0219478  0.2243952    0.098 0.922084    \nORIGIN_BS14019          0.9794071  0.2056196    4.763 1.91e-06 ***\nORIGIN_BS14071          0.2221282  0.3956986    0.561 0.574554    \nORIGIN_BS14119          1.2212539  0.1088913   11.215  &lt; 2e-16 ***\nORIGIN_BS14159          0.4742173  0.1203809    3.939 8.17e-05 ***\nORIGIN_BS14171         -0.5689355  0.1634750   -3.480 0.000501 ***\nORIGIN_BS14189         -0.0708158  0.1376572   -0.514 0.606947    \nORIGIN_BS14199          0.0980867  0.2641325    0.371 0.710374    \nORIGIN_BS14219         -0.7957534  0.2679885   -2.969 0.002984 ** \nORIGIN_BS14221          0.3754679  0.1866519    2.012 0.044263 *  \nORIGIN_BS14241          0.9751664  0.1282633    7.603 2.90e-14 ***\nORIGIN_BS14259         -0.2905724  0.1609559   -1.805 0.071029 .  \nORIGIN_BS14291          0.6458858  0.1331286    4.852 1.22e-06 ***\nORIGIN_BS15071          1.1458168  0.2364666    4.846 1.26e-06 ***\nORIGIN_BS15091          0.4479804  0.2896216    1.547 0.121917    \nORIGIN_BS15121         -0.7919209  0.4610953   -1.717 0.085892 .  \nORIGIN_BS15159         -0.7627557  0.1754051   -4.349 1.37e-05 ***\nORIGIN_BS15209         -0.2848895  0.1435715   -1.984 0.047222 *  \nORIGIN_BS16029         -1.6897240  0.2902595   -5.821 5.83e-09 ***\nORIGIN_BS16049         -0.0060833  0.1446590   -0.042 0.966456    \nORIGIN_BS16089          0.4781671  0.1254639    3.811 0.000138 ***\nORIGIN_BS16099         -0.1902215  0.1578862   -1.205 0.228280    \nORIGIN_BS16109         -0.0153895  0.1994594   -0.077 0.938499    \nORIGIN_BS16159          0.4389329  0.1431403    3.066 0.002166 ** \nORIGIN_BS16179          0.6666887  0.1402725    4.753 2.01e-06 ***\nORIGIN_BS16239          0.5237703  0.2354177    2.225 0.026091 *  \nORIGIN_BS17011         -0.4136902  0.2080909   -1.988 0.046809 *  \nORIGIN_BS17039          0.5605315  0.1236791    4.532 5.84e-06 ***\nORIGIN_BS17049          1.3491177  0.1103045   12.231  &lt; 2e-16 ***\nORIGIN_BS17059          0.6304384  0.1099446    5.734 9.80e-09 ***\nORIGIN_BS17061          1.2961804  0.1264111   10.254  &lt; 2e-16 ***\nORIGIN_BS17091          0.9378681  0.1206349    7.774 7.58e-15 ***\nORIGIN_BS17101          0.3094947  0.1411009    2.193 0.028277 *  \nORIGIN_BS17179          3.1729987  0.1039508   30.524  &lt; 2e-16 ***\nORIGIN_BS17181          0.2302955  0.1248906    1.844 0.065186 .  \nORIGIN_BS17189          0.3890650  0.1106458    3.516 0.000438 ***\nORIGIN_BS17309         -0.3380075  0.2325246   -1.454 0.146046    \nORIGIN_BS17311          0.9201337  0.2568665    3.582 0.000341 ***\nORIGIN_BS17339          0.4332563  0.2276087    1.904 0.056973 .  \nORIGIN_BS17389         -0.3485935  0.1482209   -2.352 0.018680 *  \nORIGIN_BS18011          0.6719732  0.1338731    5.019 5.18e-07 ***\nORIGIN_BS18059         -0.6913325  0.3711235   -1.863 0.062489 .  \nORIGIN_BS18141          0.0665615  0.1593577    0.418 0.676177    \nORIGIN_BS18149         -0.5189364  0.1402435   -3.700 0.000215 ***\nORIGIN_BS18191         -1.3116099  1.0103099   -1.298 0.194210    \nORIGIN_BS18301          0.0741255  0.4018315    0.184 0.853645    \nORIGIN_BS19059          0.3177340  0.1805569    1.760 0.078451 .  \nORIGIN_BS19091          0.2098892  0.1612832    1.301 0.193132    \nORIGIN_BS20031         -0.5383264  0.1331414   -4.043 5.27e-05 ***\nORIGIN_BS20051          0.3271505  0.1516036    2.158 0.030933 *  \nORIGIN_BS20089          0.0617535  0.1306863    0.473 0.636547    \nORIGIN_BS20239          2.6947047  0.1051288   25.632  &lt; 2e-16 ***\nORIGIN_BS20281          1.0979377  0.1286399    8.535  &lt; 2e-16 ***\nORIGIN_BS20299          1.3931578  0.1109722   12.554  &lt; 2e-16 ***\nORIGIN_BS20319          2.6739612  0.2619978   10.206  &lt; 2e-16 ***\nORIGIN_BS21019          2.1726852  0.1068448   20.335  &lt; 2e-16 ***\nORIGIN_BS21049          0.7924707  0.2159638    3.669 0.000243 ***\nORIGIN_BS21051         -1.0153259  0.3350946   -3.030 0.002446 ** \nORIGIN_BS21079          0.0304589  0.1478083    0.206 0.836736    \nORIGIN_BS21109          1.4003450  0.1208663   11.586  &lt; 2e-16 ***\nORIGIN_BS21159         -0.7402338  0.2235109   -3.312 0.000927 ***\nORIGIN_BS21179          0.4985104  0.1135467    4.390 1.13e-05 ***\nORIGIN_BS21301          0.4184349  0.4605648    0.909 0.363601    \nORIGIN_BS21331         -1.6919929  0.6288723   -2.691 0.007134 ** \nORIGIN_BS21381         -1.6660199  0.2421971   -6.879 6.04e-12 ***\nORIGIN_BS21389         -0.7541691  0.4690928   -1.608 0.107897    \nORIGIN_BS21429          0.8855004  0.1272993    6.956 3.50e-12 ***\nORIGIN_BS21499         -1.6850533  0.5139568   -3.279 0.001043 ** \nORIGIN_BS21501         -1.6919929  0.6288723   -2.691 0.007134 ** \nORIGIN_BS21531         -0.3772634  0.2875028   -1.312 0.189450    \nORIGIN_BS21561          0.1793188  0.1256685    1.427 0.153603    \nORIGIN_BS21611          0.7631682  0.1218720    6.262 3.80e-10 ***\nORIGIN_BS21631         -0.3294799  0.1569506   -2.099 0.035794 *  \nORIGIN_BS21651         -1.8083647  0.2402626   -7.527 5.21e-14 ***\nORIGIN_BS21771         -1.3189172  0.2016172   -6.542 6.08e-11 ***\nORIGIN_BS22051          0.1248767  0.5200465    0.240 0.810233    \nORIGIN_BS22071         -0.9401082  0.6919412   -1.359 0.174256    \nORIGIN_BS22219         -5.9025657  1.7092676   -3.453 0.000554 ***\nORIGIN_BS22241          0.1700866  0.5037043    0.338 0.735611    \nORIGIN_BS22251          1.0976777  0.4660144    2.355 0.018500 *  \nORIGIN_BS22349          1.2790911  0.1483803    8.620  &lt; 2e-16 ***\nORIGIN_BS22479         -1.7504969  1.0057260   -1.741 0.081766 .  \nORIGIN_BS22509         -0.1307515  0.2087005   -0.627 0.530985    \nORIGIN_BS22539          1.6624266  0.3701393    4.491 7.08e-06 ***\nORIGIN_BS22559         -0.4771051  1.1389287   -0.419 0.675284    \nORIGIN_BS22569          2.0306662  0.6633085    3.061 0.002203 ** \nORIGIN_BS23019          0.2736960  0.7585016    0.361 0.718221    \nORIGIN_BS23069         -2.1246570  0.4698474   -4.522 6.13e-06 ***\nORIGIN_BS23081         -1.6557784  0.4179154   -3.962 7.43e-05 ***\nORIGIN_BS23151         -4.3360584  1.3704157   -3.164 0.001556 ** \nORIGIN_BS23251         -1.5283732  0.4814054   -3.175 0.001499 ** \nORIGIN_BS23321         -1.0831088  0.4814272   -2.250 0.024462 *  \nORIGIN_BS23371          0.3776960  0.2795112    1.351 0.176608    \nORIGIN_BS23441         -0.0135531  0.3773259   -0.036 0.971347    \nORIGIN_BS23481         -3.7565255  1.1640347   -3.227 0.001250 ** \nORIGIN_BS23491         -0.4289417  1.1740553   -0.365 0.714850    \nORIGIN_BS24089         -3.7255978  1.0586029   -3.519 0.000433 ***\nORIGIN_BS24129         -3.3005947  1.5599933   -2.116 0.034364 *  \nORIGIN_BS24289         -2.1124927  0.6088102   -3.470 0.000521 ***\nORIGIN_BS24389         -2.8825762  1.0057125   -2.866 0.004154 ** \nORIGIN_BS24451         -0.0726941  0.4075810   -0.178 0.858444    \nORIGIN_BS24461         -0.6556274  0.4599821   -1.425 0.154061    \nORIGIN_BS24499         -4.5839411  1.5420936   -2.973 0.002953 ** \nORIGIN_BS24559         -1.9549103  0.6738010   -2.901 0.003716 ** \nORIGIN_BS24571         -2.3964253  1.5576935   -1.538 0.123940    \nORIGIN_BS24621         -2.8825762  1.0057125   -2.866 0.004154 ** \nORIGIN_BS24631         -0.6498728  0.3833266   -1.695 0.090009 .  \nORIGIN_BS24641         -3.4987871  1.0586075   -3.305 0.000949 ***\nORIGIN_BS24651         -2.6269855  0.6737755   -3.899 9.66e-05 ***\nORIGIN_BS24691         -0.7153840  0.4445044   -1.609 0.107530    \nORIGIN_BS25069          0.4535130  0.3129055    1.449 0.147237    \nORIGIN_BS25091         -1.9549103  0.6738010   -2.901 0.003716 ** \nORIGIN_BS25109          0.0537526  0.2791701    0.193 0.847316    \nORIGIN_BS25121          0.2784683  0.3873947    0.719 0.472250    \nORIGIN_BS25161         -0.7578727  0.4382733   -1.729 0.083769 .  \nORIGIN_BS25191         -0.9338377  0.4444918   -2.101 0.035649 *  \nORIGIN_BS25249         -4.7560324  0.5952381   -7.990 1.35e-15 ***\nORIGIN_BS25349         -1.3126065  0.4247376   -3.090 0.001999 ** \nORIGIN_BS25429         -0.7474093  0.4220519   -1.771 0.076578 .  \nORIGIN_BS25469         -0.5291348  0.2836452   -1.865 0.062114 .  \nORIGIN_BS25519         -2.7757478  0.4400965   -6.307 2.84e-10 ***\nORIGIN_BS26121         -0.8968616  0.4814385   -1.863 0.062479 .  \nORIGIN_BS26241          0.8482629  0.2721139    3.117 0.001825 ** \nORIGIN_BS26269         -1.1430815  0.2934669   -3.895 9.82e-05 ***\nORIGIN_BS26289         -4.1502478  0.5697352   -7.285 3.23e-13 ***\nORIGIN_BS26311          1.6634747  0.2685292    6.195 5.84e-10 ***\nORIGIN_BS26349          2.4083241  0.2645448    9.104  &lt; 2e-16 ***\nORIGIN_BS26389         -0.2448423  0.2249794   -1.088 0.276468    \nORIGIN_BS26461          2.9372027  0.2640787   11.122  &lt; 2e-16 ***\nORIGIN_BS27021         -1.8798121  0.4325014   -4.346 1.38e-05 ***\nORIGIN_BS27109         -0.4154514  0.5196421   -0.799 0.424003    \nORIGIN_BS27141          0.1132914  0.2419589    0.468 0.639623    \nORIGIN_BS27149         -1.1277387  0.2364761   -4.769 1.85e-06 ***\nORIGIN_BS27209         -0.8830568  0.2755842   -3.204 0.001354 ** \nORIGIN_BS27219          1.3901212  0.1665651    8.346  &lt; 2e-16 ***\nORIGIN_BS27251          0.3158862  0.2704875    1.168 0.242871    \nORIGIN_BS27279          1.1562682  0.1595246    7.248 4.22e-13 ***\nORIGIN_BS27341          2.1155790  0.2309881    9.159  &lt; 2e-16 ***\nORIGIN_BS27419          2.9184951  0.5949996    4.905 9.34e-07 ***\nORIGIN_BS27421         -2.0169589  0.6394352   -3.154 0.001609 ** \nORIGIN_BS27459          0.5600814  0.1294452    4.327 1.51e-05 ***\nORIGIN_BS28031          0.7445577  0.1189383    6.260 3.85e-10 ***\nORIGIN_BS28059          1.6111652  0.1185042   13.596  &lt; 2e-16 ***\nORIGIN_BS28089          1.2731639  0.1142360   11.145  &lt; 2e-16 ***\nORIGIN_BS28099          0.8386704  0.1139353    7.361 1.83e-13 ***\nORIGIN_BS28211          2.3869336  0.1238036   19.280  &lt; 2e-16 ***\nORIGIN_BS28251         -0.0253921  0.1343743   -0.189 0.850120    \nORIGIN_BS28271         -1.2028742  0.1766813   -6.808 9.89e-12 ***\nORIGIN_BS28309         -1.0428652  0.4616724   -2.259 0.023891 *  \nORIGIN_BS28361         -2.3746962  0.3106929   -7.643 2.12e-14 ***\nORIGIN_BS28409          1.2270793  0.1128263   10.876  &lt; 2e-16 ***\nORIGIN_BS28441          0.2119763  0.1147204    1.848 0.064636 .  \nORIGIN_BS28491          1.4818496  0.1099918   13.472  &lt; 2e-16 ***\nORIGIN_BS28511          1.7423114  0.1105735   15.757  &lt; 2e-16 ***\nORIGIN_BS28531          0.5148562  0.1324908    3.886 0.000102 ***\nORIGIN_BS28649          1.8877558  0.1078021   17.511  &lt; 2e-16 ***\nORIGIN_BS28669          1.4930502  0.1151168   12.970  &lt; 2e-16 ***\nORIGIN_BS28689          2.3090244  0.1092669   21.132  &lt; 2e-16 ***\nORIGIN_BS28701         -0.8044365  0.1738421   -4.627 3.70e-06 ***\nORIGIN_BS29019          2.9070521  0.3013350    9.647  &lt; 2e-16 ***\nORIGIN_BS29031          3.6264775  0.1061108   34.176  &lt; 2e-16 ***\nORIGIN_BS29039         -2.2123355  0.2515232   -8.796  &lt; 2e-16 ***\nORIGIN_BS29059         -0.2627275  0.2004469   -1.311 0.189956    \nORIGIN_BS29089          2.8993502  0.2753002   10.532  &lt; 2e-16 ***\nORIGIN_BS29101         -1.0048994  0.2880159   -3.489 0.000485 ***\nORIGIN_BS30049         -1.2661666  0.3604942   -3.512 0.000444 ***\nORIGIN_BS30099         -0.6775187  0.4008780   -1.690 0.091011 .  \nORIGIN_BS30109         -3.7822872  1.0502265   -3.601 0.000317 ***\nORIGIN_BS30129         -0.8885752  0.5525131   -1.608 0.107782    \nORIGIN_BS33049          0.4244643  0.5370370    0.790 0.429305    \nORIGIN_BS40011          2.7039263  0.1055078   25.628  &lt; 2e-16 ***\nORIGIN_BS40021         -0.4377403  0.1973342   -2.218 0.026536 *  \nORIGIN_BS40031          1.0571493  0.1434202    7.371 1.69e-13 ***\nORIGIN_BS40049         -0.3180416  0.1329561   -2.392 0.016753 *  \nORIGIN_BS40069          0.9657650  0.1119743    8.625  &lt; 2e-16 ***\nORIGIN_BS40071          0.2552519  0.1850853    1.379 0.167863    \nORIGIN_BS40089         -0.0506534  0.1290479   -0.393 0.694677    \nORIGIN_BS40101          1.2389473  0.1211270   10.228  &lt; 2e-16 ***\nORIGIN_BS40191          1.7024998  0.1258586   13.527  &lt; 2e-16 ***\nORIGIN_BS40209          2.3936709  0.1055810   22.671  &lt; 2e-16 ***\nORIGIN_BS40221          0.3317998  0.2192691    1.513 0.130227    \nORIGIN_BS40249         -0.9237569  0.2375293   -3.889 0.000101 ***\nORIGIN_BS41029          1.5612425  0.1114489   14.009  &lt; 2e-16 ***\nORIGIN_BS41041          1.2874511  0.1160300   11.096  &lt; 2e-16 ***\nORIGIN_BS41069          0.5088265  0.1205136    4.222 2.42e-05 ***\nORIGIN_BS41079          0.5067046  0.1219127    4.156 3.23e-05 ***\nORIGIN_BS41119          0.4851588  0.1220048    3.977 6.99e-05 ***\nORIGIN_BS41139          0.8069907  0.1198391    6.734 1.65e-11 ***\nORIGIN_BS42011          0.7439821  0.1193538    6.233 4.56e-10 ***\nORIGIN_BS42019          1.2271683  0.1125529   10.903  &lt; 2e-16 ***\nORIGIN_BS42039          0.8045245  0.1149415    6.999 2.57e-12 ***\nORIGIN_BS42051          2.0192822  0.1075220   18.780  &lt; 2e-16 ***\nORIGIN_BS42099          1.7975308  0.1099103   16.355  &lt; 2e-16 ***\nORIGIN_BS42111         -0.5090053  0.1956635   -2.601 0.009284 ** \nORIGIN_BS42131         -0.8889807  0.1968060   -4.517 6.27e-06 ***\nORIGIN_BS42141         -0.8979336  0.1909213   -4.703 2.56e-06 ***\nORIGIN_BS42149         -0.3615062  0.1253717   -2.883 0.003933 ** \nORIGIN_BS42161          0.9648738  0.1128351    8.551  &lt; 2e-16 ***\nORIGIN_BS42199         -0.2086330  0.1790700   -1.165 0.243982    \nORIGIN_BS42229          0.8839576  0.1308794    6.754 1.44e-11 ***\nORIGIN_BS43021          1.0225581  0.1518974    6.732 1.67e-11 ***\nORIGIN_BS43061          2.0416763  0.1211114   16.858  &lt; 2e-16 ***\nORIGIN_BS43111         -0.7822066  0.2816825   -2.777 0.005488 ** \nORIGIN_BS43119         -0.3805095  0.1479175   -2.572 0.010098 *  \nORIGIN_BS43179          0.3893496  0.1156525    3.367 0.000761 ***\nORIGIN_BS43191          0.8660344  0.1257626    6.886 5.73e-12 ***\nORIGIN_BS43219          1.0916432  0.1226417    8.901  &lt; 2e-16 ***\nORIGIN_BS43221         -0.2172181  0.2438962   -0.891 0.373135    \nORIGIN_BS43231          0.5425889  0.1303881    4.161 3.16e-05 ***\nORIGIN_BS43239         -0.5823074  0.2184687   -2.665 0.007690 ** \nORIGIN_BS43291          0.3503172  0.1471551    2.381 0.017285 *  \nORIGIN_BS43311          0.7103580  0.1861998    3.815 0.000136 ***\nORIGIN_BS43321         -0.0681746  0.2240387   -0.304 0.760901    \nORIGIN_BS43349          1.0451749  0.1273750    8.205 2.30e-16 ***\nORIGIN_BS43511          0.1872895  0.1377169    1.360 0.173843    \nORIGIN_BS43541          1.9508855  0.2742082    7.115 1.12e-12 ***\nORIGIN_BS43561         -4.3912360  1.0360645   -4.238 2.25e-05 ***\nORIGIN_BS43571          4.0043390  0.3215744   12.452  &lt; 2e-16 ***\nORIGIN_BS43609          0.6274877  0.1940615    3.233 0.001223 ** \nORIGIN_BS43611          0.2810353  0.1961420    1.433 0.151911    \nORIGIN_BS43629          0.3910654  0.1279661    3.056 0.002243 ** \nORIGIN_BS43639         -0.8627699  0.5114899   -1.687 0.091646 .  \nORIGIN_BS43701          0.0266729  0.1390129    0.192 0.847841    \nORIGIN_BS43811          2.0019151  0.1215493   16.470  &lt; 2e-16 ***\nORIGIN_BS43821          1.0931317  0.1291887    8.462  &lt; 2e-16 ***\nORIGIN_BS44029          1.6557685  0.1078821   15.348  &lt; 2e-16 ***\nORIGIN_BS44079          0.7838761  0.1659235    4.724 2.31e-06 ***\nORIGIN_BS44111         -0.3253557  0.2253148   -1.444 0.148738    \nORIGIN_BS44151         -1.0705194  0.1798461   -5.952 2.64e-09 ***\nORIGIN_BS44171         -2.7804039  0.4240135   -6.557 5.48e-11 ***\nORIGIN_BS44229          0.7787760  0.1129141    6.897 5.31e-12 ***\nORIGIN_BS44261          2.9791805  0.1072104   27.788  &lt; 2e-16 ***\nORIGIN_BS44299          1.8853016  0.1240517   15.198  &lt; 2e-16 ***\nORIGIN_BS44411         -0.7308208  0.6836910   -1.069 0.285099    \nORIGIN_BS44519          1.7088736  0.3210092    5.323 1.02e-07 ***\nORIGIN_BS44549         -0.7808079  0.1730378   -4.512 6.41e-06 ***\nORIGIN_BS44641         -0.2175778  0.1730757   -1.257 0.208708    \nORIGIN_BS44651         -2.7625184  0.3819469   -7.233 4.73e-13 ***\nORIGIN_BS44701          1.3574290  0.1277330   10.627  &lt; 2e-16 ***\nORIGIN_BS44801         -0.5902449  0.1830986   -3.224 0.001266 ** \nORIGIN_BS44919          0.0008064  0.2323085    0.003 0.997230    \nORIGIN_BS45071          0.8493233  0.2157485    3.937 8.26e-05 ***\nORIGIN_BS45079          0.7337999  0.1210599    6.061 1.35e-09 ***\nORIGIN_BS45099         -1.5004881  0.1791797   -8.374  &lt; 2e-16 ***\nORIGIN_BS45251         -2.2601956  1.1148482   -2.027 0.042626 *  \nORIGIN_BS45279          0.1081049  1.0592479    0.102 0.918711    \nORIGIN_BS45329          2.0303802  1.0525124    1.929 0.053721 .  \nORIGIN_BS45359         -3.2232513  0.6308032   -5.110 3.23e-07 ***\nORIGIN_BS45361         -0.5850328  0.2760773   -2.119 0.034083 *  \nORIGIN_BS45399         -1.1221971  1.0477632   -1.071 0.284151    \nORIGIN_BS45411          0.7999242  1.0460307    0.765 0.444436    \nORIGIN_BS46029         -2.3806869  0.3217271   -7.400 1.36e-13 ***\nORIGIN_BS46049         -3.6109695  1.0065552   -3.587 0.000334 ***\nORIGIN_BS46059         -1.3384612  0.2646893   -5.057 4.27e-07 ***\nORIGIN_BS46088         -0.5036378  0.1474792   -3.415 0.000638 ***\nORIGIN_BS46111          0.6021373  0.1581794    3.807 0.000141 ***\nORIGIN_BS46171          2.2643932  0.1694004   13.367  &lt; 2e-16 ***\nORIGIN_BS46179         -1.1023600  0.2369310   -4.653 3.28e-06 ***\nORIGIN_BS46199         -1.6990174  0.2886938   -5.885 3.98e-09 ***\nORIGIN_BS46261          0.2180559  0.1767138    1.234 0.217222    \nORIGIN_BS46271         -0.4523117  0.2930439   -1.543 0.122711    \nORIGIN_BS46279          1.1374478  0.1688389    6.737 1.62e-11 ***\nORIGIN_BS46321          1.1491853  0.2313389    4.968 6.78e-07 ***\nORIGIN_BS46359         -1.7491691  0.3090064   -5.661 1.51e-08 ***\nORIGIN_BS46371          2.0410081  0.1710872   11.930  &lt; 2e-16 ***\nORIGIN_BS46381         -0.9971337  0.1820861   -5.476 4.35e-08 ***\nORIGIN_BS46391         -1.1611523  0.1738571   -6.679 2.41e-11 ***\nORIGIN_BS46419          1.1769393  0.2372587    4.961 7.03e-07 ***\nORIGIN_BS46449         -1.2415275  0.1688257   -7.354 1.93e-13 ***\nORIGIN_BS46469          1.3396091  0.1491658    8.981  &lt; 2e-16 ***\nORIGIN_BS46549         -0.0098519  0.1281673   -0.077 0.938729    \nORIGIN_BS46571          0.4465456  0.3916984    1.140 0.254276    \nORIGIN_BS46719         -0.4212304  0.2539766   -1.659 0.097209 .  \nORIGIN_BS46739          0.5686288  0.1771767    3.209 0.001330 ** \nORIGIN_BS46781         -3.3926502  0.2333531  -14.539  &lt; 2e-16 ***\nORIGIN_BS46799          0.3512030  0.2588758    1.357 0.174893    \nORIGIN_BS46879         -2.7534506  0.7474346   -3.684 0.000230 ***\nORIGIN_BS46931         -2.7573758  1.0463877   -2.635 0.008410 ** \nORIGIN_BS47041          0.8188533  0.1745951    4.690 2.73e-06 ***\nORIGIN_BS47061         -2.5582115  0.3079722   -8.307  &lt; 2e-16 ***\nORIGIN_BS47071         -1.3908426  0.1702979   -8.167 3.16e-16 ***\nORIGIN_BS47091         -1.0895395  0.4258057   -2.559 0.010504 *  \nORIGIN_BS47511          1.0668695  0.3307771    3.225 0.001258 ** \nORIGIN_BS47541         -0.6158423  0.3367229   -1.829 0.067410 .  \nORIGIN_BS47551          1.6402155  0.2428448    6.754 1.44e-11 ***\nORIGIN_BS47609         -0.4478666  0.2695435   -1.662 0.096598 .  \nORIGIN_BS47629          0.2835278  0.1462212    1.939 0.052497 .  \nORIGIN_BS47809          1.6263144  0.1597813   10.178  &lt; 2e-16 ***\nORIGIN_BS47821         -1.5526697  0.1745594   -8.895  &lt; 2e-16 ***\nORIGIN_BS48131          2.7374124  0.1154518   23.710  &lt; 2e-16 ***\nORIGIN_BS48141          1.1616722  0.1719610    6.755 1.42e-11 ***\nORIGIN_BS49021         -3.1674498  1.0240728   -3.093 0.001981 ** \nORIGIN_BS49039         -1.5993859  1.3905001   -1.150 0.250052    \nORIGIN_BS49051         -3.3859036  1.0240700   -3.306 0.000945 ***\nORIGIN_BS49069          0.5034231  1.0112041    0.498 0.618593    \nORIGIN_BS49101         -0.4665405  0.2854784   -1.634 0.102208    \nORIGIN_BS49111         -2.1371037  0.3998527   -5.345 9.06e-08 ***\nORIGIN_BS49141         -0.1197920  0.6119041   -0.196 0.844791    \nORIGIN_BS49159         -1.2324176  0.9351445   -1.318 0.187540    \nORIGIN_BS49189         -2.9035391  0.5467583   -5.310 1.09e-07 ***\nORIGIN_BS49209         -0.5799911  0.3338527   -1.737 0.082340 .  \nORIGIN_BS49249         -0.8200693  0.3928301   -2.088 0.036835 *  \nORIGIN_BS50021          1.8280095  0.1104745   16.547  &lt; 2e-16 ***\nORIGIN_BS50059          1.1070883  0.1138219    9.726  &lt; 2e-16 ***\nORIGIN_BS50071          0.0757415  0.1455271    0.520 0.602741    \nORIGIN_BS50079         -0.6624719  0.1737405   -3.813 0.000137 ***\nORIGIN_BS50121          0.5980742  0.1239399    4.826 1.40e-06 ***\nORIGIN_BS50169          0.1654659  0.1239151    1.335 0.181773    \nORIGIN_BS50211          1.7510498  0.1054766   16.601  &lt; 2e-16 ***\nORIGIN_BS50279          1.3649659  0.1547488    8.821  &lt; 2e-16 ***\nORIGIN_BS50321          1.2305880  0.1627362    7.562 3.97e-14 ***\nORIGIN_BS50991          2.6189791  0.1148190   22.810  &lt; 2e-16 ***\nORIGIN_BS51039         -1.5277828  0.1986948   -7.689 1.48e-14 ***\nORIGIN_BS51119         -0.9771341  0.2183427   -4.475 7.63e-06 ***\nORIGIN_BS52011         -0.3714777  0.3934611   -0.944 0.345104    \nORIGIN_BS52061         -0.1680193  0.1461864   -1.149 0.250412    \nORIGIN_BS52071          2.0565407  0.1090974   18.850  &lt; 2e-16 ***\nORIGIN_BS52089          0.9173101  0.1504431    6.097 1.08e-09 ***\nORIGIN_BS52109          0.6724648  0.1122230    5.992 2.07e-09 ***\nORIGIN_BS52179          2.2793524  0.2082286   10.946  &lt; 2e-16 ***\nORIGIN_BS52199          2.1011385  0.3965281    5.299 1.17e-07 ***\nORIGIN_BS52211          0.0257806  0.2972948    0.087 0.930896    \nORIGIN_BS52231          1.7562853  0.1378189   12.743  &lt; 2e-16 ***\nORIGIN_BS52299         -1.1306161  0.3501006   -3.229 0.001240 ** \nORIGIN_BS52309         -5.5229709  1.0057682   -5.491 3.99e-08 ***\nORIGIN_BS52351          0.2560187  0.2020829    1.267 0.205191    \nORIGIN_BS52389         -1.5360812  0.4220497   -3.640 0.000273 ***\nORIGIN_BS52401         -1.8313169  0.1794083  -10.208  &lt; 2e-16 ***\nORIGIN_BS52449          2.6283305  0.1833093   14.338  &lt; 2e-16 ***\nORIGIN_BS52479          0.0971987  0.1555229    0.625 0.531984    \nORIGIN_BS53009          1.9449183  0.1044647   18.618  &lt; 2e-16 ***\nORIGIN_BS53039          0.4192418  0.1204570    3.480 0.000501 ***\nORIGIN_BS53059          1.7995463  0.1080187   16.660  &lt; 2e-16 ***\nORIGIN_BS53079          0.7040340  0.1241065    5.673 1.40e-08 ***\nORIGIN_BS53099         -0.0974917  0.1570315   -0.621 0.534704    \nORIGIN_BS53111         -1.9834156  0.4598570   -4.313 1.61e-05 ***\nORIGIN_BS53121          2.1650634  0.1110345   19.499  &lt; 2e-16 ***\nORIGIN_BS53199          0.5068904  0.1359501    3.729 0.000193 ***\nORIGIN_BS53209         -0.5182511  0.2253889   -2.299 0.021484 *  \nORIGIN_BS53211          0.0036776  0.1772739    0.021 0.983449    \nORIGIN_BS53281          5.1902354  0.1066838   48.651  &lt; 2e-16 ***\nORIGIN_BS53299          2.0878931  0.1230301   16.971  &lt; 2e-16 ***\nORIGIN_BS53351         -0.1046130  0.1325007   -0.790 0.429803    \nORIGIN_BS53359          2.4177930  0.1145175   21.113  &lt; 2e-16 ***\nORIGIN_BS53371          0.4316753  0.1159750    3.722 0.000198 ***\nORIGIN_BS53379          1.6424314  0.1142463   14.376  &lt; 2e-16 ***\nORIGIN_BS53389          2.5650183  0.1089055   23.553  &lt; 2e-16 ***\nORIGIN_BS53419          0.8509021  0.1587165    5.361 8.27e-08 ***\nORIGIN_BS54011          1.6040208  0.1434435   11.182  &lt; 2e-16 ***\nORIGIN_BS54049         -1.6841520  0.1552252  -10.850  &lt; 2e-16 ***\nORIGIN_BS54051          0.1259696  0.2309264    0.545 0.585412    \nORIGIN_BS54109          0.3542499  0.1445915    2.450 0.014285 *  \nORIGIN_BS54169          1.3025500  0.1818226    7.164 7.84e-13 ***\nORIGIN_BS54189          1.8254640  0.1278858   14.274  &lt; 2e-16 ***\nORIGIN_BS54229          0.3971979  0.1225247    3.242 0.001188 ** \nORIGIN_BS54247          1.1315682  0.1190797    9.503  &lt; 2e-16 ***\nORIGIN_BS54279          0.5244014  0.1400443    3.745 0.000181 ***\nORIGIN_BS54281          0.8934267  0.1301090    6.867 6.57e-12 ***\nORIGIN_BS54311          1.4499435  0.1203121   12.052  &lt; 2e-16 ***\nORIGIN_BS54339         -0.4484441  0.1356956   -3.305 0.000951 ***\nORIGIN_BS54351          0.5426704  0.1303457    4.163 3.14e-05 ***\nORIGIN_BS54489          0.3156690  0.1489754    2.119 0.034096 *  \nORIGIN_BS54491         -0.9617405  0.2162821   -4.447 8.72e-06 ***\nORIGIN_BS54539          0.0269159  0.1426816    0.189 0.850373    \nORIGIN_BS54589          1.3045578  0.1349973    9.664  &lt; 2e-16 ***\nORIGIN_BS54611          1.8072035  0.1503413   12.021  &lt; 2e-16 ***\nORIGIN_BS54641          0.4310545  0.3467031    1.243 0.213759    \nORIGIN_BS55021          2.9697712  0.1545942   19.210  &lt; 2e-16 ***\nORIGIN_BS55049          0.1932620  0.7284190    0.265 0.790765    \nORIGIN_BS55081          1.2718563  0.1236002   10.290  &lt; 2e-16 ***\nORIGIN_BS55119          2.5717567  0.1455456   17.670  &lt; 2e-16 ***\nORIGIN_BS55171          0.7713960  0.1977263    3.901 9.57e-05 ***\nORIGIN_BS55231         -0.4186789  0.2321418   -1.804 0.071302 .  \nORIGIN_BS55249         -1.8699130  0.4215396   -4.436 9.17e-06 ***\nORIGIN_BS55259         -0.4515670  0.1957140   -2.307 0.021039 *  \nORIGIN_BS55289         -0.7869771  0.3334796   -2.360 0.018280 *  \nORIGIN_BS56021          0.3622554  0.1407755    2.573 0.010074 *  \nORIGIN_BS56041         -1.1150552  0.2234609   -4.990 6.04e-07 ***\nORIGIN_BS56059          1.5427828  0.1178769   13.088  &lt; 2e-16 ***\nORIGIN_BS56069         -4.7283735  0.4626666  -10.220  &lt; 2e-16 ***\nORIGIN_BS56099          1.8548897  0.1144727   16.204  &lt; 2e-16 ***\nORIGIN_BS56269         -0.4052456  0.1449212   -2.796 0.005169 ** \nORIGIN_BS57059         -1.3681414  0.1633050   -8.378  &lt; 2e-16 ***\nORIGIN_BS57061         -0.7084124  0.1477735   -4.794 1.64e-06 ***\nORIGIN_BS57071          0.6624738  0.1146320    5.779 7.51e-09 ***\nORIGIN_BS57111          1.6098489  0.1238699   12.996  &lt; 2e-16 ***\nORIGIN_BS57129          0.2532836  0.1202006    2.107 0.035102 *  \nORIGIN_BS57139         -0.8040788  0.1447956   -5.553 2.80e-08 ***\nORIGIN_BS57149          0.6815136  0.2827208    2.411 0.015928 *  \nORIGIN_BS58101          0.2651043  0.1490866    1.778 0.075373 .  \nORIGIN_BS58121          0.4530292  0.2003086    2.262 0.023719 *  \nORIGIN_BS58201         -4.1294263  0.2192162  -18.837  &lt; 2e-16 ***\nORIGIN_BS58221          0.7208323  0.1719239    4.193 2.76e-05 ***\nORIGIN_BS58289          0.2579791  0.1643785    1.569 0.116550    \nORIGIN_BS58299         -0.1361218  0.2013860   -0.676 0.499089    \nORIGIN_BS58351          0.1356548  0.1709707    0.793 0.427522    \nORIGIN_BS58369         -0.7894161  0.2270952   -3.476 0.000509 ***\nORIGIN_BS58401         -0.5455720  0.2525720   -2.160 0.030768 *  \nORIGIN_BS58451         -1.5454708  0.2851007   -5.421 5.93e-08 ***\nORIGIN_BS58541         -0.3739833  0.1239655   -3.017 0.002554 ** \nORIGIN_BS59039          0.8292449  0.1194296    6.943 3.83e-12 ***\nORIGIN_BS59079          2.9080417  0.1116923   26.036  &lt; 2e-16 ***\nORIGIN_BS59149          1.1796576  0.1321830    8.924  &lt; 2e-16 ***\nORIGIN_BS59169          0.2772303  0.1289232    2.150 0.031527 *  \nORIGIN_BS59189          0.2272019  0.1361888    1.668 0.095259 .  \nORIGIN_BS59249          0.1913720  0.1654763    1.156 0.247480    \nORIGIN_BS59259         -1.9134109  0.1636289  -11.694  &lt; 2e-16 ***\nORIGIN_BS59261          0.5784911  0.1363307    4.243 2.20e-05 ***\nORIGIN_BS59299         -5.1963777  0.7390374   -7.031 2.05e-12 ***\nORIGIN_BS59311          1.8870980  0.2295056    8.222  &lt; 2e-16 ***\nORIGIN_BS59329         -1.5773813  0.3286859   -4.799 1.59e-06 ***\nORIGIN_BS59471          0.3872262  0.4836494    0.801 0.423343    \nORIGIN_BS59509         -1.7166122  0.2262714   -7.587 3.29e-14 ***\nORIGIN_BS59511          1.5952339  0.2114687    7.544 4.57e-14 ***\nORIGIN_BS59521         -0.1809797  0.2920115   -0.620 0.535410    \nORIGIN_BS59579         -1.4261001  0.1533616   -9.299  &lt; 2e-16 ***\nORIGIN_BS59601          0.1819201  0.4555549    0.399 0.689645    \nORIGIN_BS59619          0.1142285  0.1170959    0.976 0.329306    \nORIGIN_BS59711          3.1804342  0.2783058   11.428  &lt; 2e-16 ***\nORIGIN_BS59721          0.7182377  0.2062185    3.483 0.000496 ***\nORIGIN_BS59739         -1.2525269  0.1974207   -6.344 2.23e-10 ***\nORIGIN_BS59749         -1.2752351  0.1975754   -6.454 1.09e-10 ***\nORIGIN_BS60029         -0.3571526  0.1573210   -2.270 0.023195 *  \nORIGIN_BS60051         -0.2868475  0.1508709   -1.901 0.057266 .  \nORIGIN_BS60059         -0.8965253  0.2072166   -4.327 1.51e-05 ***\nORIGIN_BS60061          1.3040179  0.1514789    8.609  &lt; 2e-16 ***\nORIGIN_BS60089          1.8073779  0.1173714   15.399  &lt; 2e-16 ***\nORIGIN_BS60159          0.8521500  0.1081301    7.881 3.25e-15 ***\nORIGIN_BS60199          0.4259273  0.1205338    3.534 0.000410 ***\nORIGIN_BS60221          1.5514474  0.1200239   12.926  &lt; 2e-16 ***\nORIGIN_BS60261          0.9827252  0.1131179    8.688  &lt; 2e-16 ***\nORIGIN_BS61011          0.2777942  0.1317109    2.109 0.034934 *  \nORIGIN_BS61079         -0.1069768  0.2392800   -0.447 0.654819    \nORIGIN_BS62011          0.8153504  0.1134726    7.185 6.70e-13 ***\nORIGIN_BS62039         -0.4053621  0.1764363   -2.297 0.021590 *  \nORIGIN_BS62099         -1.6146897  0.2865567   -5.635 1.75e-08 ***\nORIGIN_BS62111          0.4305067  0.1339506    3.214 0.001309 ** \nORIGIN_BS63021          0.3139039  0.1664775    1.886 0.059354 .  \nORIGIN_BS63049          0.3317093  0.1208368    2.745 0.006049 ** \nORIGIN_BS63139          0.7913390  0.1195457    6.620 3.60e-11 ***\nORIGIN_BS63149          0.0059382  0.1223843    0.049 0.961301    \nORIGIN_BS63161          0.1292884  0.2071147    0.624 0.532473    \nORIGIN_BS63169          0.1008419  0.3715119    0.271 0.786055    \nORIGIN_BS63209          0.6946446  0.1205145    5.764 8.21e-09 ***\nORIGIN_BS63229         -0.0139683  0.1837382   -0.076 0.939401    \nORIGIN_BS63281          1.6241200  0.1102664   14.729  &lt; 2e-16 ***\nORIGIN_BS63289          0.8783783  0.1348237    6.515 7.27e-11 ***\nORIGIN_BS63309          0.7869340  0.1290424    6.098 1.07e-09 ***\nORIGIN_BS63321          0.4259814  0.1306556    3.260 0.001113 ** \nORIGIN_BS63329         -0.6294080  0.1615445   -3.896 9.77e-05 ***\nORIGIN_BS63331          0.4702442  0.1344285    3.498 0.000469 ***\nORIGIN_BS63369         -0.2757328  0.1238822   -2.226 0.026030 *  \nORIGIN_BS64011         -0.6194938  0.1709705   -3.623 0.000291 ***\nORIGIN_BS64019          0.6585310  0.1167221    5.642 1.68e-08 ***\nORIGIN_BS64029          0.7540283  0.1234599    6.107 1.01e-09 ***\nORIGIN_BS64119          1.7527921  0.1082070   16.199  &lt; 2e-16 ***\nORIGIN_BS64121         -0.5412419  0.1390993   -3.891 9.98e-05 ***\nORIGIN_BS64131         -0.8865892  0.3509820   -2.526 0.011536 *  \nORIGIN_BS64201          1.9634431  0.1148338   17.098  &lt; 2e-16 ***\nORIGIN_BS64229         -0.9943914  0.1749617   -5.683 1.32e-08 ***\nORIGIN_BS64371          0.1157687  0.1943380    0.596 0.551370    \nORIGIN_BS64411          0.7361044  0.1290986    5.702 1.18e-08 ***\nORIGIN_BS64491          1.4704875  0.1395446   10.538  &lt; 2e-16 ***\nORIGIN_BS64541          2.9946856  0.1214456   24.659  &lt; 2e-16 ***\nORIGIN_BS64629          1.2263409  0.1529791    8.016 1.09e-15 ***\nORIGIN_BS65061          2.0108926  0.1085884   18.518  &lt; 2e-16 ***\nORIGIN_BS65079          0.4031114  0.1259497    3.201 0.001372 ** \nORIGIN_BS65221          0.2063220  0.1315565    1.568 0.116808    \nORIGIN_BS65231          0.7419378  0.2333913    3.179 0.001478 ** \nORIGIN_BS65451          2.2172902  0.1324960   16.735  &lt; 2e-16 ***\nORIGIN_BS65461          0.4563489  0.1848961    2.468 0.013582 *  \nORIGIN_BS66019         -2.3781834  1.0055838   -2.365 0.018031 *  \nORIGIN_BS66039          0.9733568  0.1180115    8.248  &lt; 2e-16 ***\nORIGIN_BS66081         -1.1399394  0.1989622   -5.729 1.01e-08 ***\nORIGIN_BS66099          1.2059018  0.1242111    9.708  &lt; 2e-16 ***\nORIGIN_BS66139         -0.2369680  0.2059452   -1.151 0.249882    \nORIGIN_BS66149         -0.3586960  0.2449665   -1.464 0.143121    \nORIGIN_BS66181         -0.8473404  0.7158623   -1.184 0.236546    \nORIGIN_BS66241         -0.4537896  0.3950007   -1.149 0.250625    \nORIGIN_BS66251          0.0852069  0.3106473    0.274 0.783863    \nORIGIN_BS66301          2.7344428  0.2089696   13.085  &lt; 2e-16 ***\nORIGIN_BS66311          1.8317397  0.2636238    6.948 3.70e-12 ***\nORIGIN_BS66321          0.2590511  0.4250073    0.610 0.542179    \nORIGIN_BS66351          3.4791036  0.1046873   33.233  &lt; 2e-16 ***\nORIGIN_BS66371          2.0910501  0.1084597   19.280  &lt; 2e-16 ***\nORIGIN_BS66381          3.4166551  0.1071675   31.881  &lt; 2e-16 ***\nORIGIN_BS66399          0.3219672  0.1969631    1.635 0.102121    \nORIGIN_BS66409         -0.0089477  0.1964946   -0.046 0.963680    \nORIGIN_BS66419          1.0686060  0.1392191    7.676 1.64e-14 ***\nORIGIN_BS66421          2.1266969  0.1238335   17.174  &lt; 2e-16 ***\nORIGIN_BS66451          0.3285630  0.1269943    2.587 0.009675 ** \nORIGIN_BS66499          1.3708199  0.1116433   12.279  &lt; 2e-16 ***\nORIGIN_BS66581          0.8063699  0.2267448    3.556 0.000376 ***\nORIGIN_BS67021         -0.2309839  0.1908000   -1.211 0.226046    \nORIGIN_BS67059          0.9226023  0.1647273    5.601 2.13e-08 ***\nORIGIN_BS67079          0.6932293  0.1332564    5.202 1.97e-07 ***\nORIGIN_BS67101          0.2960637  0.1415302    2.092 0.036450 *  \nORIGIN_BS67121          1.3986388  0.1311913   10.661  &lt; 2e-16 ***\nORIGIN_BS67171          0.7111666  0.1377054    5.164 2.41e-07 ***\nORIGIN_BS67229          1.6430590  0.1318626   12.460  &lt; 2e-16 ***\nORIGIN_BS67321         -0.2999175  0.2837374   -1.057 0.290500    \nORIGIN_BS67371          1.3578787  0.1524698    8.906  &lt; 2e-16 ***\nORIGIN_BS67389         -0.6862091  0.1511439   -4.540 5.62e-06 ***\nORIGIN_BS67499          1.5625811  0.1268555   12.318  &lt; 2e-16 ***\nORIGIN_BS67599          3.0412012  0.1134794   26.800  &lt; 2e-16 ***\nORIGIN_BS67619          0.2389192  0.2001242    1.194 0.232535    \nORIGIN_BS67659         -0.6978141  0.5948011   -1.173 0.240720    \nORIGIN_BS68029          2.0713113  0.1296651   15.974  &lt; 2e-16 ***\nORIGIN_BS68039          0.7559072  0.1383975    5.462 4.71e-08 ***\nORIGIN_BS68069         -1.0380612  0.3535979   -2.936 0.003328 ** \nORIGIN_BS68101         -3.4007192  0.7150392   -4.756 1.97e-06 ***\nORIGIN_BS68111          2.0922309  0.1092177   19.157  &lt; 2e-16 ***\nORIGIN_BS68151         -1.9717496  0.3336738   -5.909 3.44e-09 ***\nORIGIN_BS70019          0.6504111  0.1216227    5.348 8.90e-08 ***\nORIGIN_BS70021         -0.2749468  0.1264414   -2.174 0.029668 *  \nORIGIN_BS70041          1.1736583  0.1324259    8.863  &lt; 2e-16 ***\nORIGIN_BS70051          2.0599422  0.1195387   17.232  &lt; 2e-16 ***\nORIGIN_BS70079         -0.6048288  0.1729287   -3.498 0.000470 ***\nORIGIN_BS70101          0.5529162  0.1235779    4.474 7.67e-06 ***\nORIGIN_BS70109          1.3349656  0.1123302   11.884  &lt; 2e-16 ***\nORIGIN_BS70119          1.9298091  0.1090956   17.689  &lt; 2e-16 ***\nORIGIN_BS70121          0.4657259  0.1290402    3.609 0.000307 ***\nORIGIN_BS70231          1.4587602  0.1071701   13.612  &lt; 2e-16 ***\nORIGIN_BS70279          0.4516283  0.1148627    3.932 8.43e-05 ***\nORIGIN_BS70291          0.5825177  0.1173586    4.964 6.92e-07 ***\nORIGIN_BS70401         -1.6137328  0.2872780   -5.617 1.94e-08 ***\nORIGIN_BS71011          0.7705020  0.1413552    5.451 5.01e-08 ***\nORIGIN_BS71049          1.2146120  0.1243172    9.770  &lt; 2e-16 ***\nORIGIN_BS71051          0.1982872  0.1317451    1.505 0.132303    \nORIGIN_BS71071          1.2932328  0.1118932   11.558  &lt; 2e-16 ***\nORIGIN_BS71091          1.4381093  0.1071457   13.422  &lt; 2e-16 ***\nORIGIN_BS71119          1.3738882  0.1150024   11.947  &lt; 2e-16 ***\nORIGIN_BS71121          1.1368572  0.1143535    9.942  &lt; 2e-16 ***\nORIGIN_BS71129         -0.1648610  0.1398105   -1.179 0.238329    \nORIGIN_BS71169          0.3035706  0.1215634    2.497 0.012517 *  \nORIGIN_BS71171         -2.2639825  0.4594919   -4.927 8.34e-07 ***\nORIGIN_BS72041          1.0500878  0.1189987    8.824  &lt; 2e-16 ***\nORIGIN_BS72061          0.8512530  0.1234415    6.896 5.35e-12 ***\nORIGIN_BS73019         -0.8327433  1.0063322   -0.828 0.407952    \nORIGIN_BS74031          0.2418026  0.2561229    0.944 0.345124    \nORIGIN_BS75031          0.5727973  0.1209204    4.737 2.17e-06 ***\nORIGIN_BS75131          1.1362694  0.1323787    8.583  &lt; 2e-16 ***\nORIGIN_BS75141          1.2281867  0.1273871    9.641  &lt; 2e-16 ***\nORIGIN_BS75151         -1.7720969  0.1466481  -12.084  &lt; 2e-16 ***\nORIGIN_BS75201         -0.6818753  0.1697563   -4.017 5.90e-05 ***\nORIGIN_BS75209          0.1895089  0.2363057    0.802 0.422573    \nORIGIN_BS75221         -0.1564626  0.1365648   -1.146 0.251918    \nORIGIN_BS75269         -0.1699285  0.1615673   -1.052 0.292914    \nORIGIN_BS75271          1.2257564  0.1532350    7.999 1.25e-15 ***\nORIGIN_BS75299         -0.3024673  0.1396358   -2.166 0.030302 *  \nORIGIN_BS75359          1.8132537  0.1109254   16.347  &lt; 2e-16 ***\nORIGIN_BS75381         -0.8528572  0.5123051   -1.665 0.095964 .  \nORIGIN_BS75419         -0.0316554  0.1381290   -0.229 0.818735    \nORIGIN_BS76079          0.5792348  0.1215801    4.764 1.90e-06 ***\nORIGIN_BS76109          1.0697830  0.1081741    9.889  &lt; 2e-16 ***\nORIGIN_BS76131          1.1621868  0.1219545    9.530  &lt; 2e-16 ***\nORIGIN_BS76161         -0.0052273  0.2309514   -0.023 0.981943    \nORIGIN_BS76181          3.8694715  0.5259299    7.357 1.88e-13 ***\nORIGIN_BS76201         -0.3827404  0.1309019   -2.924 0.003457 ** \nORIGIN_BS76209         -0.7699168  0.2721225   -2.829 0.004665 ** \nORIGIN_BS76241          0.9974927  0.1093897    9.119  &lt; 2e-16 ***\nORIGIN_BS76249          0.5835706  0.1123058    5.196 2.03e-07 ***\nORIGIN_BS76269          0.2322055  0.1423788    1.631 0.102911    \nORIGIN_BS76291         -1.4962819  0.5113293   -2.926 0.003431 ** \nORIGIN_BS76391         -2.3756855  0.5156175   -4.607 4.08e-06 ***\nORIGIN_BS76441         -1.5516269  0.4608802   -3.367 0.000761 ***\nORIGIN_BS76459         -0.4027250  0.1552914   -2.593 0.009505 ** \nORIGIN_BS77011          1.1480785  0.1238189    9.272  &lt; 2e-16 ***\nORIGIN_BS77049          0.8772033  0.1189278    7.376 1.63e-13 ***\nORIGIN_BS77091         -1.3332816  0.3202882   -4.163 3.14e-05 ***\nORIGIN_BS77211         -0.1419367  0.1307783   -1.085 0.277779    \nORIGIN_BS77279         -0.7865942  1.0099830   -0.779 0.436086    \nORIGIN_BS77331          1.1728620  0.1109832   10.568  &lt; 2e-16 ***\nORIGIN_BS77381         -0.3531421  0.1832231   -1.927 0.053931 .  \nORIGIN_BS78061          1.6164780  0.1185639   13.634  &lt; 2e-16 ***\nORIGIN_BS78081          0.5815914  0.1323500    4.394 1.11e-05 ***\nORIGIN_BS78129         -1.3921883  0.2385377   -5.836 5.34e-09 ***\nORIGIN_BS78131         -0.4367628  0.2654214   -1.646 0.099858 .  \nORIGIN_BS78139         -2.1733655  0.3208939   -6.773 1.26e-11 ***\nORIGIN_BS78161          0.0659118  0.1528330    0.431 0.666274    \nORIGIN_BS78191          0.6257271  0.1174337    5.328 9.91e-08 ***\nORIGIN_BS78261         -1.5360812  0.4220497   -3.640 0.000273 ***\nORIGIN_BS80029         -0.0789379  0.1212911   -0.651 0.515167    \nORIGIN_BS80049          1.0210631  0.1073465    9.512  &lt; 2e-16 ***\nORIGIN_BS80111          0.2610842  0.1324577    1.971 0.048715 *  \nORIGIN_BS80151          1.5893912  0.1109489   14.325  &lt; 2e-16 ***\nORIGIN_BS80159          1.0921339  0.1149901    9.498  &lt; 2e-16 ***\nORIGIN_BS80171         -0.6962169  0.3935997   -1.769 0.076920 .  \nORIGIN_BS80191          0.6389921  0.1480804    4.315 1.59e-05 ***\nORIGIN_BS80229         -0.7062581  0.2879102   -2.453 0.014165 *  \nORIGIN_BS80239         -0.7856600  0.3706281   -2.120 0.034022 *  \nORIGIN_BS80251          0.7877479  0.1357571    5.803 6.53e-09 ***\nORIGIN_BS80271          0.7433689  0.1269886    5.854 4.80e-09 ***\nORIGIN_BS80289         -0.2419058  0.1470216   -1.645 0.099892 .  \nORIGIN_BS81031          0.8116868  0.1143391    7.099 1.26e-12 ***\nORIGIN_BS81099         -0.0615632  0.1457451   -0.422 0.672730    \nORIGIN_BS81101         -0.7697148  0.1780307   -4.323 1.54e-05 ***\nORIGIN_BS81109          0.4025249  0.1201951    3.349 0.000811 ***\nORIGIN_BS81209         -0.9832625  0.1779718   -5.525 3.30e-08 ***\nORIGIN_BS81231         -1.0987503  0.2435092   -4.512 6.42e-06 ***\nORIGIN_BS82029          1.3592423  0.1062623   12.791  &lt; 2e-16 ***\nORIGIN_BS82033          0.8411236  0.1371491    6.133 8.63e-10 ***\nORIGIN_BS82051          0.7133133  0.1846524    3.863 0.000112 ***\nORIGIN_BS82131          0.7903234  0.1597932    4.946 7.58e-07 ***\nORIGIN_BS82181         -0.0819685  0.3764369   -0.218 0.827625    \nORIGIN_BS83031          0.3848592  0.1313188    2.931 0.003382 ** \nORIGIN_BS83099          0.8247976  0.1132229    7.285 3.22e-13 ***\nORIGIN_BS83101          1.9391157  0.1054149   18.395  &lt; 2e-16 ***\nORIGIN_BS83109          1.0065734  0.1165613    8.636  &lt; 2e-16 ***\nORIGIN_BS83111          0.4348977  0.1146209    3.794 0.000148 ***\nORIGIN_BS83129         -0.5451835  0.2147059   -2.539 0.011110 *  \nORIGIN_BS83169          0.4751738  0.1357206    3.501 0.000463 ***\nORIGIN_BS83329          2.0449665  0.1771755   11.542  &lt; 2e-16 ***\nORIGIN_BS83341          0.9896474  0.1574568    6.285 3.27e-10 ***\nORIGIN_BS84019          1.0241040  0.1095662    9.347  &lt; 2e-16 ***\nORIGIN_BS84029          1.1923641  0.1085825   10.981  &lt; 2e-16 ***\nORIGIN_BS84031          3.0135473  0.1051698   28.654  &lt; 2e-16 ***\nORIGIN_BS84079         -0.4137401  0.1605551   -2.577 0.009968 ** \nORIGIN_BS84081          0.1679231  0.1409435    1.191 0.233488    \nORIGIN_BS84141          0.5876156  0.1285312    4.572 4.84e-06 ***\nORIGIN_BS84169         -0.9601606  0.4242133   -2.263 0.023612 *  \nORIGIN_BS84191         -0.1038587  0.1706621   -0.609 0.542814    \nORIGIN_BS84219          1.3163976  0.1153590   11.411  &lt; 2e-16 ***\nORIGIN_BS84221         -1.2390839  0.1187224  -10.437  &lt; 2e-16 ***\nORIGIN_BS84231         -0.9339827  0.1174246   -7.954 1.81e-15 ***\nORIGIN_BS84239          1.5327990  0.1256490   12.199  &lt; 2e-16 ***\nORIGIN_BS84261         -0.7309183  0.2152639   -3.395 0.000685 ***\nORIGIN_BS84271         -0.0593433  0.2082230   -0.285 0.775645    \nORIGIN_BS84279          1.0007995  0.1693508    5.910 3.43e-09 ***\nORIGIN_BS84289          0.3062538  0.1318127    2.323 0.020158 *  \nORIGIN_BS84309         -2.1697804  0.4603266   -4.714 2.43e-06 ***\nORIGIN_BS84329          0.6359161  0.2065574    3.079 0.002079 ** \nORIGIN_BS84371         -2.3115602  0.3825339   -6.043 1.52e-09 ***\nORIGIN_BS84379          2.4458456  0.1177545   20.771  &lt; 2e-16 ***\nORIGIN_BS84401         -0.9838315  0.7201199   -1.366 0.171875    \nORIGIN_BS84451         -0.1251586  0.1323791   -0.945 0.344426    \nORIGIN_BS84491          0.7142591  0.1187715    6.014 1.81e-09 ***\nORIGIN_BS84501          0.9307411  0.1413210    6.586 4.52e-11 ***\nORIGIN_BS84521          0.6426932  0.1161342    5.534 3.13e-08 ***\nORIGIN_BS84591         -1.1567241  0.1924069   -6.012 1.83e-09 ***\nORIGIN_BS84601         -0.6960166  0.1795946   -3.875 0.000106 ***\nORIGIN_BS84629         -0.1709348  0.1347062   -1.269 0.204460    \nORIGIN_BS84671         -1.0408405  0.2101554   -4.953 7.32e-07 ***\nORIGIN_BS85021          0.5428065  0.1363980    3.980 6.90e-05 ***\nORIGIN_BS85029         -1.2646072  0.3736352   -3.385 0.000713 ***\nORIGIN_BS90029          0.2411033  0.2033565    1.186 0.235773    \nORIGIN_BS90069          1.1044426  0.1464281    7.543 4.61e-14 ***\nORIGIN_BS91069          1.2666775  0.1187353   10.668  &lt; 2e-16 ***\nORIGIN_BS91071         -0.8312916  0.2258770   -3.680 0.000233 ***\nORIGIN_BS91099          0.8075953  0.1236525    6.531 6.53e-11 ***\nORIGIN_BS92099          1.1658271  0.1154874   10.095  &lt; 2e-16 ***\nORIGIN_BS92129          1.4875580  0.1137456   13.078  &lt; 2e-16 ***\nORIGIN_BS92141          0.6868118  0.1285959    5.341 9.25e-08 ***\nORIGIN_BS92159          0.8627031  0.1175927    7.336 2.19e-13 ***\nORIGIN_BS92189          1.5173202  0.2383064    6.367 1.93e-10 ***\nORIGIN_BS92191          0.1747274  0.3262223    0.536 0.592229    \nORIGIN_BS93049          0.3077351  0.1341728    2.294 0.021815 *  \nORIGIN_BS93061          0.5989530  0.1240132    4.830 1.37e-06 ***\nORIGIN_BS93069          1.5028227  0.1120866   13.408  &lt; 2e-16 ***\nORIGIN_BS93081         -0.8258872  0.1899940   -4.347 1.38e-05 ***\nORIGIN_BS93171         -0.6139445  0.3262435   -1.882 0.059855 .  \nORIGIN_BS94021         -0.9790343  0.2232451   -4.385 1.16e-05 ***\nORIGIN_BS94029          0.8822096  0.1116158    7.904 2.70e-15 ***\nORIGIN_BS94061         -1.2604709  0.2455757   -5.133 2.86e-07 ***\nORIGIN_BS95029          2.9388706  0.1040195   28.253  &lt; 2e-16 ***\nORIGIN_BS95109          2.2294870  0.1045280   21.329  &lt; 2e-16 ***\nORIGIN_BS95129          1.2608037  0.1078933   11.686  &lt; 2e-16 ***\nORIGIN_BS95139          1.0543035  0.1257194    8.386  &lt; 2e-16 ***\nORIGIN_BS95909          0.1216039  0.1662822    0.731 0.464589    \nORIGIN_BS96011         -2.9229359  0.3331473   -8.774  &lt; 2e-16 ***\nORIGIN_BS96069          0.2241464  0.1246486    1.798 0.072141 .  \nORIGIN_BS96131         -0.0017085  0.2059157   -0.008 0.993380    \nORIGIN_BS96161          1.0910486  0.1239373    8.803  &lt; 2e-16 ***\nORIGIN_BS96179         -2.6586766  0.2588511  -10.271  &lt; 2e-16 ***\nORIGIN_BS96239         -1.9614849  0.2066657   -9.491  &lt; 2e-16 ***\nORIGIN_BS96249         -1.7216477  0.1785308   -9.643  &lt; 2e-16 ***\nORIGIN_BS96281          0.9309034  0.1293461    7.197 6.16e-13 ***\nORIGIN_BS96291         -0.0520089  0.3453903   -0.151 0.880307    \nORIGIN_BS96351         -0.8785102  0.1925964   -4.561 5.08e-06 ***\nORIGIN_BS96361         -1.6125850  0.2122612   -7.597 3.03e-14 ***\nORIGIN_BS97019          1.0704064  0.1120321    9.554  &lt; 2e-16 ***\nORIGIN_BS97099         -0.6259551  0.2811601   -2.226 0.025992 *  \nORIGIN_BS97109         -0.4096023  0.3082403   -1.329 0.183901    \nORIGIN_BS97159          1.3764189  0.1513782    9.093  &lt; 2e-16 ***\nORIGIN_BS97179          3.4030766  0.1164583   29.221  &lt; 2e-16 ***\nORIGIN_BS97181         -0.0945084  0.3079456   -0.307 0.758920    \nORIGIN_BS97209         -0.1135283  0.2224503   -0.510 0.609804    \nORIGIN_BS98079          0.0264560  0.1309785    0.202 0.839927    \nORIGIN_BS98129          0.3041664  0.1245564    2.442 0.014606 *  \nORIGIN_BS98139          0.6870642  0.1196938    5.740 9.46e-09 ***\nORIGIN_BS98291          1.7541130  0.1104994   15.874  &lt; 2e-16 ***\nORIGIN_BS98301         -2.0784701  0.7152344   -2.906 0.003661 ** \nORIGIN_BS99049          1.2524117  0.1135633   11.028  &lt; 2e-16 ***\nORIGIN_BS99101         -0.3061835  0.5114716   -0.599 0.549418    \nORIGIN_BS99189         -0.4506417  0.1690188   -2.666 0.007671 ** \nDESTIN_BS01119          0.4069740  0.0446455    9.116  &lt; 2e-16 ***\nDESTIN_BS01231         -2.5707049  0.1938615  -13.261  &lt; 2e-16 ***\nDESTIN_BS01239          0.1366233  0.0812530    1.681 0.092674 .  \nDESTIN_BS01349         -2.3682799  0.4498300   -5.265 1.40e-07 ***\nDESTIN_BS01549         -0.7175988  0.0990114   -7.248 4.24e-13 ***\nDESTIN_BS02089         -0.4374042  0.0503738   -8.683  &lt; 2e-16 ***\nDESTIN_BS02119         -0.8383930  0.0942741   -8.893  &lt; 2e-16 ***\nDESTIN_BS03011          0.2547866  0.0630837    4.039 5.37e-05 ***\nDESTIN_BS03021         -0.7540440  0.1687565   -4.468 7.89e-06 ***\nDESTIN_BS03111         -0.5459481  0.0896615   -6.089 1.14e-09 ***\nDESTIN_BS03218         -0.7086324  0.0625222  -11.334  &lt; 2e-16 ***\nDESTIN_BS03391         -0.1144877  0.1226463   -0.933 0.350573    \nDESTIN_BS03511          1.7711925  0.0692415   25.580  &lt; 2e-16 ***\nDESTIN_BS04179         -1.2576939  0.0597771  -21.040  &lt; 2e-16 ***\nDESTIN_BS04211         -1.6983569  0.2802384   -6.060 1.36e-09 ***\nDESTIN_BS04219         -1.1451291  0.1511180   -7.578 3.52e-14 ***\nDESTIN_BS04311         -1.5345078  0.1088597  -14.096  &lt; 2e-16 ***\nDESTIN_BS05013          1.6122190  0.0443524   36.350  &lt; 2e-16 ***\nDESTIN_BS05023         -2.0767971  0.0660221  -31.456  &lt; 2e-16 ***\nDESTIN_BS05259         -1.0012581  0.1189179   -8.420  &lt; 2e-16 ***\nDESTIN_BS05431         -1.8779067  0.3191790   -5.884 4.02e-09 ***\nDESTIN_BS06049         -1.4499494  0.1530135   -9.476  &lt; 2e-16 ***\nDESTIN_BS06141         -1.3480295  0.1503932   -8.963  &lt; 2e-16 ***\nDESTIN_BS06159         -0.4609032  0.1111184   -4.148 3.36e-05 ***\nDESTIN_BS07011         -0.7319036  0.0627215  -11.669  &lt; 2e-16 ***\nDESTIN_BS07021         -0.6156014  0.0695132   -8.856  &lt; 2e-16 ***\nDESTIN_BS07249         -1.4616662  0.1241845  -11.770  &lt; 2e-16 ***\nDESTIN_BS07331         -0.0166990  0.1604325   -0.104 0.917100    \nDESTIN_BS07369         -0.8367674  0.0693240  -12.070  &lt; 2e-16 ***\nDESTIN_BS07379         -0.7692973  0.0613029  -12.549  &lt; 2e-16 ***\nDESTIN_BS07419          1.5242983  0.0421475   36.166  &lt; 2e-16 ***\nDESTIN_BS07539         -0.0984892  0.0629182   -1.565 0.117500    \nDESTIN_BS07569         -2.4930899  0.1485106  -16.787  &lt; 2e-16 ***\nDESTIN_BS08058          0.3887210  0.0701760    5.539 3.04e-08 ***\nDESTIN_BS08069          0.1930214  0.0461442    4.183 2.88e-05 ***\nDESTIN_BS08121         -0.0684589  0.0431530   -1.586 0.112643    \nDESTIN_BS09047          0.9646192  0.0409536   23.554  &lt; 2e-16 ***\nDESTIN_BS09121         -1.0830301  0.0811456  -13.347  &lt; 2e-16 ***\nDESTIN_BS09149         -1.8226700  0.1561913  -11.669  &lt; 2e-16 ***\nDESTIN_BS09213         -0.6801460  0.0705573   -9.640  &lt; 2e-16 ***\nDESTIN_BS09219          0.5747465  0.0452959   12.689  &lt; 2e-16 ***\nDESTIN_BS10017         -0.1380838  0.0778870   -1.773 0.076250 .  \nDESTIN_BS10061         -1.0050885  0.0926651  -10.846  &lt; 2e-16 ***\nDESTIN_BS10099          0.1408717  0.0614907    2.291 0.021967 *  \nDESTIN_BS10129         -0.4446460  0.2070424   -2.148 0.031745 *  \nDESTIN_BS10139         -0.1580289  0.0630801   -2.505 0.012238 *  \nDESTIN_BS10191         -0.3476095  0.0730058   -4.761 1.92e-06 ***\nDESTIN_BS10199         -0.0404497  0.0682696   -0.592 0.553516    \nDESTIN_BS10249         -0.5815085  0.1112847   -5.225 1.74e-07 ***\nDESTIN_BS10281         -0.6616497  0.0852769   -7.759 8.57e-15 ***\nDESTIN_BS10299         -0.1899560  0.0670397   -2.833 0.004604 ** \nDESTIN_BS10321         -1.0878160  0.1166788   -9.323  &lt; 2e-16 ***\nDESTIN_BS10341         -0.2932129  0.1215903   -2.411 0.015888 *  \nDESTIN_BS10381          0.0775393  0.0621158    1.248 0.211920    \nDESTIN_BS10459         -2.9232648  0.4503931   -6.490 8.56e-11 ***\nDESTIN_BS10469          0.0615527  0.0816604    0.754 0.450990    \nDESTIN_BS11019          0.2954463  0.0597668    4.943 7.68e-07 ***\nDESTIN_BS11031         -1.7064531  0.1844538   -9.251  &lt; 2e-16 ***\nDESTIN_BS11041         -1.1861979  0.1162929  -10.200  &lt; 2e-16 ***\nDESTIN_BS11049         -1.3791089  0.1110127  -12.423  &lt; 2e-16 ***\nDESTIN_BS11081         -2.1584527  0.1786652  -12.081  &lt; 2e-16 ***\nDESTIN_BS11099         -1.2358598  0.1027146  -12.032  &lt; 2e-16 ***\nDESTIN_BS11131         -0.4606350  0.0786678   -5.855 4.76e-09 ***\nDESTIN_BS11171         -0.7226694  0.0770909   -9.374  &lt; 2e-16 ***\nDESTIN_BS11201         -0.8837392  0.0875969  -10.089  &lt; 2e-16 ***\nDESTIN_BS11211         -1.5414409  0.1074364  -14.347  &lt; 2e-16 ***\nDESTIN_BS11221         -0.1076644  0.0702636   -1.532 0.125450    \nDESTIN_BS11271         -0.9656667  0.1244645   -7.759 8.59e-15 ***\nDESTIN_BS11309         -2.2301762  0.2815780   -7.920 2.37e-15 ***\nDESTIN_BS11339         -2.5263454  0.5035257   -5.017 5.24e-07 ***\nDESTIN_BS11369          0.6965313  0.0811971    8.578  &lt; 2e-16 ***\nDESTIN_BS11389         -0.4458793  0.0591379   -7.540 4.71e-14 ***\nDESTIN_BS11409          0.1026242  0.0816981    1.256 0.209066    \nDESTIN_BS11459         -1.3253495  0.2891377   -4.584 4.57e-06 ***\nDESTIN_BS11519          0.0442470  0.0575939    0.768 0.442333    \nDESTIN_BS11529          1.0124066  0.0655878   15.436  &lt; 2e-16 ***\nDESTIN_BS11531         -2.8454445  0.2008926  -14.164  &lt; 2e-16 ***\nDESTIN_BS11589         -0.5975521  0.1198189   -4.987 6.13e-07 ***\nDESTIN_BS12029         -1.3927519  0.1865360   -7.466 8.24e-14 ***\nDESTIN_BS12031         -1.0179779  0.0963141  -10.569  &lt; 2e-16 ***\nDESTIN_BS12069         -0.0172165  0.0652932   -0.264 0.792027    \nDESTIN_BS12071          0.2564000  0.0535903    4.784 1.71e-06 ***\nDESTIN_BS12109         -1.1157136  0.1007385  -11.075  &lt; 2e-16 ***\nDESTIN_BS12119         -2.6721887  0.2647933  -10.092  &lt; 2e-16 ***\nDESTIN_BS12129         -1.1156696  0.1349208   -8.269  &lt; 2e-16 ***\nDESTIN_BS12149         -2.5207720  0.3285906   -7.671 1.70e-14 ***\nDESTIN_BS12169         -2.0215629  0.3863630   -5.232 1.67e-07 ***\nDESTIN_BS12199         -1.5314804  0.1554077   -9.855  &lt; 2e-16 ***\nDESTIN_BS12201         -1.7265774  0.5064943   -3.409 0.000652 ***\nDESTIN_BS12209         -1.6712110  0.2828961   -5.908 3.47e-09 ***\nDESTIN_BS13029         -2.3034513  0.2002954  -11.500  &lt; 2e-16 ***\nDESTIN_BS13089         -0.1321141  0.0882615   -1.497 0.134433    \nDESTIN_BS13141         -1.5354968  0.1309563  -11.725  &lt; 2e-16 ***\nDESTIN_BS13159         -0.6911630  0.0718806   -9.615  &lt; 2e-16 ***\nDESTIN_BS14019         -2.0104213  0.1533996  -13.106  &lt; 2e-16 ***\nDESTIN_BS14071         -1.8509567  0.3275901   -5.650 1.60e-08 ***\nDESTIN_BS14119         -0.2060731  0.0699303   -2.947 0.003210 ** \nDESTIN_BS14159         -0.6962679  0.0805539   -8.644  &lt; 2e-16 ***\nDESTIN_BS14171         -1.7287943  0.2921054   -5.918 3.25e-09 ***\nDESTIN_BS14189         -0.8559849  0.1015358   -8.430  &lt; 2e-16 ***\nDESTIN_BS14199         -0.0928472  0.0832591   -1.115 0.264782    \nDESTIN_BS14219         -0.2755076  0.0866072   -3.181 0.001467 ** \nDESTIN_BS14221         -1.5861037  0.1472056  -10.775  &lt; 2e-16 ***\nDESTIN_BS14241         -0.7150448  0.1006801   -7.102 1.23e-12 ***\nDESTIN_BS14259          0.5327778  0.1203859    4.426 9.62e-06 ***\nDESTIN_BS14291         -0.7521366  0.1194285   -6.298 3.02e-10 ***\nDESTIN_BS14519          0.4979183  0.1839367    2.707 0.006789 ** \nDESTIN_BS15071         -0.7270762  0.2360915   -3.080 0.002073 ** \nDESTIN_BS15159         -1.6287690  0.1943625   -8.380  &lt; 2e-16 ***\nDESTIN_BS15209         -0.0678891  0.0921041   -0.737 0.461067    \nDESTIN_BS16029         -1.0619456  0.1708242   -6.217 5.08e-10 ***\nDESTIN_BS16049         -0.0412560  0.0628991   -0.656 0.511883    \nDESTIN_BS16089          0.5387406  0.0541114    9.956  &lt; 2e-16 ***\nDESTIN_BS16099         -1.6436114  0.3810201   -4.314 1.61e-05 ***\nDESTIN_BS16159         -0.0505597  0.0603222   -0.838 0.401941    \nDESTIN_BS16179         -3.0736264  0.7151536   -4.298 1.72e-05 ***\nDESTIN_BS16181         -1.3225247  0.1657520   -7.979 1.48e-15 ***\nDESTIN_BS16239         -0.2637383  0.1237059   -2.132 0.033009 *  \nDESTIN_BS17011         -0.9054761  0.1595874   -5.674 1.40e-08 ***\nDESTIN_BS17039         -1.3502937  0.0684489  -19.727  &lt; 2e-16 ***\nDESTIN_BS17049          1.4192370  0.0444052   31.961  &lt; 2e-16 ***\nDESTIN_BS17059         -1.7308750  0.1307642  -13.237  &lt; 2e-16 ***\nDESTIN_BS17061         -0.4878176  0.1113032   -4.383 1.17e-05 ***\nDESTIN_BS17091         -0.1854501  0.1433315   -1.294 0.195716    \nDESTIN_BS17101         -0.8524943  0.0639232  -13.336  &lt; 2e-16 ***\nDESTIN_BS17179          2.2492643  0.0443500   50.716  &lt; 2e-16 ***\nDESTIN_BS17181         -4.3421753  0.1172238  -37.042  &lt; 2e-16 ***\nDESTIN_BS17189         -0.7167929  0.0635564  -11.278  &lt; 2e-16 ***\nDESTIN_BS17309         -1.4165295  0.1599832   -8.854  &lt; 2e-16 ***\nDESTIN_BS17339         -1.2342502  0.3391048   -3.640 0.000273 ***\nDESTIN_BS17389         -0.1176806  0.0601070   -1.958 0.050247 .  \nDESTIN_BS18011         -1.0573487  0.1369665   -7.720 1.17e-14 ***\nDESTIN_BS18141         -1.5709663  0.1082175  -14.517  &lt; 2e-16 ***\nDESTIN_BS18149         -1.7714032  0.1293436  -13.695  &lt; 2e-16 ***\nDESTIN_BS18191         -0.9826036  0.1669449   -5.886 3.96e-09 ***\nDESTIN_BS18241         -2.4404458  0.3571756   -6.833 8.34e-12 ***\nDESTIN_BS18261         -2.9254457  0.5022500   -5.825 5.72e-09 ***\nDESTIN_BS18301         -1.3345186  0.1917609   -6.959 3.42e-12 ***\nDESTIN_BS19059          1.3041154  0.0517487   25.201  &lt; 2e-16 ***\nDESTIN_BS19091         -0.8255731  0.1019021   -8.102 5.42e-16 ***\nDESTIN_BS20031          0.2917871  0.0633018    4.609 4.04e-06 ***\nDESTIN_BS20051         -0.2771643  0.0853514   -3.247 0.001165 ** \nDESTIN_BS20089         -0.0871245  0.0893344   -0.975 0.329430    \nDESTIN_BS20239         -1.2948677  0.0702056  -18.444  &lt; 2e-16 ***\nDESTIN_BS20281         -2.0739968  0.2580328   -8.038 9.15e-16 ***\nDESTIN_BS20299         -1.9764502  0.2042689   -9.676  &lt; 2e-16 ***\nDESTIN_BS20319         -4.9125464  0.4164169  -11.797  &lt; 2e-16 ***\nDESTIN_BS21019         -0.3319758  0.1372601   -2.419 0.015581 *  \nDESTIN_BS21049         -1.7311538  0.2138566   -8.095 5.73e-16 ***\nDESTIN_BS21051         -1.4282412  0.4514746   -3.164 0.001559 ** \nDESTIN_BS21079         -3.0364345  0.1666048  -18.225  &lt; 2e-16 ***\nDESTIN_BS21109         -2.2634885  0.4113608   -5.502 3.75e-08 ***\nDESTIN_BS21139         -3.2640084  0.3827236   -8.528  &lt; 2e-16 ***\nDESTIN_BS21159         -2.4400567  0.5038265   -4.843 1.28e-06 ***\nDESTIN_BS21179         -0.8670834  0.1658214   -5.229 1.70e-07 ***\nDESTIN_BS21351         -0.2495535  0.3693230   -0.676 0.499228    \nDESTIN_BS21369         -0.9642337  0.1047287   -9.207  &lt; 2e-16 ***\nDESTIN_BS21389         -0.7072773  0.1133039   -6.242 4.31e-10 ***\nDESTIN_BS21429          0.5536633  0.0559687    9.892  &lt; 2e-16 ***\nDESTIN_BS21501         -3.4246692  1.0035719   -3.412 0.000644 ***\nDESTIN_BS21561         -0.0853168  0.0776860   -1.098 0.272106    \nDESTIN_BS21611         -0.6810023  0.1231725   -5.529 3.22e-08 ***\nDESTIN_BS21631         -1.2376647  0.1028610  -12.032  &lt; 2e-16 ***\nDESTIN_BS21651         -0.8960420  0.1336984   -6.702 2.06e-11 ***\nDESTIN_BS21681         -1.1698295  0.0981528  -11.918  &lt; 2e-16 ***\nDESTIN_BS21771         -0.6976590  0.1128741   -6.181 6.38e-10 ***\nDESTIN_BS22169         -2.8507356  0.5367211   -5.311 1.09e-07 ***\nDESTIN_BS22241         -0.7366390  0.4827942   -1.526 0.127064    \nDESTIN_BS22289          2.4900368  1.1700304    2.128 0.033322 *  \nDESTIN_BS22349          0.6233304  0.1598807    3.899 9.67e-05 ***\nDESTIN_BS22479         -2.3833390  0.2372109  -10.047  &lt; 2e-16 ***\nDESTIN_BS22509          0.6916767  0.1644785    4.205 2.61e-05 ***\nDESTIN_BS22539         -5.0100923  0.7266639   -6.895 5.40e-12 ***\nDESTIN_BS23021         -4.0997384  1.0620627   -3.860 0.000113 ***\nDESTIN_BS23069         -1.1808306  0.4405224   -2.681 0.007351 ** \nDESTIN_BS23151         -0.3339496  1.2026136   -0.278 0.781253    \nDESTIN_BS23251         -1.6828707  1.1057571   -1.522 0.128030    \nDESTIN_BS23371          0.9596183  0.3340213    2.873 0.004067 ** \nDESTIN_BS23481         -1.6262189  1.1670062   -1.393 0.163470    \nDESTIN_BS23491          4.3915946  1.5532172    2.827 0.004692 ** \nDESTIN_BS24011         -2.3045544  1.1156663   -2.066 0.038863 *  \nDESTIN_BS24289         -0.7008552  1.2020510   -0.583 0.559860    \nDESTIN_BS24461                 NA         NA       NA       NA    \nDESTIN_BS24509         -1.2446380  1.0801259   -1.152 0.249194    \nDESTIN_BS25109                 NA         NA       NA       NA    \nDESTIN_BS25161          0.1709464  0.8821975    0.194 0.846353    \nDESTIN_BS25191          0.5390712  0.4108268    1.312 0.189466    \nDESTIN_BS25221                 NA         NA       NA       NA    \nDESTIN_BS25429          2.0892098  0.2392445    8.733  &lt; 2e-16 ***\nDESTIN_BS25519         -1.7721554  0.5162071   -3.433 0.000597 ***\nDESTIN_BS26131                 NA         NA       NA       NA    \nDESTIN_BS26241         -4.2045414  0.6250484   -6.727 1.73e-11 ***\nDESTIN_BS26269          4.2753815  0.4208764   10.158  &lt; 2e-16 ***\nDESTIN_BS26289          1.8066392  0.5750218    3.142 0.001679 ** \nDESTIN_BS26311         -5.1898170  0.6249383   -8.305  &lt; 2e-16 ***\nDESTIN_BS26349         -1.8427649  0.2748079   -6.706 2.01e-11 ***\nDESTIN_BS26389          2.6402822  0.3043075    8.676  &lt; 2e-16 ***\nDESTIN_BS26461                 NA         NA       NA       NA    \nDESTIN_BS27109          1.2342598  0.1063362   11.607  &lt; 2e-16 ***\nDESTIN_BS27141         -1.0091164  0.1649757   -6.117 9.55e-10 ***\nDESTIN_BS27209         -1.5824676  0.2492709   -6.348 2.18e-10 ***\nDESTIN_BS27219          1.1169207  0.5048688    2.212 0.026946 *  \nDESTIN_BS27279          0.2367599  0.2439139    0.971 0.331713    \nDESTIN_BS27341          0.3731510  0.0842522    4.429 9.47e-06 ***\nDESTIN_BS27401         -1.7142525  0.4826375   -3.552 0.000383 ***\nDESTIN_BS27421         -0.7334233  0.8314279   -0.882 0.377709    \nDESTIN_BS27431          0.3524185  0.0842828    4.181 2.90e-05 ***\nDESTIN_BS28031         -0.9968384  0.1717997   -5.802 6.54e-09 ***\nDESTIN_BS28059         -0.6542606  0.0886700   -7.379 1.60e-13 ***\nDESTIN_BS28089         -1.3439016  0.1583244   -8.488  &lt; 2e-16 ***\nDESTIN_BS28099          1.3414925  0.0630253   21.285  &lt; 2e-16 ***\nDESTIN_BS28211          1.4226645  0.0425441   33.440  &lt; 2e-16 ***\nDESTIN_BS28251         -2.3059908  0.2177418  -10.590  &lt; 2e-16 ***\nDESTIN_BS28271         -1.2959910  0.1282488  -10.105  &lt; 2e-16 ***\nDESTIN_BS28309         -2.3626070  0.2662875   -8.872  &lt; 2e-16 ***\nDESTIN_BS28361         -0.2871245  0.1674687   -1.714 0.086437 .  \nDESTIN_BS28409          1.3869169  0.0986259   14.062  &lt; 2e-16 ***\nDESTIN_BS28441         -0.6370204  0.2308494   -2.759 0.005790 ** \nDESTIN_BS28481         -1.2495357  0.1472387   -8.486  &lt; 2e-16 ***\nDESTIN_BS28491          0.1303839  0.0628907    2.073 0.038155 *  \nDESTIN_BS28511          1.1396264  0.0507734   22.445  &lt; 2e-16 ***\nDESTIN_BS28531         -0.2834618  0.0703288   -4.031 5.57e-05 ***\nDESTIN_BS28649         -0.2537918  0.0581068   -4.368 1.26e-05 ***\nDESTIN_BS28669         -3.6785466  0.1341340  -27.424  &lt; 2e-16 ***\nDESTIN_BS28689         -0.9665343  0.0996739   -9.697  &lt; 2e-16 ***\nDESTIN_BS28701         -2.7511451  1.0020519   -2.746 0.006042 ** \nDESTIN_BS29019         -0.6702407  1.0267477   -0.653 0.513898    \nDESTIN_BS29031         -0.0903250  0.1284060   -0.703 0.481786    \nDESTIN_BS29059         -3.8353492  1.0034504   -3.822 0.000132 ***\nDESTIN_BS29089          2.7572749  0.3363029    8.199 2.43e-16 ***\nDESTIN_BS29101         -2.2259112  0.4548765   -4.893 9.91e-07 ***\nDESTIN_BS30049         -0.6043420  0.2315819   -2.610 0.009064 ** \nDESTIN_BS30099         -2.6292354  0.4658731   -5.644 1.66e-08 ***\nDESTIN_BS30109         -0.8298276  0.3102461   -2.675 0.007479 ** \nDESTIN_BS30129          0.4544465  0.3065295    1.483 0.138193    \nDESTIN_BS40011          0.0674130  0.0528480    1.276 0.202097    \nDESTIN_BS40021         -0.9725558  0.0774414  -12.559  &lt; 2e-16 ***\nDESTIN_BS40031         -0.0985007  0.0628959   -1.566 0.117328    \nDESTIN_BS40049          0.5620255  0.0580177    9.687  &lt; 2e-16 ***\nDESTIN_BS40069         -0.2337566  0.0813229   -2.874 0.004048 ** \nDESTIN_BS40071         -1.7170627  0.1051357  -16.332  &lt; 2e-16 ***\nDESTIN_BS40089         -1.5433854  0.1330021  -11.604  &lt; 2e-16 ***\nDESTIN_BS40101         -2.7222788  0.0769046  -35.398  &lt; 2e-16 ***\nDESTIN_BS40191         -0.0037461  0.0535399   -0.070 0.944219    \nDESTIN_BS40209         -1.0783843  0.1389336   -7.762 8.37e-15 ***\nDESTIN_BS40221          0.0235649  0.0624859    0.377 0.706081    \nDESTIN_BS40249         -1.5605402  0.1418220  -11.004  &lt; 2e-16 ***\nDESTIN_BS41029         -0.5643399  0.0739670   -7.630 2.35e-14 ***\nDESTIN_BS41041         -0.3309659  0.0622357   -5.318 1.05e-07 ***\nDESTIN_BS41069         -0.3684312  0.0627702   -5.870 4.37e-09 ***\nDESTIN_BS41079         -1.4534706  0.0994462  -14.616  &lt; 2e-16 ***\nDESTIN_BS41119         -1.0689103  0.0903584  -11.830  &lt; 2e-16 ***\nDESTIN_BS41139         -1.6628781  0.2174613   -7.647 2.06e-14 ***\nDESTIN_BS42011         -0.3193186  0.0684262   -4.667 3.06e-06 ***\nDESTIN_BS42019         -0.2345306  0.0602497   -3.893 9.92e-05 ***\nDESTIN_BS42039         -0.2649887  0.0615364   -4.306 1.66e-05 ***\nDESTIN_BS42051          0.0099961  0.0640705    0.156 0.876019    \nDESTIN_BS42099          1.4953293  0.0663114   22.550  &lt; 2e-16 ***\nDESTIN_BS42111         -1.2343089  0.0898127  -13.743  &lt; 2e-16 ***\nDESTIN_BS42131         -1.0657795  0.1994680   -5.343 9.14e-08 ***\nDESTIN_BS42141         -0.7839721  0.0750573  -10.445  &lt; 2e-16 ***\nDESTIN_BS42149         -1.7245356  0.1050647  -16.414  &lt; 2e-16 ***\nDESTIN_BS42161         -0.1882060  0.0602666   -3.123 0.001791 ** \nDESTIN_BS42199         -1.4805318  0.2134113   -6.937 3.99e-12 ***\nDESTIN_BS42229         -0.6110419  0.1048841   -5.826 5.68e-09 ***\nDESTIN_BS43021         -1.3126545  0.0947900  -13.848  &lt; 2e-16 ***\nDESTIN_BS43061         -0.2597308  0.0594009   -4.373 1.23e-05 ***\nDESTIN_BS43111         -2.3628560  0.1621554  -14.572  &lt; 2e-16 ***\nDESTIN_BS43119          0.7418579  0.0658919   11.259  &lt; 2e-16 ***\nDESTIN_BS43131          0.4641860  0.0692033    6.708 1.98e-11 ***\nDESTIN_BS43179         -0.2728488  0.1024101   -2.664 0.007715 ** \nDESTIN_BS43191          0.8953876  0.0555294   16.125  &lt; 2e-16 ***\nDESTIN_BS43219          0.9359458  0.1548258    6.045 1.49e-09 ***\nDESTIN_BS43221          0.2498760  0.0839488    2.977 0.002915 ** \nDESTIN_BS43231         -0.7359940  0.1163324   -6.327 2.51e-10 ***\nDESTIN_BS43239          0.0142801  0.1084929    0.132 0.895283    \nDESTIN_BS43291         -3.7629747  0.3286743  -11.449  &lt; 2e-16 ***\nDESTIN_BS43311         -2.1814830  0.1903829  -11.458  &lt; 2e-16 ***\nDESTIN_BS43321         -0.0238682  0.1503114   -0.159 0.873833    \nDESTIN_BS43339         -0.6891327  0.1425053   -4.836 1.33e-06 ***\nDESTIN_BS43349         -0.2996814  0.0902770   -3.320 0.000902 ***\nDESTIN_BS43351          0.0976588  0.2256951    0.433 0.665231    \nDESTIN_BS43359          0.8349667  0.0961396    8.685  &lt; 2e-16 ***\nDESTIN_BS43511          0.4324175  0.0880261    4.912 9.00e-07 ***\nDESTIN_BS43561         -4.2549806  0.3261054  -13.048  &lt; 2e-16 ***\nDESTIN_BS43571          1.0633953  0.2538086    4.190 2.79e-05 ***\nDESTIN_BS43609         -0.0451456  0.2351921   -0.192 0.847780    \nDESTIN_BS43611         -0.4733702  0.0925986   -5.112 3.19e-07 ***\nDESTIN_BS43629         -1.6749740  0.2406678   -6.960 3.41e-12 ***\nDESTIN_BS43639         -2.3954331  0.5819417   -4.116 3.85e-05 ***\nDESTIN_BS43701         -1.2535062  1.0036406   -1.249 0.211680    \nDESTIN_BS43811         -1.4731896  0.1999612   -7.367 1.74e-13 ***\nDESTIN_BS43821         -2.0354136  0.1674672  -12.154  &lt; 2e-16 ***\nDESTIN_BS43891         -4.4608200  0.5817485   -7.668 1.75e-14 ***\nDESTIN_BS44029          2.0329946  0.0632997   32.117  &lt; 2e-16 ***\nDESTIN_BS44079          1.7337635  0.2388783    7.258 3.93e-13 ***\nDESTIN_BS44111          0.0420374  0.7278683    0.058 0.953944    \nDESTIN_BS44151         -1.1669240  0.1796734   -6.495 8.32e-11 ***\nDESTIN_BS44171         -0.3958830  0.2416705   -1.638 0.101399    \nDESTIN_BS44191         -1.5491033  0.1565870   -9.893  &lt; 2e-16 ***\nDESTIN_BS44229          0.4124543  0.0883833    4.667 3.06e-06 ***\nDESTIN_BS44261          0.2265515  0.0617220    3.671 0.000242 ***\nDESTIN_BS44299         -0.3719421  0.2814773   -1.321 0.186370    \nDESTIN_BS44411         -1.6382776  0.1771265   -9.249  &lt; 2e-16 ***\nDESTIN_BS44519         -0.2216344  0.6677551   -0.332 0.739957    \nDESTIN_BS44549          1.3774115  0.2497207    5.516 3.47e-08 ***\nDESTIN_BS44619         -0.0598747  0.0868406   -0.689 0.490523    \nDESTIN_BS44651          1.0006110  0.1929571    5.186 2.15e-07 ***\nDESTIN_BS44701          1.6319023  0.1601558   10.189  &lt; 2e-16 ***\nDESTIN_BS44801          2.1100929  0.1620012   13.025  &lt; 2e-16 ***\nDESTIN_BS44919         -3.4235084  0.5064597   -6.760 1.38e-11 ***\nDESTIN_BS45071         -1.3448684  0.1857225   -7.241 4.44e-13 ***\nDESTIN_BS45079          1.5579919  0.0724508   21.504  &lt; 2e-16 ***\nDESTIN_BS45099         -1.1878157  0.5842066   -2.033 0.042031 *  \nDESTIN_BS45249          0.5816703  1.0472962    0.555 0.578620    \nDESTIN_BS45279         -2.8714631  1.0519001   -2.730 0.006338 ** \nDESTIN_BS45329          3.5134916  1.0418839    3.372 0.000746 ***\nDESTIN_BS45359         -0.4220536  0.4564433   -0.925 0.355144    \nDESTIN_BS45399         -2.2975434  1.0330094   -2.224 0.026140 *  \nDESTIN_BS45411         -0.5057839  0.4835029   -1.046 0.295523    \nDESTIN_BS45441          0.6282810  1.4281390    0.440 0.659988    \nDESTIN_BS45489         -1.7437233  1.0541514   -1.654 0.098097 .  \nDESTIN_BS46029         -0.6136719  0.4260044   -1.441 0.149718    \nDESTIN_BS46049         -0.0451471  0.7577648   -0.060 0.952491    \nDESTIN_BS46059          0.0316502  0.6383967    0.050 0.960459    \nDESTIN_BS46088         -0.3184142  0.1008921   -3.156 0.001600 ** \nDESTIN_BS46111         -1.0603560  0.1281243   -8.276  &lt; 2e-16 ***\nDESTIN_BS46171         -0.9222757  0.1927145   -4.786 1.70e-06 ***\nDESTIN_BS46179          1.0364940  0.3110638    3.332 0.000862 ***\nDESTIN_BS46199                 NA         NA       NA       NA    \nDESTIN_BS46261         -1.2496803  0.1389318   -8.995  &lt; 2e-16 ***\nDESTIN_BS46279         -0.5318489  0.0983356   -5.409 6.36e-08 ***\nDESTIN_BS46321          2.9868705  0.7823485    3.818 0.000135 ***\nDESTIN_BS46329          0.7370577  0.2741437    2.689 0.007176 ** \nDESTIN_BS46359         -4.6023583  0.4106594  -11.207  &lt; 2e-16 ***\nDESTIN_BS46371          1.3526934  0.2226741    6.075 1.24e-09 ***\nDESTIN_BS46381          0.3349148  0.2296685    1.458 0.144771    \nDESTIN_BS46391         -1.0669621  1.0364444   -1.029 0.303271    \nDESTIN_BS46419         -0.3392259  0.0820982   -4.132 3.60e-05 ***\nDESTIN_BS46449         -0.1469153  0.1588784   -0.925 0.355120    \nDESTIN_BS46469         -0.3259644  0.0831478   -3.920 8.84e-05 ***\nDESTIN_BS46571          1.7498616  0.1379566   12.684  &lt; 2e-16 ***\nDESTIN_BS46719         -1.0483855  0.1313480   -7.982 1.44e-15 ***\nDESTIN_BS46739         -0.4693877  0.0896200   -5.238 1.63e-07 ***\nDESTIN_BS46781         -0.0872469  0.3822402   -0.228 0.819451    \nDESTIN_BS46791          2.1553952  0.1835987   11.740  &lt; 2e-16 ***\nDESTIN_BS46799         -0.0086037  0.2928742   -0.029 0.976564    \nDESTIN_BS46931          0.6266707  1.0224111    0.613 0.539920    \nDESTIN_BS47041          1.0036527  0.1360483    7.377 1.62e-13 ***\nDESTIN_BS47061         -1.9547089  0.2990674   -6.536 6.32e-11 ***\nDESTIN_BS47071         -0.3294551  0.1678508   -1.963 0.049671 *  \nDESTIN_BS47091         -0.8159208  0.2897503   -2.816 0.004863 ** \nDESTIN_BS47529         -1.3257040  0.5951837   -2.227 0.025921 *  \nDESTIN_BS47541         -0.9607230  0.2608024   -3.684 0.000230 ***\nDESTIN_BS47551         -3.8817902  0.4086744   -9.498  &lt; 2e-16 ***\nDESTIN_BS47579          0.9997403  0.1345430    7.431 1.08e-13 ***\nDESTIN_BS47609          0.3018926  0.0744967    4.052 5.07e-05 ***\nDESTIN_BS47629         -1.7321113  0.1313763  -13.184  &lt; 2e-16 ***\nDESTIN_BS47809         -0.7931540  0.1172232   -6.766 1.32e-11 ***\nDESTIN_BS47821         -0.7891434  0.4375162   -1.804 0.071280 .  \nDESTIN_BS48131          0.4102050  0.1838149    2.232 0.025640 *  \nDESTIN_BS48141         -3.1194419  0.4106211   -7.597 3.03e-14 ***\nDESTIN_BS49039         -1.9707713  1.0355502   -1.903 0.057026 .  \nDESTIN_BS49049         -2.6438895  1.0250230   -2.579 0.009899 ** \nDESTIN_BS49051         -0.1603909  1.4281468   -0.112 0.910580    \nDESTIN_BS49069         -1.2264325  0.4118670   -2.978 0.002904 ** \nDESTIN_BS49101         -0.5884937  0.3039776   -1.936 0.052871 .  \nDESTIN_BS49111         -1.5985453  0.5842124   -2.736 0.006215 ** \nDESTIN_BS49131         -1.7284548  0.9614307   -1.798 0.072210 .  \nDESTIN_BS49141                 NA         NA       NA       NA    \nDESTIN_BS49159          0.8467348  0.1989442    4.256 2.08e-05 ***\nDESTIN_BS49171         -2.1401170  0.8022586   -2.668 0.007639 ** \nDESTIN_BS49209          0.6152652  1.1357036    0.542 0.587992    \nDESTIN_BS49249         -1.1621126  0.7006765   -1.659 0.097205 .  \nDESTIN_BS50021          0.6248185  0.0523028   11.946  &lt; 2e-16 ***\nDESTIN_BS50059         -0.3071359  0.0724032   -4.242 2.22e-05 ***\nDESTIN_BS50071         -2.1105384  0.2710339   -7.787 6.86e-15 ***\nDESTIN_BS50079         -1.6715272  0.2827688   -5.911 3.39e-09 ***\nDESTIN_BS50121         -1.3311923  0.1568421   -8.487  &lt; 2e-16 ***\nDESTIN_BS50169         -2.0283464  0.1220683  -16.616  &lt; 2e-16 ***\nDESTIN_BS50211         -0.3503133  0.0702896   -4.984 6.23e-07 ***\nDESTIN_BS50279          1.0193968  0.1053217    9.679  &lt; 2e-16 ***\nDESTIN_BS50321         -0.5703693  0.1410107   -4.045 5.24e-05 ***\nDESTIN_BS50991          0.0174471  0.0510424    0.342 0.732489    \nDESTIN_BS51039         -2.3678413  0.2616375   -9.050  &lt; 2e-16 ***\nDESTIN_BS51119         -2.7331615  0.2613637  -10.457  &lt; 2e-16 ***\nDESTIN_BS52011         -1.8585965  0.2279896   -8.152 3.58e-16 ***\nDESTIN_BS52061         -2.6510803  0.1638889  -16.176  &lt; 2e-16 ***\nDESTIN_BS52071          0.0864275  0.0454811    1.900 0.057394 .  \nDESTIN_BS52089         -0.4309364  0.0588071   -7.328 2.34e-13 ***\nDESTIN_BS52109         -0.6507607  0.0608474  -10.695  &lt; 2e-16 ***\nDESTIN_BS52179         -1.2247756  0.1377884   -8.889  &lt; 2e-16 ***\nDESTIN_BS52199         -3.1412350  0.1919901  -16.361  &lt; 2e-16 ***\nDESTIN_BS52211         -0.9734124  0.1745722   -5.576 2.46e-08 ***\nDESTIN_BS52231         -0.5366691  0.0594589   -9.026  &lt; 2e-16 ***\nDESTIN_BS52299          0.8718016  0.3202577    2.722 0.006485 ** \nDESTIN_BS52301                 NA         NA       NA       NA    \nDESTIN_BS52351         -0.8376809  0.1421662   -5.892 3.81e-09 ***\nDESTIN_BS52401         -2.4692227  0.2391540  -10.325  &lt; 2e-16 ***\nDESTIN_BS52449         -2.0395794  0.1910937  -10.673  &lt; 2e-16 ***\nDESTIN_BS52479         -0.2993316  0.0785113   -3.813 0.000138 ***\nDESTIN_BS52529                 NA         NA       NA       NA    \nDESTIN_BS53009         -0.3291093  0.0444107   -7.411 1.26e-13 ***\nDESTIN_BS53039         -0.5010503  0.0676874   -7.402 1.34e-13 ***\nDESTIN_BS53059          0.8978622  0.0527421   17.024  &lt; 2e-16 ***\nDESTIN_BS53079         -1.4361702  0.1464531   -9.806  &lt; 2e-16 ***\nDESTIN_BS53099         -2.2290550  0.2136257  -10.434  &lt; 2e-16 ***\nDESTIN_BS53111         -2.9079528  0.3361035   -8.652  &lt; 2e-16 ***\nDESTIN_BS53121         -0.4740563  0.0696463   -6.807 9.99e-12 ***\nDESTIN_BS53211         -2.5684447  0.0817670  -31.412  &lt; 2e-16 ***\nDESTIN_BS53281         -0.9996828  0.0615789  -16.234  &lt; 2e-16 ***\nDESTIN_BS53299          0.1599023  0.0644423    2.481 0.013090 *  \nDESTIN_BS53351          1.2520768  0.0639547   19.578  &lt; 2e-16 ***\nDESTIN_BS53359         -2.5577913  0.1967716  -12.999  &lt; 2e-16 ***\nDESTIN_BS53371          2.2751534  0.0475055   47.892  &lt; 2e-16 ***\nDESTIN_BS53379         -1.0531894  0.0726901  -14.489  &lt; 2e-16 ***\nDESTIN_BS53389         -0.8149831  0.0605730  -13.455  &lt; 2e-16 ***\nDESTIN_BS53419         -0.5165059  0.1069495   -4.829 1.37e-06 ***\nDESTIN_BS54011          0.4193072  0.0478490    8.763  &lt; 2e-16 ***\nDESTIN_BS54049         -0.4949329  0.0806910   -6.134 8.59e-10 ***\nDESTIN_BS54051         -1.7472267  0.1155794  -15.117  &lt; 2e-16 ***\nDESTIN_BS54109         -2.0261917  0.0791206  -25.609  &lt; 2e-16 ***\nDESTIN_BS54169         -1.3739281  0.2269009   -6.055 1.40e-09 ***\nDESTIN_BS54189         -0.1686362  0.1238077   -1.362 0.173172    \nDESTIN_BS54229         -0.5929247  0.1175076   -5.046 4.52e-07 ***\nDESTIN_BS54247         -0.7879055  0.0634034  -12.427  &lt; 2e-16 ***\nDESTIN_BS54279         -1.0110456  0.1052267   -9.608  &lt; 2e-16 ***\nDESTIN_BS54281         -0.4110160  0.0768677   -5.347 8.94e-08 ***\nDESTIN_BS54311         -0.1964724  0.0452969   -4.337 1.44e-05 ***\nDESTIN_BS54339         -0.4395933  0.1290618   -3.406 0.000659 ***\nDESTIN_BS54351         -0.6641388  0.1119145   -5.934 2.95e-09 ***\nDESTIN_BS54489         -0.3338825  0.0876879   -3.808 0.000140 ***\nDESTIN_BS54491         -2.7458576  0.2627240  -10.451  &lt; 2e-16 ***\nDESTIN_BS54539         -1.7942620  0.0909838  -19.721  &lt; 2e-16 ***\nDESTIN_BS54589          0.0986667  0.0819560    1.204 0.228628    \nDESTIN_BS54611         -1.0617470  0.1349983   -7.865 3.69e-15 ***\nDESTIN_BS54641         -1.2111953  0.2008379   -6.031 1.63e-09 ***\nDESTIN_BS55021         -0.0479515  0.2299242   -0.209 0.834797    \nDESTIN_BS55049         -2.0477789  0.2225215   -9.203  &lt; 2e-16 ***\nDESTIN_BS55081         -1.7410105  0.1571707  -11.077  &lt; 2e-16 ***\nDESTIN_BS55119         -0.7820035  0.1011170   -7.734 1.05e-14 ***\nDESTIN_BS55171         -1.0270874  0.0945543  -10.862  &lt; 2e-16 ***\nDESTIN_BS55231         -2.3097968  0.5047916   -4.576 4.75e-06 ***\nDESTIN_BS55249         -2.4555705  0.5062487   -4.851 1.23e-06 ***\nDESTIN_BS55259         -2.0189065  0.5817595   -3.470 0.000520 ***\nDESTIN_BS55289         -2.2453309  1.0026487   -2.239 0.025130 *  \nDESTIN_BS56021         -0.0480557  0.0778225   -0.618 0.536902    \nDESTIN_BS56041         -1.6732372  0.1543148  -10.843  &lt; 2e-16 ***\nDESTIN_BS56059          0.7541692  0.0721732   10.449  &lt; 2e-16 ***\nDESTIN_BS56069         -1.1355279  0.1333850   -8.513  &lt; 2e-16 ***\nDESTIN_BS56099          2.7019829  0.0648188   41.685  &lt; 2e-16 ***\nDESTIN_BS56269         -1.8635220  0.2940608   -6.337 2.34e-10 ***\nDESTIN_BS57059         -0.9921560  0.3391182   -2.926 0.003437 ** \nDESTIN_BS57061         -1.3235260  0.1560010   -8.484  &lt; 2e-16 ***\nDESTIN_BS57071         -0.2257315  0.0804587   -2.806 0.005023 ** \nDESTIN_BS57111         -0.5505234  0.0684287   -8.045 8.61e-16 ***\nDESTIN_BS57129          0.5765682  0.0910210    6.334 2.38e-10 ***\nDESTIN_BS57139         -0.2219926  0.2904755   -0.764 0.444725    \nDESTIN_BS57149         -1.4716866  0.5050323   -2.914 0.003568 ** \nDESTIN_BS58031         -1.9307971  0.2589316   -7.457 8.87e-14 ***\nDESTIN_BS58101         -0.2388371  0.0808282   -2.955 0.003128 ** \nDESTIN_BS58121          0.3939092  0.1202898    3.275 0.001058 ** \nDESTIN_BS58201          0.3284366  0.4677836    0.702 0.482609    \nDESTIN_BS58221         -0.3681624  0.0847749   -4.343 1.41e-05 ***\nDESTIN_BS58289         -0.0493370  0.1223206   -0.403 0.686697    \nDESTIN_BS58299         -0.8450394  0.1140833   -7.407 1.29e-13 ***\nDESTIN_BS58351          0.4273648  0.2477186    1.725 0.084491 .  \nDESTIN_BS58369         -1.2126818  0.3004741   -4.036 5.44e-05 ***\nDESTIN_BS58401         -1.1719791  0.1980678   -5.917 3.28e-09 ***\nDESTIN_BS58451         -3.4634955  1.0099902   -3.429 0.000605 ***\nDESTIN_BS58541          5.0133523  0.1434596   34.946  &lt; 2e-16 ***\nDESTIN_BS59039          0.2292265  0.1124073    2.039 0.041425 *  \nDESTIN_BS59079          2.2508569  0.0464571   48.450  &lt; 2e-16 ***\nDESTIN_BS59149          0.0252431  0.0705175    0.358 0.720366    \nDESTIN_BS59189          0.7537675  0.0946909    7.960 1.72e-15 ***\nDESTIN_BS59201         -0.4073485  0.1345258   -3.028 0.002462 ** \nDESTIN_BS59249         -0.9369402  0.1856135   -5.048 4.47e-07 ***\nDESTIN_BS59259          3.1528986  0.0894529   35.246  &lt; 2e-16 ***\nDESTIN_BS59261          0.6542575  0.0627012   10.435  &lt; 2e-16 ***\nDESTIN_BS59291          0.3665540  0.1920754    1.908 0.056341 .  \nDESTIN_BS59311         -3.8790220  0.2699297  -14.370  &lt; 2e-16 ***\nDESTIN_BS59329          0.1907153  0.1994040    0.956 0.338857    \nDESTIN_BS59401         -1.9233074  0.2410381   -7.979 1.47e-15 ***\nDESTIN_BS59471          0.5712349  0.1078560    5.296 1.18e-07 ***\nDESTIN_BS59509         -2.2654474  0.3818316   -5.933 2.97e-09 ***\nDESTIN_BS59511         -0.3579922  0.1363275   -2.626 0.008640 ** \nDESTIN_BS59521          0.6475265  0.0619014   10.461  &lt; 2e-16 ***\nDESTIN_BS59579          1.5526751  0.1193731   13.007  &lt; 2e-16 ***\nDESTIN_BS59601          1.6565446  0.1030497   16.075  &lt; 2e-16 ***\nDESTIN_BS59619          0.5629324  0.0981437    5.736 9.71e-09 ***\nDESTIN_BS59649         -1.2071757  0.3136694   -3.849 0.000119 ***\nDESTIN_BS59711         -0.5550218  0.1810097   -3.066 0.002168 ** \nDESTIN_BS59721         -0.9187986  0.2006797   -4.578 4.68e-06 ***\nDESTIN_BS59739         -1.4133243  0.2482012   -5.694 1.24e-08 ***\nDESTIN_BS59749         -1.1356563  0.2196193   -5.171 2.33e-07 ***\nDESTIN_BS60029         -1.6630894  0.1330801  -12.497  &lt; 2e-16 ***\nDESTIN_BS60051         -2.3728793  0.2614654   -9.075  &lt; 2e-16 ***\nDESTIN_BS60059         -1.9089949  0.1221542  -15.628  &lt; 2e-16 ***\nDESTIN_BS60061         -1.2038861  0.1612042   -7.468 8.14e-14 ***\nDESTIN_BS60089         -1.0316025  0.0590180  -17.479  &lt; 2e-16 ***\nDESTIN_BS60159         -1.0658588  0.0660699  -16.132  &lt; 2e-16 ***\nDESTIN_BS60199          1.0321422  0.0550867   18.737  &lt; 2e-16 ***\nDESTIN_BS60221         -1.0362889  0.0949315  -10.916  &lt; 2e-16 ***\nDESTIN_BS60261          0.4193690  0.0535909    7.825 5.06e-15 ***\nDESTIN_BS61011         -1.4275637  0.0852633  -16.743  &lt; 2e-16 ***\nDESTIN_BS61079          1.6056362  0.0797732   20.128  &lt; 2e-16 ***\nDESTIN_BS62011         -1.6919049  0.1156065  -14.635  &lt; 2e-16 ***\nDESTIN_BS62039         -1.5169638  0.1069575  -14.183  &lt; 2e-16 ***\nDESTIN_BS62099         -1.7088358  0.2549560   -6.702 2.05e-11 ***\nDESTIN_BS62111         -1.3151297  0.0829196  -15.860  &lt; 2e-16 ***\nDESTIN_BS63021         -1.3410691  0.0712008  -18.835  &lt; 2e-16 ***\nDESTIN_BS63049         -0.4202924  0.0682211   -6.161 7.24e-10 ***\nDESTIN_BS63139         -0.5966132  0.1057910   -5.640 1.71e-08 ***\nDESTIN_BS63149         -0.9986812  0.0576275  -17.330  &lt; 2e-16 ***\nDESTIN_BS63161         -1.1451198  0.2202228   -5.200 1.99e-07 ***\nDESTIN_BS63209         -2.3814255  0.1358903  -17.525  &lt; 2e-16 ***\nDESTIN_BS63229         -0.8067304  0.0987031   -8.173 3.00e-16 ***\nDESTIN_BS63281         -0.3146985  0.0820552   -3.835 0.000125 ***\nDESTIN_BS63289         -0.2493465  0.0880050   -2.833 0.004607 ** \nDESTIN_BS63309         -0.4527345  0.0768096   -5.894 3.76e-09 ***\nDESTIN_BS63321         -1.2646930  0.1113810  -11.355  &lt; 2e-16 ***\nDESTIN_BS63329          0.3531455  0.0852489    4.143 3.44e-05 ***\nDESTIN_BS63331         -1.8572105  0.1112379  -16.696  &lt; 2e-16 ***\nDESTIN_BS63369         -0.6902414  0.0897774   -7.688 1.49e-14 ***\nDESTIN_BS64011         -1.4585677  0.0978914  -14.900  &lt; 2e-16 ***\nDESTIN_BS64019         -0.6525525  0.0883380   -7.387 1.50e-13 ***\nDESTIN_BS64029         -0.9346028  0.1134672   -8.237  &lt; 2e-16 ***\nDESTIN_BS64119         -0.0412884  0.0715680   -0.577 0.563999    \nDESTIN_BS64121         -0.7972329  0.0713144  -11.179  &lt; 2e-16 ***\nDESTIN_BS64131         -4.5898764  0.5798311   -7.916 2.46e-15 ***\nDESTIN_BS64201         -0.7755641  0.0609020  -12.735  &lt; 2e-16 ***\nDESTIN_BS64229         -2.8456461  0.2917555   -9.754  &lt; 2e-16 ***\nDESTIN_BS64311         -0.3854722  0.1070956   -3.599 0.000319 ***\nDESTIN_BS64371         -1.6241795  0.1938461   -8.379  &lt; 2e-16 ***\nDESTIN_BS64411          0.4794179  0.0723070    6.630 3.35e-11 ***\nDESTIN_BS64491         -0.1117454  0.0623365   -1.793 0.073034 .  \nDESTIN_BS64541          0.5293351  0.0651545    8.124 4.50e-16 ***\nDESTIN_BS64629         -1.6761964  0.1109533  -15.107  &lt; 2e-16 ***\nDESTIN_BS65061         -0.2951062  0.0679802   -4.341 1.42e-05 ***\nDESTIN_BS65079         -0.3152869  0.2195153   -1.436 0.150921    \nDESTIN_BS65181         -0.5434179  0.1261632   -4.307 1.65e-05 ***\nDESTIN_BS65209         -2.0385924  0.1463537  -13.929  &lt; 2e-16 ***\nDESTIN_BS65221         -0.7225081  0.1763103   -4.098 4.17e-05 ***\nDESTIN_BS65231         -0.2408740  0.0696167   -3.460 0.000540 ***\nDESTIN_BS65381         -1.3369382  0.3453956   -3.871 0.000109 ***\nDESTIN_BS65461         -2.7119175  0.2548030  -10.643  &lt; 2e-16 ***\nDESTIN_BS65481                 NA         NA       NA       NA    \nDESTIN_BS66019         -2.3865020  0.3156287   -7.561 4.00e-14 ***\nDESTIN_BS66039         -0.7650660  0.0494624  -15.468  &lt; 2e-16 ***\nDESTIN_BS66081         -1.9839506  0.2066939   -9.598  &lt; 2e-16 ***\nDESTIN_BS66099         -1.1806153  0.0534261  -22.098  &lt; 2e-16 ***\nDESTIN_BS66139         -2.9090827  0.1998694  -14.555  &lt; 2e-16 ***\nDESTIN_BS66149         -1.9713839  0.1825763  -10.798  &lt; 2e-16 ***\nDESTIN_BS66181         -1.8900961  0.4711455   -4.012 6.03e-05 ***\nDESTIN_BS66241         -1.8307331  0.7422180   -2.467 0.013641 *  \nDESTIN_BS66301         -1.8754212  0.1439245  -13.031  &lt; 2e-16 ***\nDESTIN_BS66311         -3.0312977  0.2194165  -13.815  &lt; 2e-16 ***\nDESTIN_BS66321         -4.6443947  0.2348659  -19.775  &lt; 2e-16 ***\nDESTIN_BS66351          1.4778748  0.0426395   34.660  &lt; 2e-16 ***\nDESTIN_BS66371         -0.1093891  0.0462442   -2.365 0.018007 *  \nDESTIN_BS66381          0.3118984  0.0573343    5.440 5.33e-08 ***\nDESTIN_BS66399         -1.8771682  0.1078122  -17.411  &lt; 2e-16 ***\nDESTIN_BS66409         -2.9789259  0.1249682  -23.837  &lt; 2e-16 ***\nDESTIN_BS66419         -3.4765636  0.1914919  -18.155  &lt; 2e-16 ***\nDESTIN_BS66421         -0.7481872  0.0788180   -9.493  &lt; 2e-16 ***\nDESTIN_BS66451         -2.2735258  0.2477101   -9.178  &lt; 2e-16 ***\nDESTIN_BS66499         -1.0247515  0.0964400  -10.626  &lt; 2e-16 ***\nDESTIN_BS66581         -2.3556547  0.1796118  -13.115  &lt; 2e-16 ***\nDESTIN_BS67021         -1.3703628  0.1382813   -9.910  &lt; 2e-16 ***\nDESTIN_BS67059          0.4817526  0.0500353    9.628  &lt; 2e-16 ***\nDESTIN_BS67079         -0.4700838  0.0632515   -7.432 1.07e-13 ***\nDESTIN_BS67101         -1.2238195  0.1617411   -7.567 3.83e-14 ***\nDESTIN_BS67121         -0.7950270  0.1141593   -6.964 3.30e-12 ***\nDESTIN_BS67171         -0.1103188  0.1374687   -0.803 0.422263    \nDESTIN_BS67229         -0.2323448  0.1790407   -1.298 0.194383    \nDESTIN_BS67321         -0.9695531  0.1064318   -9.110  &lt; 2e-16 ***\nDESTIN_BS67371          1.5552998  0.0603827   25.757  &lt; 2e-16 ***\nDESTIN_BS67389         -0.8041413  0.2738260   -2.937 0.003317 ** \nDESTIN_BS67499         -0.0124221  0.1347980   -0.092 0.926576    \nDESTIN_BS67599         -0.9364096  0.0949648   -9.861  &lt; 2e-16 ***\nDESTIN_BS67619         -1.1654631  0.0942490  -12.366  &lt; 2e-16 ***\nDESTIN_BS67659         -0.8434748  0.1402636   -6.013 1.82e-09 ***\nDESTIN_BS68029          0.3117095  0.0866312    3.598 0.000321 ***\nDESTIN_BS68039         -0.5233121  0.1213531   -4.312 1.62e-05 ***\nDESTIN_BS68101         -3.0123489  0.2932069  -10.274  &lt; 2e-16 ***\nDESTIN_BS68111         -0.0522629  0.0779101   -0.671 0.502341    \nDESTIN_BS68151         -2.0275225  0.2722535   -7.447 9.54e-14 ***\nDESTIN_BS70019         -0.5556846  0.0697095   -7.971 1.57e-15 ***\nDESTIN_BS70021         -1.8152681  0.1543070  -11.764  &lt; 2e-16 ***\nDESTIN_BS70041          0.6097327  0.0625499    9.748  &lt; 2e-16 ***\nDESTIN_BS70051         -0.4991761  0.0935811   -5.334 9.60e-08 ***\nDESTIN_BS70079         -2.4700440  0.1940653  -12.728  &lt; 2e-16 ***\nDESTIN_BS70101         -0.8732802  0.0796592  -10.963  &lt; 2e-16 ***\nDESTIN_BS70109         -1.1010047  0.0878042  -12.539  &lt; 2e-16 ***\nDESTIN_BS70119         -0.2127606  0.0730875   -2.911 0.003602 ** \nDESTIN_BS70121         -0.2864449  0.0925095   -3.096 0.001959 ** \nDESTIN_BS70231         -1.9223749  0.2087521   -9.209  &lt; 2e-16 ***\nDESTIN_BS70279         -0.4614358  0.0842310   -5.478 4.30e-08 ***\nDESTIN_BS70291         -0.9379115  0.0787265  -11.914  &lt; 2e-16 ***\nDESTIN_BS70401         -5.0172700  0.7110196   -7.056 1.71e-12 ***\nDESTIN_BS71011         -1.0044251  0.1509731   -6.653 2.87e-11 ***\nDESTIN_BS71051         -2.0880016  0.2621271   -7.966 1.64e-15 ***\nDESTIN_BS71071         -1.4591875  0.1076935  -13.549  &lt; 2e-16 ***\nDESTIN_BS71091          0.1466912  0.0495894    2.958 0.003095 ** \nDESTIN_BS71119         -0.0475657  0.1038697   -0.458 0.646999    \nDESTIN_BS71121         -1.3694399  0.0920415  -14.879  &lt; 2e-16 ***\nDESTIN_BS71129         -0.2960166  0.0746716   -3.964 7.36e-05 ***\nDESTIN_BS71169         -1.5249864  0.0975071  -15.640  &lt; 2e-16 ***\nDESTIN_BS71171         -2.1861275  0.3053708   -7.159 8.13e-13 ***\nDESTIN_BS72041          0.2513241  0.0712440    3.528 0.000419 ***\nDESTIN_BS72061          1.1204421  0.0474189   23.629  &lt; 2e-16 ***\nDESTIN_BS73019         -1.6526736  0.2344589   -7.049 1.80e-12 ***\nDESTIN_BS74031         -1.3783513  0.2256233   -6.109 1.00e-09 ***\nDESTIN_BS74041         -1.7788734  0.4253064   -4.183 2.88e-05 ***\nDESTIN_BS75031          0.3526777  0.1101250    3.203 0.001362 ** \nDESTIN_BS75131         -0.3703126  0.0828552   -4.469 7.84e-06 ***\nDESTIN_BS75141          0.5232559  0.0730937    7.159 8.14e-13 ***\nDESTIN_BS75151          1.2228111  0.0820094   14.911  &lt; 2e-16 ***\nDESTIN_BS75201          0.3300178  0.1746476    1.890 0.058809 .  \nDESTIN_BS75209         -0.3762977  0.1377900   -2.731 0.006315 ** \nDESTIN_BS75221         -0.2967552  0.0744408   -3.986 6.71e-05 ***\nDESTIN_BS75269         -0.3717492  0.1103868   -3.368 0.000758 ***\nDESTIN_BS75271          1.0265969  0.0572781   17.923  &lt; 2e-16 ***\nDESTIN_BS75299         -1.0599710  0.0978751  -10.830  &lt; 2e-16 ***\nDESTIN_BS75359          1.8074057  0.0541292   33.391  &lt; 2e-16 ***\nDESTIN_BS75381         -2.8931236  0.5896448   -4.907 9.27e-07 ***\nDESTIN_BS75419         -0.6478904  0.1154411   -5.612 2.00e-08 ***\nDESTIN_BS76079         -0.0153380  0.0583340   -0.263 0.792602    \nDESTIN_BS76109          0.9410556  0.0478890   19.651  &lt; 2e-16 ***\nDESTIN_BS76131          1.4470236  0.0463333   31.231  &lt; 2e-16 ***\nDESTIN_BS76159         -0.7766007  0.2495175   -3.112 0.001856 ** \nDESTIN_BS76161         -1.1227317  0.2005478   -5.598 2.16e-08 ***\nDESTIN_BS76181         -0.1321027  0.1663465   -0.794 0.427113    \nDESTIN_BS76201         -1.1992524  0.1695978   -7.071 1.54e-12 ***\nDESTIN_BS76209         -1.1593313  0.0779846  -14.866  &lt; 2e-16 ***\nDESTIN_BS76241         -0.4856245  0.0650201   -7.469 8.09e-14 ***\nDESTIN_BS76249         -0.1109590  0.0491955   -2.255 0.024104 *  \nDESTIN_BS76339                 NA         NA       NA       NA    \nDESTIN_BS76391         -1.7000715  0.1638372  -10.377  &lt; 2e-16 ***\nDESTIN_BS76441         -1.1070251  0.2709390   -4.086 4.39e-05 ***\nDESTIN_BS76459         -2.1773368  0.5071108   -4.294 1.76e-05 ***\nDESTIN_BS77011          0.2870946  0.0572187    5.017 5.23e-07 ***\nDESTIN_BS77049         -1.5139981  0.1159831  -13.054  &lt; 2e-16 ***\nDESTIN_BS77091         -3.0896248  0.5061673   -6.104 1.03e-09 ***\nDESTIN_BS77111         -0.8728753  0.2220199   -3.932 8.44e-05 ***\nDESTIN_BS77129          0.3009995  0.1378046    2.184 0.028944 *  \nDESTIN_BS77211         -3.4641676  1.0041873   -3.450 0.000561 ***\nDESTIN_BS77269         -1.5252175  0.2238373   -6.814 9.49e-12 ***\nDESTIN_BS77279         -1.1006547  0.1170319   -9.405  &lt; 2e-16 ***\nDESTIN_BS77331          0.1365300  0.0645883    2.114 0.034528 *  \nDESTIN_BS77379         -1.8437863  0.2970276   -6.207 5.38e-10 ***\nDESTIN_BS78061          0.4478694  0.0500237    8.953  &lt; 2e-16 ***\nDESTIN_BS78081         -1.6420273  0.5842103   -2.811 0.004944 ** \nDESTIN_BS78129         -1.3044589  0.3372952   -3.867 0.000110 ***\nDESTIN_BS78131         -2.1559171  0.2935039   -7.345 2.05e-13 ***\nDESTIN_BS78139         -2.7662966  0.4336007   -6.380 1.77e-10 ***\nDESTIN_BS78191         -1.3478737  0.1046338  -12.882  &lt; 2e-16 ***\nDESTIN_BS78271                 NA         NA       NA       NA    \nDESTIN_BS80029         -1.0130708  0.0775677  -13.060  &lt; 2e-16 ***\nDESTIN_BS80049         -0.1238524  0.0537575   -2.304 0.021228 *  \nDESTIN_BS80111         -1.1979716  0.0987941  -12.126  &lt; 2e-16 ***\nDESTIN_BS80151          0.0395131  0.0620870    0.636 0.524506    \nDESTIN_BS80159          0.5547751  0.0691753    8.020 1.06e-15 ***\nDESTIN_BS80191         -2.8757968  0.7294887   -3.942 8.07e-05 ***\nDESTIN_BS80229         -1.0478169  0.0798289  -13.126  &lt; 2e-16 ***\nDESTIN_BS80239         -1.1462177  0.1030392  -11.124  &lt; 2e-16 ***\nDESTIN_BS80251          0.5377301  0.0562914    9.553  &lt; 2e-16 ***\nDESTIN_BS80271         -0.1665482  0.0782043   -2.130 0.033200 *  \nDESTIN_BS80289         -1.9502278  0.1684144  -11.580  &lt; 2e-16 ***\nDESTIN_BS81031         -0.1113514  0.0554579   -2.008 0.044659 *  \nDESTIN_BS81099         -0.4352254  0.0734428   -5.926 3.10e-09 ***\nDESTIN_BS81101         -1.4603906  0.1009025  -14.473  &lt; 2e-16 ***\nDESTIN_BS81109         -2.2333967  0.1305201  -17.112  &lt; 2e-16 ***\nDESTIN_BS81209         -0.6481378  0.1138258   -5.694 1.24e-08 ***\nDESTIN_BS81231         -0.5659558  0.0926974   -6.105 1.03e-09 ***\nDESTIN_BS82029          0.4945983  0.0505361    9.787  &lt; 2e-16 ***\nDESTIN_BS82033         -0.4120786  0.0923841   -4.460 8.18e-06 ***\nDESTIN_BS82051          1.1966209  0.0527536   22.683  &lt; 2e-16 ***\nDESTIN_BS82131          0.2755627  0.0796958    3.458 0.000545 ***\nDESTIN_BS82181         -0.9953515  0.1758229   -5.661 1.50e-08 ***\nDESTIN_BS82221         -0.8194191  0.0822119   -9.967  &lt; 2e-16 ***\nDESTIN_BS83031         -1.1664307  0.0869200  -13.420  &lt; 2e-16 ***\nDESTIN_BS83099          0.4229125  0.0571678    7.398 1.39e-13 ***\nDESTIN_BS83101          0.7509692  0.0535172   14.032  &lt; 2e-16 ***\nDESTIN_BS83109          0.6045888  0.0476446   12.690  &lt; 2e-16 ***\nDESTIN_BS83111         -0.4379510  0.0712328   -6.148 7.84e-10 ***\nDESTIN_BS83129         -1.2780460  0.1462799   -8.737  &lt; 2e-16 ***\nDESTIN_BS83169         -2.2838114  0.2919682   -7.822 5.19e-15 ***\nDESTIN_BS83181         -2.3541790  0.5837340   -4.033 5.51e-05 ***\nDESTIN_BS83329                 NA         NA       NA       NA    \nDESTIN_BS84019         -1.6785903  0.0840512  -19.971  &lt; 2e-16 ***\nDESTIN_BS84029          0.7362845  0.0551795   13.343  &lt; 2e-16 ***\nDESTIN_BS84031          1.5327701  0.0442896   34.608  &lt; 2e-16 ***\nDESTIN_BS84079         -0.1227452  0.1141783   -1.075 0.282361    \nDESTIN_BS84081         -0.4380301  0.1495353   -2.929 0.003398 ** \nDESTIN_BS84141         -2.2060010  0.1784191  -12.364  &lt; 2e-16 ***\nDESTIN_BS84169         -0.9603731  0.2185794   -4.394 1.11e-05 ***\nDESTIN_BS84191         -0.5759206  0.0644369   -8.938  &lt; 2e-16 ***\nDESTIN_BS84219         -0.3259510  0.0542832   -6.005 1.92e-09 ***\nDESTIN_BS84221         -0.2999557  0.1442875   -2.079 0.037629 *  \nDESTIN_BS84231          1.8347944  0.0801272   22.899  &lt; 2e-16 ***\nDESTIN_BS84239          1.0737602  0.0484281   22.172  &lt; 2e-16 ***\nDESTIN_BS84261          0.6196725  0.1037246    5.974 2.31e-09 ***\nDESTIN_BS84271          0.8639013  0.1902800    4.540 5.62e-06 ***\nDESTIN_BS84279         -1.6312332  0.2476270   -6.587 4.47e-11 ***\nDESTIN_BS84289          0.6415916  0.0561592   11.425  &lt; 2e-16 ***\nDESTIN_BS84309         -1.1223195  0.0851533  -13.180  &lt; 2e-16 ***\nDESTIN_BS84329         -0.0950303  0.1098338   -0.865 0.386918    \nDESTIN_BS84371         -1.5644556  0.2547579   -6.141 8.20e-10 ***\nDESTIN_BS84379         -2.3380979  0.1371889  -17.043  &lt; 2e-16 ***\nDESTIN_BS84401         -0.9088256  0.1922952   -4.726 2.29e-06 ***\nDESTIN_BS84451         -0.1790574  0.0596480   -3.002 0.002683 ** \nDESTIN_BS84491          0.4839557  0.0853070    5.673 1.40e-08 ***\nDESTIN_BS84501          0.5349208  0.0622534    8.593  &lt; 2e-16 ***\nDESTIN_BS84521         -0.4376916  0.0607955   -7.199 6.05e-13 ***\nDESTIN_BS84561         -0.9748114  0.2050056   -4.755 1.98e-06 ***\nDESTIN_BS84591         -0.4746843  0.1456610   -3.259 0.001119 ** \nDESTIN_BS84601         -2.0304543  0.2006841  -10.118  &lt; 2e-16 ***\nDESTIN_BS84629         -0.5202170  0.0906139   -5.741 9.41e-09 ***\nDESTIN_BS84671          0.4009180  0.0624424    6.421 1.36e-10 ***\nDESTIN_BS85021         -0.0806214  0.1088050   -0.741 0.458711    \nDESTIN_BS85029         -1.5979062  0.2627545   -6.081 1.19e-09 ***\nDESTIN_BS90029          0.2550807  0.0860890    2.963 0.003047 ** \nDESTIN_BS90069         -0.6498845  0.1291813   -5.031 4.88e-07 ***\nDESTIN_BS91069         -1.6884537  0.1449812  -11.646  &lt; 2e-16 ***\nDESTIN_BS91071         -0.5982258  0.0951525   -6.287 3.24e-10 ***\nDESTIN_BS91099          0.1773048  0.0566344    3.131 0.001744 ** \nDESTIN_BS92099         -0.8504990  0.0824480  -10.316  &lt; 2e-16 ***\nDESTIN_BS92129          1.1083095  0.0533159   20.788  &lt; 2e-16 ***\nDESTIN_BS92141         -1.1226360  0.1204718   -9.319  &lt; 2e-16 ***\nDESTIN_BS92159         -0.8877494  0.0916418   -9.687  &lt; 2e-16 ***\nDESTIN_BS92189          0.5278426  0.0987654    5.344 9.07e-08 ***\nDESTIN_BS92191          0.7259560  0.1731357    4.193 2.75e-05 ***\nDESTIN_BS93049         -0.3160009  0.0797821   -3.961 7.47e-05 ***\nDESTIN_BS93061          0.1410715  0.0689406    2.046 0.040729 *  \nDESTIN_BS93069         -0.7599337  0.0904461   -8.402  &lt; 2e-16 ***\nDESTIN_BS93081         -0.5799387  0.0960048   -6.041 1.53e-09 ***\nDESTIN_BS93171          0.3008718  0.2319323    1.297 0.194549    \nDESTIN_BS93189         -1.3483525  0.2281588   -5.910 3.43e-09 ***\nDESTIN_BS94021         -0.6112952  0.0971125   -6.295 3.08e-10 ***\nDESTIN_BS94029         -0.8014986  0.3670182   -2.184 0.028976 *  \nDESTIN_BS94061         -0.1602414  0.0679465   -2.358 0.018356 *  \nDESTIN_BS95029          1.2326772  0.0435486   28.306  &lt; 2e-16 ***\nDESTIN_BS95109          1.0492618  0.0460132   22.803  &lt; 2e-16 ***\nDESTIN_BS95129         -0.5294131  0.0534312   -9.908  &lt; 2e-16 ***\nDESTIN_BS95909         -1.8457281  0.1349907  -13.673  &lt; 2e-16 ***\nDESTIN_BS96011         -2.3460006  0.2174954  -10.786  &lt; 2e-16 ***\nDESTIN_BS96069          0.2175997  0.0574567    3.787 0.000152 ***\nDESTIN_BS96131          0.2885494  0.1154787    2.499 0.012464 *  \nDESTIN_BS96161          1.9615733  0.0483233   40.593  &lt; 2e-16 ***\nDESTIN_BS96179          0.0457781  0.3360695    0.136 0.891650    \nDESTIN_BS96219          3.2927529  0.0485504   67.821  &lt; 2e-16 ***\nDESTIN_BS96239         -2.0592309  0.2397933   -8.588  &lt; 2e-16 ***\nDESTIN_BS96249         -0.2446069  0.1075310   -2.275 0.022921 *  \nDESTIN_BS96281         -0.6336940  0.0734412   -8.629  &lt; 2e-16 ***\nDESTIN_BS96291         -1.2647513  0.2021160   -6.258 3.91e-10 ***\nDESTIN_BS96311         -1.8545973  0.3373817   -5.497 3.86e-08 ***\nDESTIN_BS96351         -1.1008655  0.6001097   -1.834 0.066589 .  \nDESTIN_BS96361          0.5464018  0.2792030    1.957 0.050347 .  \nDESTIN_BS96401         -2.0107118  0.4117509   -4.883 1.04e-06 ***\nDESTIN_BS97019         -2.2669283  0.0849020  -26.701  &lt; 2e-16 ***\nDESTIN_BS97041         -0.5320971  0.1160782   -4.584 4.56e-06 ***\nDESTIN_BS97099         -3.3542967  1.0040048   -3.341 0.000835 ***\nDESTIN_BS97109         -1.4225529  0.4549887   -3.127 0.001769 ** \nDESTIN_BS97159         -5.6323050  0.5811807   -9.691  &lt; 2e-16 ***\nDESTIN_BS97179         -0.5516803  0.5079526   -1.086 0.277441    \nDESTIN_BS97181         -0.3586077  0.2109981   -1.700 0.089210 .  \nDESTIN_BS97209         -1.9280741  0.4161804   -4.633 3.61e-06 ***\nDESTIN_BS98079         -1.0427118  0.1855672   -5.619 1.92e-08 ***\nDESTIN_BS98129         -1.1713139  0.1628092   -7.194 6.27e-13 ***\nDESTIN_BS98139         -1.1131350  0.1798801   -6.188 6.09e-10 ***\nDESTIN_BS98291          1.2486340  0.3178765    3.928 8.56e-05 ***\nDESTIN_BS98301          1.3674064  0.0844460   16.193  &lt; 2e-16 ***\nDESTIN_BS99049         -0.1238213  0.1548001   -0.800 0.423781    \nDESTIN_BS99101          0.2435929  0.2247775    1.084 0.278495    \nDESTIN_BS99189          0.6880931  0.1282943    5.363 8.17e-08 ***\nlog(retail_poi_orig)           NA         NA       NA       NA    \nlog(retail_poi_dest)           NA         NA       NA       NA    \nlog(finance_poi_orig)          NA         NA       NA       NA    \nlog(finance_poi_dest)          NA         NA       NA       NA    \nlog(business_poi_orig)         NA         NA       NA       NA    \nlog(business_poi_dest)         NA         NA       NA       NA    \nlog(food_poi_orig)             NA         NA       NA       NA    \nlog(food_poi_dest)             NA         NA       NA       NA    \nlog(leisure_poi_orig)          NA         NA       NA       NA    \nlog(leisure_poi_dest)          NA         NA       NA       NA    \nlog(entertn_poi_orig)          NA         NA       NA       NA    \nlog(entertn_poi_dest)          NA         NA       NA       NA    \nlog(dist)              -0.8105944  0.0034028 -238.211  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 645333  on 7625  degrees of freedom\nResidual deviance: 123195  on 6075  degrees of freedom\n  (210861 observations deleted due to missingness)\nAIC: 155618\n\nNumber of Fisher Scoring iterations: 8\n\n\n\n\n\nPresent the modelling results by using appropriate geovisualization and graphical visualization methods.\n\n\n\n\n\n\nNote\n\n\n\nObservations:\n\nWith reference to the Spatial Interaction Model output tables, maps and data visualization prepared, describe the modelling results"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex01/data/geospatial/hexagon/hexagon.html",
    "href": "Takehome_Ex/Takehome_Ex01/data/geospatial/hexagon/hexagon.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n                 +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs 0 0     false"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#exploratory-data-analysis-eda",
    "href": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#exploratory-data-analysis-eda",
    "title": "Hands on Excercise 4",
    "section": "3 Exploratory Data Analysis (EDA)",
    "text": "3 Exploratory Data Analysis (EDA)\n\n3.1 EDA using statistical graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\n\nCode\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n  theme_light()\n\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\n\nCode\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\nNow, you can plot the LOG_SELLING_PRICE using the code chunk below.\n\n\nCode\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n  theme_light()\n\n\n\n\n\n\n\n3.2 Multiple Histogram Plots distribution of variables\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\n\nCode\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n\n3.3 Drawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\n\nCode\n#tmap_mode(\"view\")\n\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\n\nCode\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\n\nCode\n#tmap_mode(\"plot\")"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#hedonic-pricing-modelling-in-r",
    "href": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#hedonic-pricing-modelling-in-r",
    "title": "Hands on Excercise 4",
    "section": "4 Hedonic Pricing Modelling in R",
    "text": "4 Hedonic Pricing Modelling in R\nIn this section, you will learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\n4.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\n\nCode\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\n\nlm() returns an object of class \"lm\" or for multiple responses of class c(\"mlm\", \"lm\").\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\n\nCode\nsummary(condo.slr)\n\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot's geometry as shown in the code chunk below.\n\n\nCode\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  theme_light()\n\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices.\n\n\n4.2 Multiple Linear Regression Method\n\n4.2.1 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. In this section, the corrplot package will be used.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\n\n\nCode\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 1, number.cex = 1, method = \"number\", type = \"upper\")\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named \"AOE\", \"FPC\", \"hclust\", \"alphabet\". In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\n4.3 Building a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\n\nCode\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n4.4 Preparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\n\nCode\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.592 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.592                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n4.5 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\n\nCode\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\n\nCode\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nFor more customisation options, refer to Tutorial: tbl_regression\n\n4.5.1 Checking for multicolinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\n\nCode\nols_vif_tol(condo.mlr1)\n\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n4.5.2 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\n\nCode\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n4.5.3 Test for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\n\nCode\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\n\nCode\nols_test_normality(condo.mlr1)\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\n4.5.4 Testing for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\n\nCode\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\n\nCode\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\n\nCode\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code chunks below is used to create an interactive point symbol map.\n\n\nCode\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran's I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\n\nCode\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\n\nCode\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran's I test for residual spatial autocorrelation\n\n\nCode\nlm.morantest(condo.mlr1, nb_lw)\n\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran's I test for residual spatial autocorrelation shows that it's p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Hands on Excercise 4",
    "section": "5 Building Hedonic Pricing Models using GWmodel",
    "text": "5 Building Hedonic Pricing Models using GWmodel\nIn this section, you are going to learn how to modelling hedonic pricing using both the fixed and adaptive bandwidth schemes\n\n5.1 Building Fixed Bandwidth GWR Model\n\n5.1.1 Computing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\n\nCode\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.379526e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3396 CV score: 4.721292e+14 \nFixed bandwidth: 971.3402 CV score: 4.721292e+14 \nFixed bandwidth: 971.3398 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3399 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres.\n\n\n\n\n\n\nTip\n\n\n\n(Quiz: Do you know why it is in metre?)\nCause we used “st_transform(crs = 3414)” from the begining to change the coordinate from decimal degree to meters.\n\n\n\n\n5.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\n\nCode\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\n\nThe output is saved in a list of class \"gwrm\". The code below can be used to display the model output.\n\n\nCode\ngwr.fixed\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-05 21:54:55.608436 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.34 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3599e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7426e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5001e+06 -1.5970e+05  3.1970e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8074e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112794435\n   AREA_SQM                 21575\n   AGE                     434203\n   PROX_CBD               2704604\n   PROX_CHILDCARE         1654086\n   PROX_ELDERLYCARE      38867861\n   PROX_URA_GROWTH_AREA  78515805\n   PROX_MRT               3124325\n   PROX_PARK             18122439\n   PROX_PRIMARY_SCH       4637517\n   PROX_SHOPPING_MALL     1529953\n   PROX_BUS_STOP         11342209\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720745\n   FREEHOLD               6073642\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3807 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6193 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.534069e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430418 \n\n   ***********************************************************************\n   Program stops at: 2023-12-05 21:54:56.785658 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1.\n\n\n\n5.2 Building Adaptive Bandwidth GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\n5.2.1 Computing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\n\nCode\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n5.2.2 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\n\nCode\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\n\n\nCode\ngwr.adaptive\n\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-05 21:55:05.866257 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2023-12-05 21:55:07.386846 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n\n5.3 Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its \"data\" slot in an object called SDF of the output list.\n\n\n5.4 Converting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\n\nCode\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\n\n\nCode\ncondo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nglimpse(condo_resale.sf.adaptive)\n\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\nSummary of yhat of SDF.\n\n\nCode\nsummary(gwr.adaptive$SDF$yhat)\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n5.5 Visualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\n\nCode\n#tmap_mode(\"view\")\ntm_shape(mpsz)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\n5.6 Visualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\n\nCode\n#tmap_mode(\"view\")\nAREA_SQM_SE &lt;- tm_shape(mpsz)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n5.6.1 By URA Plannign Region\n\n\nCode\ntm_shape(mpsz[mpsz$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#reference",
    "href": "Handson_Ex/Handson_Ex04/Handson_Ex04.html#reference",
    "title": "Hands on Excercise 4",
    "section": "6 Reference",
    "text": "6 Reference\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) \"GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models\". Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) \"The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models\". Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#get-ready",
    "href": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#get-ready",
    "title": "In Class Exercise 4",
    "section": "2 Get ready",
    "text": "2 Get ready\n\n\nCode\npacman::p_load(sf, tmap, tidyverse, httr, ggpubr)"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#geocoding-using-sla-api",
    "href": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#geocoding-using-sla-api",
    "title": "In Class Exercise 4",
    "section": "3 Geocoding using SLA API",
    "text": "3 Geocoding using SLA API\n\n3.1 Geospatial data.\nImport mpsz data.\n\n\nCode\nmpsz = st_read(dsn = \"./data/geospatial\",\n                   layer = \"MP14_SUBZONE_WEB_PL\")  %&gt;% st_transform(crs = 3414) \n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/SMU/liangyao2023/ISSS624/Inclass_Ex/Inclass_Ex04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nCode\nurl &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\n\n\n\nCode\ncsv &lt;- read_csv(\"./data/aspatial/Generalinformationofschools.csv\")\npostcodes &lt;- csv$'postal_code'\n\n\n\n\nCode\nfound &lt;- data.frame()\nnot_found &lt;- data.frame()\n\nfor(postcode in postcodes){\n  query&lt;- list('searchVal'=postcode, 'returnGeom'='Y', 'getAddrDetails'='Y', 'pageNum'='1')\n  res &lt;- GET(url, query = query)\n  \n  if((content(res)$found)!=0){\n    found &lt;- rbind(found, data.frame(content(res))[4:13])\n  } else{\n    not_found = data.frame(postcode)\n  }\n}\n\n\nCombine found and not_found data.\n\n\nCode\nmerged &lt;- merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE) %&gt;%\n  drop_na()\n\n\nSave the results.\n\n\nCode\nwrite.csv(merged, file = './data/aspatial/schools.csv')\nwrite.csv(not_found, file = './data/aspatial/not_found.csv')\n\n\n\n\n3.2 Aspatial Data\nImporting schools data.\n\n\nCode\nschools &lt;- read_csv('./data/aspatial/schools.csv')\n\n\nWrangling data.\n\n\nCode\nschools &lt;- schools %&gt;%\n  rename(latitude = results.LATITUDE,\n         longitude = results.LONGITUDE) %&gt;%\n  select(postal_code, school_name, latitude, longitude)\n\n\nConverting an aspatial data into sf tibble data.frame\n\n\nCode\nschools_sf &lt;- st_as_sf(schools, \n                       coords = c(\"longitude\",\"latitude\"),\n                       crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\n\n\n\n\n\n\nTip\n\n\n\nfor ‘coords’, always pass longitude firstly and then latitude."
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#plotting",
    "href": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#plotting",
    "title": "In Class Exercise 4",
    "section": "4 Plotting",
    "text": "4 Plotting\n\n\nCode\ntm_shape(mpsz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\ntm_shape(schools_sf) +\n  tm_dots()\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAlways remember to set tm_view(set.zoom.limits = c(11,14)) to restrict zoom if you use tmap_mode(‘view’).\n\n\nCount schools in mpsz and check the summary.\n\n\nCode\nmpsz$'SCHOOL_COUNT' &lt;- lengths(\n  st_intersects(mpsz, schools_sf)\n)\n\nsummary(mpsz$SCHOOL_COUNT)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    0.00    1.08    2.00   12.00 \n\n\nPlot out.\n\n\nCode\ntm_shape(mpsz) +\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons() +\n  tm_dots(size = 'SCHOOL_COUNT',\n          col = \"navy\",\n          alpha = 0.6)"
  },
  {
    "objectID": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#flow-line-analysis",
    "href": "Inclass_Ex/Inclass_Ex04/Inclass_Ex04.html#flow-line-analysis",
    "title": "In Class Exercise 4",
    "section": "5 Flow line analysis",
    "text": "5 Flow line analysis\nRead flow line rds file.\n\n\nCode\nflow_data &lt;- read_rds('./data/rds/flow_data_tidy.rds')\n\nglimpse(flow_data)\n\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ MORNING_PEAK    &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ RETAIL_COUNT    &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\nExtract inter-zonal flow data.\n\n\nCode\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0, flow_data$MORNING_PEAK)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0.000001,1)\n\ninter_zonal_flow &lt;- flow_data %&gt;% filter(FlowNoIntra &gt; 0)\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  rename(TRIPS = MORNING_PEAK,\n         DIST = dist)\n\n\n\n5.1 Origin constrained SIM\n\n\nCode\norcSIM_Poisson &lt;- glm(formula = TRIPS ~\n                        ORIGIN_SZ +\n                        log(SCHOOL_COUNT) +\n                        log(RETAIL_COUNT) +\n                        log(DIST) - 1,\n                      family = poisson(link = 'log'),\n                      data = inter_zonal_flow,\n                      na.action = na.exclude)  # this line is just in case\nsummary(orcSIM_Poisson)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT) + log(RETAIL_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                    Estimate Std. Error  z value Pr(&gt;|z|)    \nORIGIN_SZAMSZ01   19.8739840  0.0047627  4172.84   &lt;2e-16 ***\nORIGIN_SZAMSZ02   20.5902203  0.0042786  4812.33   &lt;2e-16 ***\nORIGIN_SZAMSZ03   20.2327026  0.0045531  4443.70   &lt;2e-16 ***\nORIGIN_SZAMSZ04   19.7744438  0.0049837  3967.79   &lt;2e-16 ***\nORIGIN_SZAMSZ05   19.6574529  0.0056396  3485.61   &lt;2e-16 ***\nORIGIN_SZAMSZ06   19.9659115  0.0048946  4079.16   &lt;2e-16 ***\nORIGIN_SZAMSZ07   18.6746164  0.0096316  1938.90   &lt;2e-16 ***\nORIGIN_SZAMSZ08   19.2701601  0.0090776  2122.82   &lt;2e-16 ***\nORIGIN_SZAMSZ09   19.9889467  0.0052858  3781.64   &lt;2e-16 ***\nORIGIN_SZAMSZ10   20.3422035  0.0045778  4443.62   &lt;2e-16 ***\nORIGIN_SZAMSZ11   18.3944113  0.0129212  1423.58   &lt;2e-16 ***\nORIGIN_SZAMSZ12   18.3484209  0.0109652  1673.33   &lt;2e-16 ***\nORIGIN_SZBDSZ01   20.9668587  0.0043388  4832.36   &lt;2e-16 ***\nORIGIN_SZBDSZ02   20.4059518  0.0050601  4032.75   &lt;2e-16 ***\nORIGIN_SZBDSZ03   20.6725514  0.0045276  4565.93   &lt;2e-16 ***\nORIGIN_SZBDSZ04   21.6703853  0.0038930  5566.44   &lt;2e-16 ***\nORIGIN_SZBDSZ05   20.7497445  0.0046085  4502.46   &lt;2e-16 ***\nORIGIN_SZBDSZ06   20.9119361  0.0046432  4503.77   &lt;2e-16 ***\nORIGIN_SZBDSZ07   18.9749815  0.0097896  1938.28   &lt;2e-16 ***\nORIGIN_SZBDSZ08   19.1933901  0.0091312  2101.95   &lt;2e-16 ***\nORIGIN_SZBKSZ01   19.5422606  0.0064732  3018.96   &lt;2e-16 ***\nORIGIN_SZBKSZ02   20.1748913  0.0050076  4028.89   &lt;2e-16 ***\nORIGIN_SZBKSZ03   20.3984624  0.0047226  4319.35   &lt;2e-16 ***\nORIGIN_SZBKSZ04   19.6182212  0.0059652  3288.76   &lt;2e-16 ***\nORIGIN_SZBKSZ05   19.6033818  0.0063181  3102.74   &lt;2e-16 ***\nORIGIN_SZBKSZ06   19.7145224  0.0056372  3497.20   &lt;2e-16 ***\nORIGIN_SZBKSZ07   20.4237448  0.0041912  4873.03   &lt;2e-16 ***\nORIGIN_SZBKSZ08   19.7992538  0.0050405  3928.02   &lt;2e-16 ***\nORIGIN_SZBKSZ09   19.7821586  0.0055558  3560.66   &lt;2e-16 ***\nORIGIN_SZBLSZ01   17.7977276  0.0149058  1194.01   &lt;2e-16 ***\nORIGIN_SZBLSZ02   17.4287491  0.0192364   906.03   &lt;2e-16 ***\nORIGIN_SZBLSZ03   16.5884288  0.0459848   360.74   &lt;2e-16 ***\nORIGIN_SZBLSZ04   17.7851626  0.0232823   763.89   &lt;2e-16 ***\nORIGIN_SZBMSZ01   20.0751840  0.0052887  3795.89   &lt;2e-16 ***\nORIGIN_SZBMSZ02   18.6956140  0.0066656  2804.80   &lt;2e-16 ***\nORIGIN_SZBMSZ03   19.3204425  0.0054755  3528.56   &lt;2e-16 ***\nORIGIN_SZBMSZ04   19.4724220  0.0049390  3942.59   &lt;2e-16 ***\nORIGIN_SZBMSZ05   16.9581801  0.0168804  1004.61   &lt;2e-16 ***\nORIGIN_SZBMSZ06   16.9898638  0.0181852   934.27   &lt;2e-16 ***\nORIGIN_SZBMSZ07   19.2868403  0.0056231  3429.91   &lt;2e-16 ***\nORIGIN_SZBMSZ08   19.1477543  0.0055918  3424.28   &lt;2e-16 ***\nORIGIN_SZBMSZ09   18.7564539  0.0086298  2173.46   &lt;2e-16 ***\nORIGIN_SZBMSZ10   18.3617854  0.0089250  2057.35   &lt;2e-16 ***\nORIGIN_SZBMSZ11   18.9167941  0.0063340  2986.54   &lt;2e-16 ***\nORIGIN_SZBMSZ12   18.7874661  0.0093024  2019.63   &lt;2e-16 ***\nORIGIN_SZBMSZ13   19.5654046  0.0057517  3401.70   &lt;2e-16 ***\nORIGIN_SZBMSZ14   19.0685619  0.0063346  3010.24   &lt;2e-16 ***\nORIGIN_SZBMSZ15   19.4403124  0.0058147  3343.30   &lt;2e-16 ***\nORIGIN_SZBMSZ16   18.4469203  0.0092638  1991.28   &lt;2e-16 ***\nORIGIN_SZBMSZ17   18.3430175  0.0157692  1163.22   &lt;2e-16 ***\nORIGIN_SZBPSZ01   20.1806714  0.0053660  3760.81   &lt;2e-16 ***\nORIGIN_SZBPSZ02   19.8116707  0.0061485  3222.19   &lt;2e-16 ***\nORIGIN_SZBPSZ03   19.8467602  0.0059769  3320.57   &lt;2e-16 ***\nORIGIN_SZBPSZ04   20.4613200  0.0048398  4227.72   &lt;2e-16 ***\nORIGIN_SZBPSZ05   20.5379711  0.0043769  4692.39   &lt;2e-16 ***\nORIGIN_SZBPSZ06   18.8948034  0.0093668  2017.21   &lt;2e-16 ***\nORIGIN_SZBPSZ07   19.4104568  0.0087961  2206.70   &lt;2e-16 ***\nORIGIN_SZBSSZ01   20.0139503  0.0056561  3538.45   &lt;2e-16 ***\nORIGIN_SZBSSZ02   20.2543885  0.0047198  4291.38   &lt;2e-16 ***\nORIGIN_SZBSSZ03   19.5428803  0.0052713  3707.41   &lt;2e-16 ***\nORIGIN_SZBTSZ01   20.0198045  0.0058541  3419.77   &lt;2e-16 ***\nORIGIN_SZBTSZ02   19.3618525  0.0081472  2376.51   &lt;2e-16 ***\nORIGIN_SZBTSZ03   19.5883853  0.0068935  2841.59   &lt;2e-16 ***\nORIGIN_SZBTSZ04   18.7720238  0.0103909  1806.58   &lt;2e-16 ***\nORIGIN_SZBTSZ05   18.8069026  0.0120628  1559.08   &lt;2e-16 ***\nORIGIN_SZBTSZ06   18.7068633  0.0094575  1978.00   &lt;2e-16 ***\nORIGIN_SZBTSZ07   17.6292257  0.0141551  1245.43   &lt;2e-16 ***\nORIGIN_SZBTSZ08   18.6989374  0.0109610  1705.94   &lt;2e-16 ***\nORIGIN_SZCBSZ01   18.2189868  0.0548317   332.27   &lt;2e-16 ***\nORIGIN_SZCCSZ01   18.9734563  0.0139450  1360.59   &lt;2e-16 ***\nORIGIN_SZCHSZ01   19.5955119  0.0121035  1619.00   &lt;2e-16 ***\nORIGIN_SZCHSZ02   19.3320960  0.0081620  2368.55   &lt;2e-16 ***\nORIGIN_SZCHSZ03   21.2164518  0.0063552  3338.43   &lt;2e-16 ***\nORIGIN_SZCKSZ01   20.1046845  0.0049333  4075.29   &lt;2e-16 ***\nORIGIN_SZCKSZ02   20.5371946  0.0050256  4086.53   &lt;2e-16 ***\nORIGIN_SZCKSZ03   20.7210560  0.0042184  4912.07   &lt;2e-16 ***\nORIGIN_SZCKSZ04   21.4013886  0.0042524  5032.80   &lt;2e-16 ***\nORIGIN_SZCKSZ05   20.9413146  0.0049434  4236.18   &lt;2e-16 ***\nORIGIN_SZCKSZ06   20.2557727  0.0071832  2819.88   &lt;2e-16 ***\nORIGIN_SZCLSZ01   19.3383703  0.0076634  2523.46   &lt;2e-16 ***\nORIGIN_SZCLSZ02   18.5226956  0.0135522  1366.77   &lt;2e-16 ***\nORIGIN_SZCLSZ03   19.0225512  0.0080145  2373.51   &lt;2e-16 ***\nORIGIN_SZCLSZ04   20.7981505  0.0042400  4905.22   &lt;2e-16 ***\nORIGIN_SZCLSZ05   18.3015625  0.0146815  1246.58   &lt;2e-16 ***\nORIGIN_SZCLSZ06   20.8207386  0.0039567  5262.09   &lt;2e-16 ***\nORIGIN_SZCLSZ07   19.6728958  0.0054199  3629.76   &lt;2e-16 ***\nORIGIN_SZCLSZ08   20.0851929  0.0056956  3526.43   &lt;2e-16 ***\nORIGIN_SZCLSZ09   18.5749589  0.0165415  1122.93   &lt;2e-16 ***\nORIGIN_SZDTSZ02   15.8276209  0.0833992   189.78   &lt;2e-16 ***\nORIGIN_SZDTSZ03   16.2512838  0.0737972   220.22   &lt;2e-16 ***\nORIGIN_SZDTSZ13   16.7744385  0.0312450   536.87   &lt;2e-16 ***\nORIGIN_SZGLSZ01   18.2368248  0.0096104  1897.62   &lt;2e-16 ***\nORIGIN_SZGLSZ02   19.8705255  0.0049014  4054.06   &lt;2e-16 ***\nORIGIN_SZGLSZ03   19.8249435  0.0053109  3732.85   &lt;2e-16 ***\nORIGIN_SZGLSZ04   20.7800335  0.0041261  5036.20   &lt;2e-16 ***\nORIGIN_SZGLSZ05   20.6040494  0.0043049  4786.23   &lt;2e-16 ***\nORIGIN_SZHGSZ01   20.0273475  0.0044824  4468.04   &lt;2e-16 ***\nORIGIN_SZHGSZ02   20.2480656  0.0044575  4542.47   &lt;2e-16 ***\nORIGIN_SZHGSZ03   20.0756442  0.0049003  4096.81   &lt;2e-16 ***\nORIGIN_SZHGSZ04   20.7577748  0.0040465  5129.84   &lt;2e-16 ***\nORIGIN_SZHGSZ05   20.9779992  0.0040123  5228.42   &lt;2e-16 ***\nORIGIN_SZHGSZ06   19.7403058  0.0054229  3640.20   &lt;2e-16 ***\nORIGIN_SZHGSZ07   20.1896268  0.0046051  4384.22   &lt;2e-16 ***\nORIGIN_SZHGSZ08   19.8646492  0.0052403  3790.72   &lt;2e-16 ***\nORIGIN_SZHGSZ09   18.3647736  0.0069196  2654.04   &lt;2e-16 ***\nORIGIN_SZHGSZ10   16.8720475  0.0421046   400.72   &lt;2e-16 ***\nORIGIN_SZJESZ01   20.2673794  0.0046723  4337.79   &lt;2e-16 ***\nORIGIN_SZJESZ02   20.0595982  0.0046503  4313.61   &lt;2e-16 ***\nORIGIN_SZJESZ03   19.9128778  0.0049848  3994.75   &lt;2e-16 ***\nORIGIN_SZJESZ04   18.5053667  0.0099227  1864.94   &lt;2e-16 ***\nORIGIN_SZJESZ05   17.8172930  0.0138840  1283.29   &lt;2e-16 ***\nORIGIN_SZJESZ06   20.0124157  0.0045009  4446.36   &lt;2e-16 ***\nORIGIN_SZJESZ07   18.1821423  0.0117267  1550.49   &lt;2e-16 ***\nORIGIN_SZJESZ08   18.8713046  0.0116456  1620.46   &lt;2e-16 ***\nORIGIN_SZJESZ09   20.5535527  0.0048456  4241.72   &lt;2e-16 ***\nORIGIN_SZJESZ10   18.4922322  0.0191243   966.95   &lt;2e-16 ***\nORIGIN_SZJESZ11   18.2891211  0.0197114   927.85   &lt;2e-16 ***\nORIGIN_SZJWSZ01   20.4912737  0.0063102  3247.35   &lt;2e-16 ***\nORIGIN_SZJWSZ02   20.8236694  0.0042249  4928.82   &lt;2e-16 ***\nORIGIN_SZJWSZ03   21.2587613  0.0039733  5350.40   &lt;2e-16 ***\nORIGIN_SZJWSZ04   20.3816464  0.0046199  4411.67   &lt;2e-16 ***\nORIGIN_SZJWSZ05   18.0607448  0.0128857  1401.61   &lt;2e-16 ***\nORIGIN_SZJWSZ06   18.7015202  0.0107614  1737.83   &lt;2e-16 ***\nORIGIN_SZJWSZ07   17.3991822  0.0277096   627.91   &lt;2e-16 ***\nORIGIN_SZJWSZ08   21.8044465  0.0037356  5836.95   &lt;2e-16 ***\nORIGIN_SZJWSZ09   21.5414930  0.0036033  5978.19   &lt;2e-16 ***\nORIGIN_SZKLSZ01   20.0307712  0.0047868  4184.59   &lt;2e-16 ***\nORIGIN_SZKLSZ02   19.0634769  0.0062318  3059.05   &lt;2e-16 ***\nORIGIN_SZKLSZ03   19.2685700  0.0057172  3370.25   &lt;2e-16 ***\nORIGIN_SZKLSZ04   17.7085067  0.0119809  1478.06   &lt;2e-16 ***\nORIGIN_SZKLSZ05   18.6384471  0.0107596  1732.26   &lt;2e-16 ***\nORIGIN_SZKLSZ06   13.7280296  0.1857160    73.92   &lt;2e-16 ***\nORIGIN_SZKLSZ07   18.6425146  0.0084952  2194.47   &lt;2e-16 ***\nORIGIN_SZKLSZ08   18.0928506  0.0101567  1781.37   &lt;2e-16 ***\nORIGIN_SZLKSZ01   17.8907138  0.0397083   450.55   &lt;2e-16 ***\nORIGIN_SZMDSZ01   18.7605188  0.0285455   657.22   &lt;2e-16 ***\nORIGIN_SZMDSZ02   19.1533927  0.0102815  1862.90   &lt;2e-16 ***\nORIGIN_SZMDSZ03   17.8404982  0.0169690  1051.36   &lt;2e-16 ***\nORIGIN_SZMPSZ01   19.0765941  0.0083937  2272.74   &lt;2e-16 ***\nORIGIN_SZMPSZ02   19.2162527  0.0068331  2812.24   &lt;2e-16 ***\nORIGIN_SZMPSZ03   19.9965344  0.0054569  3664.44   &lt;2e-16 ***\nORIGIN_SZMUSZ02   15.9130765  0.1037472   153.38   &lt;2e-16 ***\nORIGIN_SZNTSZ01   17.0840999  0.0352513   484.64   &lt;2e-16 ***\nORIGIN_SZNTSZ02   16.5792122  0.0233186   710.99   &lt;2e-16 ***\nORIGIN_SZNTSZ03   18.9506415  0.0075957  2494.93   &lt;2e-16 ***\nORIGIN_SZNTSZ05   15.8770261  0.0495825   320.21   &lt;2e-16 ***\nORIGIN_SZNTSZ06   15.3997415  0.0557029   276.46   &lt;2e-16 ***\nORIGIN_SZNVSZ01   20.2241694  0.0043487  4650.65   &lt;2e-16 ***\nORIGIN_SZNVSZ02   19.1897826  0.0065383  2934.97   &lt;2e-16 ***\nORIGIN_SZNVSZ03   18.8854268  0.0080459  2347.22   &lt;2e-16 ***\nORIGIN_SZNVSZ04   18.8940191  0.0090985  2076.61   &lt;2e-16 ***\nORIGIN_SZNVSZ05   17.6278585  0.0168107  1048.61   &lt;2e-16 ***\nORIGIN_SZPGSZ01   19.4825220  0.0122960  1584.46   &lt;2e-16 ***\nORIGIN_SZPGSZ02   19.4726761  0.0073116  2663.25   &lt;2e-16 ***\nORIGIN_SZPGSZ03   20.5515713  0.0045631  4503.86   &lt;2e-16 ***\nORIGIN_SZPGSZ04   21.0527131  0.0041500  5072.89   &lt;2e-16 ***\nORIGIN_SZPGSZ05   20.1436604  0.0057267  3517.48   &lt;2e-16 ***\nORIGIN_SZPLSZ01   19.1832002  0.0120006  1598.53   &lt;2e-16 ***\nORIGIN_SZPLSZ02   18.8752206  0.0149740  1260.53   &lt;2e-16 ***\nORIGIN_SZPLSZ03   18.1000818  0.0371769   486.86   &lt;2e-16 ***\nORIGIN_SZPLSZ04   17.1730559  0.0370280   463.79   &lt;2e-16 ***\nORIGIN_SZPLSZ05   17.9084439  0.0225031   795.82   &lt;2e-16 ***\nORIGIN_SZPNSZ01   21.0804425  0.0044829  4702.41   &lt;2e-16 ***\nORIGIN_SZPNSZ02   19.8822123  0.0111507  1783.05   &lt;2e-16 ***\nORIGIN_SZPNSZ03   17.9293289  0.0193571   926.24   &lt;2e-16 ***\nORIGIN_SZPNSZ04   17.1039594  0.0334954   510.64   &lt;2e-16 ***\nORIGIN_SZPNSZ05   18.2543864  0.0275554   662.46   &lt;2e-16 ***\nORIGIN_SZPRSZ01   19.8777935  0.0117586  1690.49   &lt;2e-16 ***\nORIGIN_SZPRSZ02   21.0751780  0.0044832  4700.88   &lt;2e-16 ***\nORIGIN_SZPRSZ03   20.6717019  0.0045577  4535.55   &lt;2e-16 ***\nORIGIN_SZPRSZ04   19.6365125  0.0074923  2620.90   &lt;2e-16 ***\nORIGIN_SZPRSZ05   21.3132151  0.0042119  5060.24   &lt;2e-16 ***\nORIGIN_SZPRSZ06   18.9314574  0.0117278  1614.24   &lt;2e-16 ***\nORIGIN_SZPRSZ07   17.2822918  0.0162430  1063.98   &lt;2e-16 ***\nORIGIN_SZPRSZ08   19.9267642  0.0062298  3198.62   &lt;2e-16 ***\nORIGIN_SZQTSZ01   19.7357175  0.0066359  2974.08   &lt;2e-16 ***\nORIGIN_SZQTSZ02   19.2082141  0.0061402  3128.26   &lt;2e-16 ***\nORIGIN_SZQTSZ03   19.7771883  0.0056220  3517.83   &lt;2e-16 ***\nORIGIN_SZQTSZ04   18.7114421  0.0072842  2568.76   &lt;2e-16 ***\nORIGIN_SZQTSZ05   19.3049324  0.0062401  3093.69   &lt;2e-16 ***\nORIGIN_SZQTSZ06   19.2643228  0.0065590  2937.09   &lt;2e-16 ***\nORIGIN_SZQTSZ07   18.5697347  0.0095373  1947.06   &lt;2e-16 ***\nORIGIN_SZQTSZ08   19.6147001  0.0061330  3198.21   &lt;2e-16 ***\nORIGIN_SZQTSZ09   19.2550793  0.0069947  2752.82   &lt;2e-16 ***\nORIGIN_SZQTSZ10   19.5801866  0.0064513  3035.07   &lt;2e-16 ***\nORIGIN_SZQTSZ11   17.7398366  0.0143648  1234.95   &lt;2e-16 ***\nORIGIN_SZQTSZ12   17.2420354  0.0186736   923.34   &lt;2e-16 ***\nORIGIN_SZQTSZ13   19.3857418  0.0078878  2457.69   &lt;2e-16 ***\nORIGIN_SZQTSZ14   18.1300753  0.0122096  1484.90   &lt;2e-16 ***\nORIGIN_SZQTSZ15   19.4222283  0.0120871  1606.86   &lt;2e-16 ***\nORIGIN_SZRCSZ01   18.1549045  0.0125108  1451.13   &lt;2e-16 ***\nORIGIN_SZRCSZ06   18.8836400  0.0082161  2298.38   &lt;2e-16 ***\nORIGIN_SZRVSZ01   16.7864438  0.0323796   518.43   &lt;2e-16 ***\nORIGIN_SZRVSZ02   16.4203244  0.0276836   593.14   &lt;2e-16 ***\nORIGIN_SZRVSZ03   16.6453738  0.0244992   679.42   &lt;2e-16 ***\nORIGIN_SZRVSZ04   15.9559213  0.0556344   286.80   &lt;2e-16 ***\nORIGIN_SZRVSZ05   17.0476331  0.0164122  1038.71   &lt;2e-16 ***\nORIGIN_SZSBSZ01   20.0417968  0.0062488  3207.29   &lt;2e-16 ***\nORIGIN_SZSBSZ02   19.1869565  0.0081051  2367.26   &lt;2e-16 ***\nORIGIN_SZSBSZ03   20.5769861  0.0045108  4561.70   &lt;2e-16 ***\nORIGIN_SZSBSZ04   20.5154199  0.0050548  4058.57   &lt;2e-16 ***\nORIGIN_SZSBSZ05   19.6250669  0.0065562  2993.35   &lt;2e-16 ***\nORIGIN_SZSBSZ06   18.8419757  0.0171135  1101.00   &lt;2e-16 ***\nORIGIN_SZSBSZ07   19.4897259  0.0124528  1565.09   &lt;2e-16 ***\nORIGIN_SZSBSZ08   18.7027917  0.0140545  1330.73   &lt;2e-16 ***\nORIGIN_SZSBSZ09   18.8893480  0.0088571  2132.67   &lt;2e-16 ***\nORIGIN_SZSESZ02   20.8962192  0.0041665  5015.34   &lt;2e-16 ***\nORIGIN_SZSESZ03   20.9452771  0.0039737  5270.94   &lt;2e-16 ***\nORIGIN_SZSESZ04   20.6576142  0.0046364  4455.55   &lt;2e-16 ***\nORIGIN_SZSESZ05   19.5170732  0.0058912  3312.92   &lt;2e-16 ***\nORIGIN_SZSESZ06   20.7595824  0.0045747  4537.89   &lt;2e-16 ***\nORIGIN_SZSESZ07   17.6888256  0.0195787   903.47   &lt;2e-16 ***\nORIGIN_SZSGSZ01   19.1359250  0.0085781  2230.79   &lt;2e-16 ***\nORIGIN_SZSGSZ02   18.5614369  0.0102037  1819.10   &lt;2e-16 ***\nORIGIN_SZSGSZ03   19.9933176  0.0050434  3964.23   &lt;2e-16 ***\nORIGIN_SZSGSZ04   20.2426871  0.0047211  4287.71   &lt;2e-16 ***\nORIGIN_SZSGSZ05   18.0114965  0.0107743  1671.70   &lt;2e-16 ***\nORIGIN_SZSGSZ06   20.2593194  0.0044538  4548.76   &lt;2e-16 ***\nORIGIN_SZSGSZ07   19.0763664  0.0062968  3029.54   &lt;2e-16 ***\nORIGIN_SZSKSZ01   19.9222451  0.0085136  2340.04   &lt;2e-16 ***\nORIGIN_SZSKSZ02   20.8633383  0.0055248  3776.33   &lt;2e-16 ***\nORIGIN_SZSKSZ03   19.6528148  0.0080534  2440.33   &lt;2e-16 ***\nORIGIN_SZSKSZ04   18.0754470  0.0275771   655.45   &lt;2e-16 ***\nORIGIN_SZSKSZ05   19.1192521  0.0155579  1228.91   &lt;2e-16 ***\nORIGIN_SZSLSZ01   17.1501034  0.0329384   520.67   &lt;2e-16 ***\nORIGIN_SZSLSZ04   19.5949774  0.0076753  2552.98   &lt;2e-16 ***\nORIGIN_SZSRSZ01   16.9761403  0.0162020  1047.78   &lt;2e-16 ***\nORIGIN_SZTHSZ01   17.9695687  0.0488559   367.81   &lt;2e-16 ***\nORIGIN_SZTHSZ03   18.5427522  0.0223617   829.22   &lt;2e-16 ***\nORIGIN_SZTHSZ04   17.4760374  0.0286247   610.52   &lt;2e-16 ***\nORIGIN_SZTHSZ06   17.8401186  0.0183322   973.16   &lt;2e-16 ***\nORIGIN_SZTMSZ01   20.3406361  0.0056607  3593.33   &lt;2e-16 ***\nORIGIN_SZTMSZ02   22.0307026  0.0037386  5892.85   &lt;2e-16 ***\nORIGIN_SZTMSZ03   21.3451920  0.0040606  5256.65   &lt;2e-16 ***\nORIGIN_SZTMSZ04   20.6611593  0.0049896  4140.87   &lt;2e-16 ***\nORIGIN_SZTMSZ05   19.3323133  0.0112868  1712.82   &lt;2e-16 ***\nORIGIN_SZTNSZ01   17.9513571  0.0128266  1399.54   &lt;2e-16 ***\nORIGIN_SZTNSZ02   18.0267387  0.0098372  1832.51   &lt;2e-16 ***\nORIGIN_SZTNSZ03   17.7253700  0.0134668  1316.23   &lt;2e-16 ***\nORIGIN_SZTNSZ04   19.4474075  0.0073760  2636.59   &lt;2e-16 ***\nORIGIN_SZTPSZ01   19.1078631  0.0065635  2911.25   &lt;2e-16 ***\nORIGIN_SZTPSZ02   20.2837634  0.0041411  4898.18   &lt;2e-16 ***\nORIGIN_SZTPSZ03   19.1838238  0.0059552  3221.37   &lt;2e-16 ***\nORIGIN_SZTPSZ04   19.1805388  0.0054778  3501.53   &lt;2e-16 ***\nORIGIN_SZTPSZ05   19.3718076  0.0058610  3305.18   &lt;2e-16 ***\nORIGIN_SZTPSZ06   19.6605723  0.0054968  3576.70   &lt;2e-16 ***\nORIGIN_SZTPSZ07   19.4499807  0.0060491  3215.36   &lt;2e-16 ***\nORIGIN_SZTPSZ08   18.7996538  0.0095757  1963.28   &lt;2e-16 ***\nORIGIN_SZTPSZ09   19.0025110  0.0067068  2833.31   &lt;2e-16 ***\nORIGIN_SZTPSZ10   18.8899657  0.0076094  2482.46   &lt;2e-16 ***\nORIGIN_SZTPSZ11   19.6277780  0.0053983  3635.93   &lt;2e-16 ***\nORIGIN_SZTPSZ12   19.1471104  0.0065742  2912.45   &lt;2e-16 ***\nORIGIN_SZTSSZ01   17.4901113  0.0478954   365.17   &lt;2e-16 ***\nORIGIN_SZTSSZ02   20.4997466  0.0081850  2504.55   &lt;2e-16 ***\nORIGIN_SZTSSZ03   20.1076553  0.0084728  2373.19   &lt;2e-16 ***\nORIGIN_SZTSSZ04   20.0646610  0.0089008  2254.26   &lt;2e-16 ***\nORIGIN_SZTSSZ05   19.3962067  0.0151392  1281.19   &lt;2e-16 ***\nORIGIN_SZTSSZ06   20.9235857  0.0178278  1173.65   &lt;2e-16 ***\nORIGIN_SZWCSZ01   20.8411600  0.0086519  2408.86   &lt;2e-16 ***\nORIGIN_SZWCSZ02   17.7355404  0.0328889   539.26   &lt;2e-16 ***\nORIGIN_SZWCSZ03   14.9380886  0.1240699   120.40   &lt;2e-16 ***\nORIGIN_SZWDSZ01   21.1969012  0.0037830  5603.23   &lt;2e-16 ***\nORIGIN_SZWDSZ02   20.5930001  0.0044572  4620.13   &lt;2e-16 ***\nORIGIN_SZWDSZ03   21.2521867  0.0041672  5099.85   &lt;2e-16 ***\nORIGIN_SZWDSZ04   21.0702687  0.0048648  4331.13   &lt;2e-16 ***\nORIGIN_SZWDSZ05   20.4008998  0.0051801  3938.35   &lt;2e-16 ***\nORIGIN_SZWDSZ06   20.6669176  0.0049280  4193.78   &lt;2e-16 ***\nORIGIN_SZWDSZ07   19.0500370  0.0082729  2302.71   &lt;2e-16 ***\nORIGIN_SZWDSZ08   19.0816252  0.0080667  2365.49   &lt;2e-16 ***\nORIGIN_SZWDSZ09   21.4182096  0.0040391  5302.73   &lt;2e-16 ***\nORIGIN_SZYSSZ01   19.5355157  0.0057540  3395.14   &lt;2e-16 ***\nORIGIN_SZYSSZ02   20.8737972  0.0048278  4323.64   &lt;2e-16 ***\nORIGIN_SZYSSZ03   21.6614437  0.0040011  5413.81   &lt;2e-16 ***\nORIGIN_SZYSSZ04   20.9305289  0.0043595  4801.10   &lt;2e-16 ***\nORIGIN_SZYSSZ05   20.1727678  0.0058466  3450.34   &lt;2e-16 ***\nORIGIN_SZYSSZ06   19.1481507  0.0116724  1640.47   &lt;2e-16 ***\nORIGIN_SZYSSZ07   18.7919074  0.0141636  1326.78   &lt;2e-16 ***\nORIGIN_SZYSSZ08   19.9733515  0.0061229  3262.07   &lt;2e-16 ***\nORIGIN_SZYSSZ09   20.9366181  0.0040347  5189.15   &lt;2e-16 ***\nlog(SCHOOL_COUNT)  0.4755516  0.0004701  1011.55   &lt;2e-16 ***\nlog(RETAIL_COUNT)  0.1796905  0.0001856   968.12   &lt;2e-16 ***\nlog(DIST)         -1.6929522  0.0004093 -4136.01   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  15526121  on 14189  degrees of freedom\nAIC: 15615824\n\nNumber of Fisher Scoring iterations: 6\n\n\n\n\n\n\n\n\nTip\n\n\n\nRead ‘Estimate’ of log(factor) to check the relationship between those attractiveness and propulsive factors and number of trips. Also check the p-value to ensure the factors’ significance (&lt;0.05).\n\n\n\n\n5.2 Goodness of Fit\nCheck the R-Squared of our poisson analysis.\n\n\nCode\ncor(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values) ^2\n\n\n[1] 0.4362208\n\n\nOr you can create a function to find R-squared for further use.\n\n\nCode\nRSquared &lt;- function(observed, estimated){\n  r &lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\n\n\n\n5.3 Doubly constrained\n\n\nCode\ndbcSIM_Poisson &lt;- glm(formula = TRIPS ~\n                        ORIGIN_SZ +\n                        DESTIN_SZ +\n                        log(DIST),\n                      family = poisson(link = 'log'),\n                      data = inter_zonal_flow,\n                      na.action = na.exclude)  # this line is just in case\nsummary(dbcSIM_Poisson)\n\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), family = poisson(link = \"log\"), \n    data = inter_zonal_flow, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.8312374  0.0059160  3690.190  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.5263502  0.0048031   109.585  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.3139982  0.0049254    63.751  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2146257  0.0053639   -40.013  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.1890446  0.0060386   -31.306  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1539201  0.0054401    28.294  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9826565  0.0098676   -99.584  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4488417  0.0093070   -48.226  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0713474  0.0057402    12.429  &lt; 2e-16 ***\nORIGIN_SZAMSZ10  0.4313742  0.0050370    85.641  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4712226  0.0131178  -112.154  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7250733  0.0111603  -154.573  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8810576  0.0048168   182.914  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.1100240  0.0055529    19.814  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3606166  0.0050672    71.167  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4624347  0.0044212   330.781  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6207557  0.0050843   122.092  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6712973  0.0051953   129.214  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2338669  0.0100775  -122.437  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -1.0444562  0.0094555  -110.460  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2838426  0.0071354   -39.780  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.5550522  0.0059014    94.054  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.7396640  0.0056796   130.231  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2242451  0.0067482   -33.230  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2371614  0.0069386   -34.180  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.1413812  0.0065035   -21.739  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7089989  0.0051843   136.758  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.0907065  0.0059157   -15.333  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.1775146  0.0063302   -28.042  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.3684539  0.0154280  -153.516  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.8078475  0.0197839  -141.926  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3122763  0.0466091   -71.065  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.6770542  0.0241793  -110.717  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.0618035  0.0059400    10.405  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3535767  0.0073741  -183.557  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.7569095  0.0063187  -119.790  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2949304  0.0059603   -49.483  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6131992  0.0172376  -151.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -3.0315024  0.0185502  -163.422  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.6962524  0.0064068  -108.674  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -0.9310730  0.0064541  -144.261  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.2911253  0.0092047  -140.268  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6687004  0.0095708  -174.353  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.1152794  0.0072027  -154.841  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.5323954  0.0099932  -153.344  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.6267376  0.0065863   -95.158  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.0475467  0.0072472  -144.544  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5049444  0.0067390   -74.929  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5282897  0.0099545  -153.527  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.5722349  0.0161533   -97.332  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5814175  0.0062904    92.429  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0875442  0.0072190    12.127  &lt; 2e-16 ***\nORIGIN_SZBPSZ03  0.3358227  0.0070460    47.662  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6507586  0.0057726   112.733  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.9502124  0.0052971   179.384  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -1.0480314  0.0098191  -106.734  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5467931  0.0091676   -59.644  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.2998334  0.0059193    50.654  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2841036  0.0050863    55.856  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2331505  0.0056565   -41.218  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.0987284  0.0063715    15.495  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.6261229  0.0084604   -74.006  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.4326963  0.0073452   -58.909  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4998668  0.0110013  -136.336  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.9564768  0.0122202   -78.270  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.2853131  0.0099328  -129.401  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3870991  0.0144589  -165.096  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.3715855  0.0113825  -120.499  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.5940232  0.0548979   -65.467  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.7008220  0.0140373   -49.926  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.9109524  0.0122869   -74.140  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8566547  0.0088749   -96.526  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.1153731  0.0066136   168.650  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.3001815  0.0058548    51.271  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.7185711  0.0060595   118.585  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.1389824  0.0053179   214.178  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.6281772  0.0054761   297.324  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.8338470  0.0064178   129.927  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.6528993  0.0082375    79.259  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.7174758  0.0082123   -87.366  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7513100  0.0139062  -125.938  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0362873  0.0085485  -121.224  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6160017  0.0051276   120.136  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.1005122  0.0150228  -139.821  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7252108  0.0049447   146.665  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5343482  0.0062500   -85.496  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2153408  0.0067571   -31.869  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8019961  0.0169078  -106.578  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.9057711  0.0834668   -46.794  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4152419  0.0738650   -46.236  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0183438  0.0315257   -95.742  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.7812384  0.0099367  -179.258  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1074991  0.0054325   -19.788  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2461106  0.0057176   -43.045  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8657186  0.0046413   186.524  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.5871393  0.0047939   122.477  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3543819  0.0050461    70.229  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.4218178  0.0050820    83.003  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2411309  0.0054241    44.456  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.8180622  0.0046153   177.252  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.2173687  0.0045655   266.647  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1826300  0.0058214   -31.372  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3172839  0.0050733    62.540  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.1151369  0.0057067   -20.176  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2873441  0.0091690  -140.401  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.3783178  0.0424682   -79.549  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4859234  0.0055927    86.885  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1766088  0.0055800    31.650  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2177441  0.0059535   -36.574  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5532182  0.0104526  -148.597  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3332926  0.0142701  -163.509  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.3007382  0.0055019    54.661  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9687994  0.0121092  -162.587  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3032070  0.0122024  -106.800  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.5762635  0.0058766    98.061  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.4423113  0.0194773   -74.051  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.9720897  0.0200811   -98.206  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.3808627  0.0071357    53.374  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.7963999  0.0053150   149.840  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.5429636  0.0049961   308.834  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.6410760  0.0056711   113.042  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1571049  0.0133584  -161.479  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5174532  0.0113384  -133.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.7089963  0.0280439   -96.598  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.5343415  0.0051711   296.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8837410  0.0048845   385.656  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1081286  0.0053307    20.284  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.8844695  0.0067728  -130.591  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.6872640  0.0062857  -109.337  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2090319  0.0122440  -180.418  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1728726  0.0110765  -105.888  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -6.1162315  0.1857789   -32.922  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4082749  0.0092299  -152.578  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7781551  0.0104682  -169.862  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0531568  0.0398803   -51.483  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8825639  0.0287621   -30.685  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6219993  0.0107388   -57.921  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.0840156  0.0173117  -120.382  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9659093  0.0086972  -111.060  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0411153  0.0073403  -141.836  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0001659  0.0059401     0.028 0.977719    \nORIGIN_SZMUSZ02 -3.7599031  0.1037937   -36.225  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0388366  0.0355325   -85.523  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.4230640  0.0235902  -145.106  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.9094796  0.0082551  -110.172  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.0861681  0.0499630   -81.784  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.9497128  0.0565388   -69.858  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.3235636  0.0049439    65.447  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6946748  0.0070536   -98.485  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0540196  0.0083781  -125.806  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.9897977  0.0093463  -105.903  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.2578432  0.0169180  -133.458  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.2399827  0.0130436    18.398  &lt; 2e-16 ***\nORIGIN_SZPGSZ02 -0.3352342  0.0078451   -42.732  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9515148  0.0051376   185.207  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3998952  0.0047991   291.697  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.4451629  0.0063423    70.189  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9705918  0.0122781   -79.050  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0670151  0.0153358   -69.577  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.1229124  0.0373527   -56.834  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -3.0911932  0.0371296   -83.254  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.1705708  0.0226085   -96.007  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9052637  0.0065952   137.262  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.1720425  0.0125658   -13.691  &lt; 2e-16 ***\nORIGIN_SZPNSZ03 -2.3973459  0.0201408  -119.029  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.4483689  0.0343741  -100.319  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0588530  0.0282328   -72.924  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6399015  0.0120470   -53.117  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.8122270  0.0050886   159.617  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.3990960  0.0051810    77.031  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8485348  0.0079236  -107.089  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.8008791  0.0048532   165.021  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.4498806  0.0121422  -119.408  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.2025045  0.0167118  -191.631  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5862269  0.0067255   -87.165  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.1859270  0.0075531   -24.616  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8715122  0.0068124  -127.929  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.1259816  0.0064796   -19.443  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4620032  0.0079848  -183.098  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6675643  0.0069616   -95.892  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8190026  0.0072713  -112.634  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5189403  0.0099864  -152.101  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4976238  0.0067874   -73.316  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.9006162  0.0075978  -118.536  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6690184  0.0071574   -93.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.5203437  0.0147000  -171.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0461675  0.0190193  -160.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7501068  0.0084481   -88.791  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.9321849  0.0126114  -153.209  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.9576828  0.0127157   -75.315  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8167951  0.0129234  -140.582  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5560563  0.0090507   -61.438  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.8862570  0.0325532   -88.663  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.1555662  0.0281279  -112.186  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9836089  0.0248449  -120.089  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.5520422  0.0561371   -63.274  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.5866584  0.0180382  -143.399  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.2867444  0.0071098    40.331  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.9012334  0.0087262  -103.278  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8311038  0.0055422   149.958  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.4044170  0.0062047    65.179  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.2661845  0.0074162   -35.892  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9023075  0.0175046   -51.547  &lt; 2e-16 ***\nORIGIN_SZSBSZ07  0.0505870  0.0131317     3.852 0.000117 ***\nORIGIN_SZSBSZ08 -1.1158011  0.0145416   -76.732  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9682835  0.0095396  -101.501  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1452735  0.0047810   239.548  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2815277  0.0045677   280.564  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.8085857  0.0052756   153.269  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2329413  0.0063113   -36.909  &lt; 2e-16 ***\nORIGIN_SZSESZ06  1.0576879  0.0049909   211.925  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.3165908  0.0196831  -117.695  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6606350  0.0088079   -75.005  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.3638984  0.0104040  -131.094  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.1152591  0.0054649    21.091  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2954067  0.0050865    58.077  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0792678  0.0109882  -189.227  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4563227  0.0048880    93.356  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8955254  0.0067100  -133.461  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3184402  0.0093032   -34.229  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1160484  0.0063851   174.790  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.2566692  0.0086021   -29.838  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.5781827  0.0279394   -56.486  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2724361  0.0163597   -16.653  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.4458625  0.0330301   -74.050  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0987076  0.0079626   -12.396  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.2584977  0.0176647  -127.854  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.5878524  0.0489998   -52.814  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -0.8101746  0.0226814   -35.720  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.4186655  0.0288663   -83.789  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7080541  0.0186353   -91.657  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2193476  0.0061823   -35.480  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7772464  0.0043394   409.558  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  1.0051343  0.0046055   218.249  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.1642370  0.0055078    29.819  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.2878706  0.0114828  -112.157  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.7163504  0.0131268  -130.751  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.6508988  0.0103851  -158.968  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.1545577  0.0137947  -156.187  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.3949120  0.0078496   -50.310  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.8058100  0.0069916  -115.253  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5369060  0.0047272   113.577  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.7779333  0.0064278  -121.027  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8153581  0.0061387  -132.823  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5073676  0.0067771   -74.865  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0847301  0.0065717    12.893  &lt; 2e-16 ***\nORIGIN_SZTPSZ07 -0.5839519  0.0066148   -88.280  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0577941  0.0098480  -107.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9067707  0.0071367  -127.057  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1362091  0.0080905  -140.438  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2374621  0.0059472   -39.928  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8028874  0.0069663  -115.253  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.7809271  0.0482843   -57.595  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.0425804  0.0105088     4.052 5.08e-05 ***\nORIGIN_SZTSSZ03  0.1142369  0.0109412    10.441  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.6186261  0.0116324   -53.181  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -1.0846732  0.0173555   -62.497  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.3980173  0.0198100    20.092  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.3545143  0.0092002   147.227  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.9863278  0.0330906   -90.247  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.0504916  0.1241385   -40.684  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.5238429  0.0049404   308.448  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.2832576  0.0056218    50.386  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.3702524  0.0053266   257.245  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  1.0248225  0.0059272   172.903  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.2356778  0.0060587    38.899  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.3146925  0.0059919    52.520  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.4971897  0.0091243  -164.088  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.8894079  0.0087414  -101.747  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.4437633  0.0053160   271.590  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.2519398  0.0064443   -39.095  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8726785  0.0057658   151.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.7868139  0.0050674   352.611  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8418040  0.0051738   162.704  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.4292096  0.0062520    68.652  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.7459961  0.0119123   -62.624  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.8422281  0.0144559   -58.262  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.1829428  0.0067885    26.949  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.1159712  0.0050760   219.853  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0694567  0.0045966    15.111  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0760100  0.0044639    17.028  &lt; 2e-16 ***\nDESTIN_SZAMSZ04 -1.1306391  0.0064373  -175.639  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.0751133  0.0065164  -164.985  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -0.9624298  0.0065937  -145.962  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5060319  0.0097616  -154.281  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.4813202  0.0069794   -68.963  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.0220675  0.0066313  -154.129  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1235142  0.0047044    26.255  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8917993  0.0088519  -100.746  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.0195208  0.0051704     3.775 0.000160 ***\nDESTIN_SZBDSZ01  0.9736349  0.0042757   227.713  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.1969470  0.0055284   -35.625  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1266471  0.0050786    24.938  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1608485  0.0041956   276.684  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.9293840  0.0044412   209.265  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.4090567  0.0050300    81.323  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.8171478  0.0098945   -82.586  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.5895287  0.0111632  -142.391  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3793311  0.0072145  -191.189  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.5253670  0.0061879   -84.903  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -1.0095362  0.0065426  -154.301  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.5662858  0.0056453  -100.311  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9406607  0.0070597  -133.244  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.3129276  0.0067414  -194.755  &lt; 2e-16 ***\nDESTIN_SZBKSZ07  0.0120605  0.0049284     2.447 0.014400 *  \nDESTIN_SZBKSZ08 -1.3658471  0.0075109  -181.849  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.1771310  0.0055645   -31.832  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8175223  0.0075645  -108.074  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1631280  0.0071753    22.735  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2598494  0.0081706   154.194  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.5642975  0.0137827   -40.943  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.6921844  0.0054211   127.684  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.1209392  0.0055362   -21.845  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2373881  0.0062427   -38.027  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0407117  0.0058001    -7.019 2.23e-12 ***\nDESTIN_SZBMSZ05 -0.2363309  0.0075967   -31.110  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.1930710  0.0134761   -88.532  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4625103  0.0051864    89.178  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8604731  0.0069899  -123.102  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.1290239  0.0154841  -137.498  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4617153  0.0094014  -155.478  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.3234050  0.0085506  -154.773  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8399230  0.0085361   -98.397  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1366529  0.0059697    22.891  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0491968  0.0083021  -126.378  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6726684  0.0076276   -88.189  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4011734  0.0116569  -120.201  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5682752  0.0167333   -93.722  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1120017  0.0063197  -175.959  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.0833466  0.0091139  -228.590  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6937265  0.0087437  -193.709  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7964999  0.0066129  -120.447  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.2109118  0.0048815    43.206  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.1808365  0.0083657  -141.152  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.2077428  0.0084543   -24.572  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3164175  0.0050682    62.431  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.4852688  0.0057001   -85.134  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.4130432  0.0043061    95.921  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.6215095  0.0048914   127.061  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0145076  0.0071799    -2.021 0.043324 *  \nDESTIN_SZBTSZ03  0.4919981  0.0058498    84.105  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.6957555  0.0114078   -60.989  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.3329814  0.0073568    45.262  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.1333295  0.0073965   -18.026  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4449581  0.0113186  -127.663  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.7079056  0.0103797   -68.201  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7344725  0.3162767   -18.131  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0009541  0.0083381    -0.114 0.908900    \nDESTIN_SZCHSZ01 -0.2083016  0.0099054   -21.029  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.5369606  0.0057531    93.334  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.5530638  0.0043945   580.971  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.5725975  0.0056507  -101.333  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -1.1181852  0.0063287  -176.685  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.1156680  0.0049440    23.396  &lt; 2e-16 ***\nDESTIN_SZCKSZ04 -0.8647725  0.0071003  -121.794  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1641791  0.0076248  -152.684  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4397612  0.0073040   -60.208  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.1930552  0.0053752    35.916  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -2.0436501  0.0136039  -150.225  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9338571  0.0082908  -112.638  &lt; 2e-16 ***\nDESTIN_SZCLSZ04  0.0532041  0.0053276     9.987  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.0782781  0.0088184  -122.276  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.4068171  0.0049068    82.910  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.3579507  0.0060289   -59.373  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.2487993  0.0066588   -37.364  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.1611080  0.0071178    22.635  &lt; 2e-16 ***\nDESTIN_SZDTSZ02 -1.7308348  0.0349466   -49.528  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.5994253  0.0146230   -40.992  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.3685031  0.0162803   -84.059  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0910001  0.0055275   -16.463  &lt; 2e-16 ***\nDESTIN_SZGLSZ02 -0.0692224  0.0052840   -13.100  &lt; 2e-16 ***\nDESTIN_SZGLSZ03  0.6493421  0.0043446   149.459  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9327947  0.0043674   213.583  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8161728  0.0043625   187.087  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0658625  0.0042516    15.491  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.8134329  0.0056721  -143.409  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.3546132  0.0066257  -204.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.4500588  0.0048448   -92.895  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5026431  0.0050996   -98.566  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.8673686  0.0059530  -145.704  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0560490  0.0047702    11.750  &lt; 2e-16 ***\nDESTIN_SZHGSZ08 -0.0443189  0.0052599    -8.426  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0126355  0.0054966    -2.299 0.021518 *  \nDESTIN_SZHGSZ10 -3.5821793  0.0263281  -136.059  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.3704281  0.0056684   -65.350  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7369159  0.0058686  -125.570  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8985484  0.0063627  -141.222  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.0511995  0.0073996  -142.061  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5324974  0.0102612  -149.349  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.3105267  0.0048241    64.370  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.3234483  0.0085497  -154.795  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.6559742  0.0083174   -78.867  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.2663752  0.0063370    42.035  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.8529026  0.0076067   112.126  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5559641  0.0074629    74.497  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -0.9790971  0.0071830  -136.308  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8746590  0.0060179  -145.342  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5689062  0.0049105   115.855  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.4520963  0.0050302    89.876  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.0249671  0.0067371  -152.137  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7451483  0.0062189  -119.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -2.8453099  0.0287335   -99.024  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.3372309  0.0058003   -58.141  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  1.0505330  0.0045908   228.832  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2334836  0.0057970   -40.277  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.5416148  0.0061432   -88.164  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8026495  0.0068745  -116.757  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2918594  0.0090197  -143.227  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.4069101  0.0087812   -46.339  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.5333101  0.0363215   -69.747  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.6623343  0.0070761   -93.601  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1408205  0.0054965   -25.620  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.2639235  0.0208254   -60.691  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.5655800  0.0202787   -77.203  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9767682  0.0114687   -85.168  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.3328109  0.0254294  -131.061  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4552859  0.0080666   -56.441  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5386560  0.0064620   -83.358  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4952000  0.0052295    94.694  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.4434175  0.0202509   -71.277  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -2.9194067  0.0449654   -64.926  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.3780179  0.0112867  -122.092  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5044699  0.0080449   -62.707  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -2.0017134  0.0258750   -77.361  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.8120537  0.0434271   -87.781  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1071506  0.0051026   -20.999  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0274710  0.0057611    -4.768 1.86e-06 ***\nDESTIN_SZNVSZ03  0.1076352  0.0057909    18.587  &lt; 2e-16 ***\nDESTIN_SZNVSZ04 -1.2087250  0.0110438  -109.448  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -1.0058290  0.0092167  -109.131  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.2029931  0.0163170   -73.726  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.2878671  0.0074139  -173.709  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1520894  0.0048629   -31.275  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.1985959  0.0050374   -39.424  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5290983  0.0082617  -185.083  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3567934  0.0074298   -48.022  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7114351  0.0134462  -127.280  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3241427  0.0098895   -32.776  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -1.7117196  0.0119003  -143.838  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.5086379  0.0120051   -42.368  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.2026781  0.0068977    29.383  &lt; 2e-16 ***\nDESTIN_SZPNSZ02  0.8313754  0.0078544   105.848  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4041254  0.0086586   -46.673  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.5814539  0.0093641   168.885  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  1.1823430  0.0129843    91.059  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.1057553  0.0088197  -125.374  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0895099  0.0056308    15.897  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6921925  0.0043977   157.397  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.2848336  0.0084725   -33.619  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.1744480  0.0053553    32.575  &lt; 2e-16 ***\nDESTIN_SZPRSZ06  0.4279206  0.0058735    72.856  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.5123108  0.0124303  -121.664  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.5650226  0.0068530   -82.449  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5952360  0.0090505   -65.769  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7728170  0.0078910   -97.937  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5066812  0.0073996   -68.474  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.6398414  0.0075411   -84.847  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4354527  0.0069345   -62.795  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6597391  0.0071919   -91.733  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9392696  0.0112518   -83.477  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4617774  0.0057011    80.998  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.3174497  0.0065890   -48.178  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1993449  0.0059923    33.267  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.2551535  0.0061885    41.230  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1662603  0.0086701   -19.176  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5500978  0.0063091    87.192  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.5364435  0.0070157    76.463  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3611043  0.0081643   166.715  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.1034049  0.0076769   -13.470  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0633902  0.0189846   -56.013  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5486221  0.0165272   -93.701  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.4092611  0.0326906   -73.699  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5172079  0.0139258  -108.950  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.1663615  0.0157430   -74.088  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.2404292  0.0281339   -79.634  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.3783780  0.0096022  -143.549  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.4445213  0.0081630  -176.959  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.5149906  0.0051663    99.683  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.2389086  0.0060765    39.317  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.2737442  0.0082818  -153.801  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.8683520  0.0227277   -82.206  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.5993154  0.0184895   -32.414  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.8156302  0.0059840   136.302  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0900611  0.0057054    15.785  &lt; 2e-16 ***\nDESTIN_SZSESZ02 -0.6397704  0.0052491  -121.882  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1714103  0.0042357    40.468  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0596175  0.0059865  -177.002  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8071891  0.0051229  -157.566  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5580934  0.0066216   -84.284  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.1448863  0.0227788  -138.062  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1795225  0.0060127   -29.857  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.2986570  0.0053561   -55.760  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4074671  0.0050609   -80.513  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1505164  0.0050931   -29.553  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -1.9908372  0.0101448  -196.242  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6715268  0.0041161   163.148  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4494757  0.0055319   -81.252  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5517983  0.0261860   -21.072  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4749154  0.0079257   -59.921  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.9400302  0.0057218   164.290  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2800377  0.0066081   -42.378  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.2570212  0.0145351   -86.482  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.2600474  0.0112800   -23.054  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.7775604  0.0085818   -90.606  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.8586515  0.0073142  -117.396  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.1370887  0.0142148   -79.993  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.3259988  0.0368554  -117.378  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.6632914  0.0252720  -105.385  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.1000906  0.0216372  -143.276  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5952642  0.0156340  -166.001  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2092828  0.0059257   -35.318  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.8238139  0.0039155   465.798  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.8518259  0.0043636   195.210  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0222812  0.0043466   235.191  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6323777  0.0060058   105.294  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3336078  0.0074388   -44.847  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0820469  0.0101689  -106.408  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4186505  0.0119906  -118.313  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3058199  0.0074743   -40.916  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.4872299  0.0061571   -79.133  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7158441  0.0041312   173.278  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.4314229  0.0059917   -72.004  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5898245  0.0076083  -208.959  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.0445550  0.0062363  -167.497  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.4319582  0.0070100   -61.621  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1602303  0.0120352  -179.493  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.1920493  0.0093083  -128.063  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2022481  0.0071137   -28.431  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2464793  0.0090124  -138.308  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0808445  0.0056019   -14.432  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.6784376  0.0066340  -102.267  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.5845062  0.0222086   -71.346  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.1886010  0.0146338   -12.888  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.6525526  0.0092450    70.585  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.5285464  0.0100182    52.759  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.4670106  0.0104357   140.577  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.5043588  0.0167444   149.564  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  1.9787931  0.0054306   364.375  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.2593108  0.0127916  -176.624  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.1897655  0.0326927   -97.568  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0476108  0.0044629   234.738  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3176990  0.0065894  -199.973  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3432057  0.0052496    65.377  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.7895927  0.0073392  -107.586  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8751665  0.0072946  -119.975  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2106221  0.0053027   -39.720  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.6050834  0.0071754  -223.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.5124717  0.0069223   -74.032  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.3813542  0.0054697    69.721  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0853753  0.0046572    18.332  &lt; 2e-16 ***\nDESTIN_SZYSSZ02 -0.3227172  0.0057351   -56.271  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.4151283  0.0066299   -62.615  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.4637327  0.0058206   -79.671  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5888242  0.0111001  -143.136  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.4606209  0.0107759  -135.545  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.7839065  0.0144357   -54.304  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.6265412  0.0045504   137.691  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1520067  0.0048092    31.607  &lt; 2e-16 ***\nlog(DIST)       -1.8468315  0.0004608 -4008.033  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 47094011  on 14470  degrees of freedom\nResidual deviance: 10420261  on 13912  degrees of freedom\nAIC: 10510518\n\nNumber of Fisher Scoring iterations: 7"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/data/geospatial/Business.html",
    "href": "Takehome_Ex/Takehome_Ex02/data/geospatial/Business.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/data/geospatial/Retails.html",
    "href": "Takehome_Ex/Takehome_Ex02/data/geospatial/Retails.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/data/geospatial/Liesure&Recreation.html",
    "href": "Takehome_Ex/Takehome_Ex02/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/data/geospatial/F&B.html",
    "href": "Takehome_Ex/Takehome_Ex02/data/geospatial/F&B.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/data/geospatial/entertn.html",
    "href": "Takehome_Ex/Takehome_Ex02/data/geospatial/entertn.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/data/geospatial/FinServ.html",
    "href": "Takehome_Ex/Takehome_Ex02/data/geospatial/FinServ.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/data/geospatial/Leisure&Recreation.html",
    "href": "Takehome_Ex/Takehome_Ex02/data/geospatial/Leisure&Recreation.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Takehome_Ex/Takehome_Ex02/data/geospatial/MPSZ-2019.html",
    "href": "Takehome_Ex/Takehome_Ex02/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624 Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  }
]